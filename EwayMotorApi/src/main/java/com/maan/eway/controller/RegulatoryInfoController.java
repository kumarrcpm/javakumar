/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-10-06 ( Date ISO 2022-10-06 - Time 15:40:39 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.controller;

import com.maan.eway.req.MotorVehicleInfoGetAllReq;
import com.maan.eway.req.MotorVehicleInfoGetReq;
import com.maan.eway.req.MotorVehicleInfoSaveReq;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.MotorSaveRes;
import com.maan.eway.res.MotorVehicleInfoRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.RegulatoryInfoService;
import com.maan.eway.service.PrintReqService;
import com.maan.eway.error.Error;

import io.swagger.annotations.ApiOperation;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import com.maan.eway.error.Error;


/**
* <h2>RegulatoryInfoController</h2>
*/
@RestController
@RequestMapping("/regulatory")
public class RegulatoryInfoController {

	@Autowired
	private  RegulatoryInfoService entityService;
	

	@Autowired
	private PrintReqService reqPrinter;

    //GET 
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
    @PostMapping("/showvehicleinfo")
	@ApiOperation("This Method is to get by id")
	public ResponseEntity<CommonRes> getVehicleInfo(@RequestBody MotorVehicleInfoGetReq req)
	{
	CommonRes data = new CommonRes();
	MotorVehicleInfoRes res = entityService.getVehicleInfo(req);

	if (res != null) {
		
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");
		return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

	} else {
		List<Error> error = new ArrayList<Error>();
		error.add(new Error("01","Not Found", "No Data Found"));
		data.setCommonResponse(res);
		data.setErrorMessage(error);
		data.setIsError(true);
		data.setMessage("Failed");
		return new ResponseEntity<>(data, HttpStatus.CREATED);
	}
}
 // Get All
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
    @PostMapping("/getallvehicleinfo")
	@ApiOperation(value = "This method is Get all Regulatory Vehicle Info ")

	public ResponseEntity<CommonRes> getallVehicleInfo(@RequestBody MotorVehicleInfoGetAllReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		// Get All
		List<MotorVehicleInfoRes> res = entityService.getallVehicleInfo(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
    
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
    @PostMapping("/savevehicleinfo")
 	@ApiOperation(value = "This method is Save Regulatory Vehicle Info ")

 	public ResponseEntity<CommonRes> saveVehicleInfo(@RequestBody MotorVehicleInfoSaveReq req) {
 		reqPrinter.reqPrint(req);
 		CommonRes data = new CommonRes();
		List<Error> validation = entityService.validateVehicleInfo(req);
		//// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			/////// save
			//Save
 	 		MotorSaveRes res = entityService.saveVehicleInfo(req);
 	 		data.setCommonResponse(res);
 	 		data.setIsError(false);
 	 		data.setErrorMessage(Collections.emptyList());
 	 		data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
 		
 	}

}
