/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-11-18 ( Date ISO 2022-11-18 - Time 11:38:42 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Tuple;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.BrokerCommissionDetails;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.EserviceCommonDetails;
import com.maan.eway.bean.EserviceSectionDetails;
import com.maan.eway.bean.ExchangeMaster;
import com.maan.eway.bean.IndustryMaster;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.LoginBranchMaster;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.bean.OccupationMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.common.req.EserviceCommonGetAllByRefNo;
import com.maan.eway.common.req.EserviceCommonGetByRiskIdReq;
import com.maan.eway.common.req.EserviceCommonSaveReq;
import com.maan.eway.common.req.TrackingDetailsSaveReq;
import com.maan.eway.common.res.EserviceCommonGetRes;
import com.maan.eway.common.res.EserviceCommonSaveRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.service.EserviceCommonService;
import com.maan.eway.error.Error;
import com.maan.eway.repository.EServiceSectionDetailsRepository;
import com.maan.eway.repository.EserviceCommonDetailsRepository;
import com.maan.eway.repository.LoginBranchMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.req.OneTimeTableReq;
import com.maan.eway.res.OneTimeTableRes;
import com.maan.eway.service.OneTimeService;

/**
 * <h2>EserviceBuildingDetailsServiceimpl</h2>
 */
@Service
@Transactional
public class EserviceCommonServiceImpl implements EserviceCommonService {

	@Autowired
	private EserviceCommonDetailsRepository repository;

	@Autowired
	private LoginMasterRepository loginRepo;

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private OneTimeService otService;

	@Autowired
	private EServiceSectionDetailsRepository eserSecRepo ; 
	
	@Autowired
	private LoginBranchMasterRepository lbranchRepo ;
	
	@Autowired
	private GenerateSeqNoServiceImpl genSeqNoService ; 
	
	@Autowired
	private EserviceMotorDetailsServiceImpl motorService ; 
	
	@Value(value = "${personalaccident.productId}")
	private String personalAccidentProductId;
	
	@Value(value = "${employeesliability.productId}")
	private String employeesLiabilityProductId;
	
	@Value(value = "${workmencompensation.productId}")
	private String workmenCompensationProductId;
	
	@Value(value = "${fidelity.productId}")
	private String fidelityProductId;
	
	
	@Autowired
	private TrackingDetailsServiceImpl  trackService ;
	
	private Logger log = LogManager.getLogger(EserviceCommonServiceImpl.class);

	
	
	public OccupationMaster getOccupationMasterDropdown( String companyId , String branchCode ,String productId , String occupationId) {
		OccupationMaster occupation = null ;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<OccupationMaster> query=  cb.createQuery(OccupationMaster.class);
			List<OccupationMaster> list = new ArrayList<OccupationMaster>();
			
			// Find All
			Root<OccupationMaster> c = query.from(OccupationMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<OccupationMaster> ocpm1 = effectiveDate.from(OccupationMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("occupationId"),ocpm1.get("occupationId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate a9 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			effectiveDate.where(a1,a2,a5,a6,a9);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<OccupationMaster> ocpm2 = effectiveDate2.from(OccupationMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("occupationId"),ocpm2.get("occupationId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			Predicate a10 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			effectiveDate2.where(a3,a4,a7,a8,a10);
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"),"99999");
			Predicate n7 = cb.or(n5,n6);
			Predicate n8 = cb.equal(c.get("occupationId"),occupationId);
			Predicate n9 = cb.equal(c.get("productId"),productId );
			query.where(n1,n2,n3,n4,n7,n8,n9).orderBy(orderList);
			TypedQuery<OccupationMaster> result = em.createQuery(query);
			list = result.getResultList();

			if(list.size()>0) {
				list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getOccupationId()))).collect(Collectors.toList());
				list.sort(Comparator.comparing(OccupationMaster :: getOccupationName ));
				occupation = list.get(0);
			}
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return occupation;
		}
	
	public String getProductSectionDropdown(String companyId, String productId, String sectionId) {
		String sectionName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();

			// Find All
			Root<ProductSectionMaster> c = query.from(ProductSectionMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));

			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3, a4);

			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));

			javax.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6, a7, a8);

			// Where
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), companyId);
			javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
			query.where(n1, n2, n3, n4, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();
			sectionName = list.size() > 0 ? list.get(0).getSectionName() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionName;
	}

	
	public String getInscompanyMasterDropdown(String companyId ) {
		String companyName = "" ;
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			javax.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			javax.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
		    // Where	
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			companyName  = list.size()> 0 ? list.get(0).getCompanyName() : "";	
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return companyName;
	}
	
	public String getCompanyProductMasterDropdown(String companyId , String productId) {
		String productName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query=  cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));
			
			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("productId"),productId);
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			productName  = list.size()> 0 ? list.get(0).getProductName() : "";	
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return productName;
		}
	



	private static <T> java.util.function.Predicate<T> distinctByKey(
			java.util.function.Function<? super T, ?> keyExtractor) {
		Map<Object, Boolean> seen = new ConcurrentHashMap<>();
		return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	
	

public synchronized String getListItem(String insuranceId , String branchCode, String itemType, String itemCode) {
	String itemDesc = "" ;
	List<ListItemValue> list = new ArrayList<ListItemValue>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
		// Find All
		Root<ListItemValue> c = query.from(ListItemValue.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		
		// Effective Date Start Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2);
		// Effective Date End Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a3,a4);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n12 = cb.equal(c.get("status"),"R");
		Predicate n13 = cb.or(n1,n12);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
		Predicate n5 = cb.equal(c.get("companyId"), "99999");
		Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		Predicate n8 = cb.or(n4,n5);
		Predicate n9 = cb.or(n6,n7);
		Predicate n10 = cb.equal(c.get("itemType"),itemType );
		Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
		query.where(n13,n2,n3,n8,n9,n10,n11).orderBy(orderList);
		// Get Result
		TypedQuery<ListItemValue> result = em.createQuery(query);
		list = result.getResultList();
		
		itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ; 
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return itemDesc ;
}

public List<Error> validateCommonDetails(EserviceCommonSaveReq req) {
	List<Error> error = new ArrayList<Error>();

	try {

		if (StringUtils.isBlank(req.getBranchCode())) {
			error.add(new Error("01", "BranchCode", "Please Enter BranchCode "));
		} else if (req.getBranchCode().length() > 20) {
			error.add(new Error("01", "Branch Code", "Please Enter Branch Code within 20 Characters"));
		}
		if (StringUtils.isBlank(req.getAgencyCode())) {
			error.add(new Error("02", "Agency Code", "Please Enter AgencyCode "));
		} else if (req.getAgencyCode().length() > 20) {
			error.add(new Error("02", "Agency Code", "Please Enter Agency Code within 20 Characters"));
		}
		if (StringUtils.isBlank(req.getProductId())) {
			error.add(new Error("03", "Product Id", "Please Enter ProductId "));
		} else if (req.getProductId().length() > 20) {
			error.add(new Error("03", "Product Id", "Please Enter Product Id within 20 Characters"));
		}
		
		if (StringUtils.isBlank(req.getSectionId())) {
			error.add(new Error("04", "SectionId", "Please Select Insurance Types"));
		}
		
		if (StringUtils.isBlank(req.getCompanyId())) {
			error.add(new Error("05", "CompanyId", "Please Enter CompanyId "));
		} else if (req.getCompanyId().length() > 20) {
			error.add(new Error("05", "CompanyId", "Please Enter CompanyId within 20 Characters"));
		}

		if (StringUtils.isBlank(req.getCurrency())) {
			error.add(new Error("10", "Currency", "Please Select Currency"));
		}
		if (StringUtils.isBlank(req.getExchangeRate())) {
			error.add(new Error("11", "ExchangeRate", "Please Enter ExchangeRate"));
		}else if(Double.valueOf(req.getExchangeRate())<=0D) {
			error.add(new Error("11", "ExchangeRate", "ExchangeRate Should not be Zero"));
		}else
		 {
			Tuple minMax =   getMinMaxRate(req.getCurrency(),req.getCompanyId());
			if(minMax !=null ) {
				
				Double exRate=Double.valueOf(minMax.get("exchangeRate")==null?"0" : minMax.get("exchangeRate").toString());
				Double minRate=Double.valueOf(minMax.get("minDiscount")==null?"0" : minMax.get("minDiscount").toString());
				Double maxRate=Double.valueOf(minMax.get("maxLoading")==null?"0" :minMax.get("maxLoading").toString());
				minRate=exRate-(exRate*minRate/100);
				maxRate=exRate+(exRate*maxRate/100);
				if(Double.valueOf(req.getExchangeRate())<=minRate || Double.valueOf( req.getExchangeRate())>=maxRate ){
				error.add(new Error("10", "Currency", "This Exchange Rate Should Between "+minRate +" And "+maxRate));
				}
			}
		 }

		if (req.getPolicyStartDate() == null) {
			error.add(new Error("13", "PolicyStartDate", "Please Enter PolicyStartDate"));
		}
		if (req.getPolicyEndDate() == null) {
			error.add(new Error("14", "PolicyEndDate", "Please Enter PolicyEndDate"));

		} else if (req.getPolicyStartDate() != null && req.getPolicyEndDate() != null) {
			if (req.getPolicyEndDate().equals(req.getPolicyStartDate())
					|| req.getPolicyEndDate().before(req.getPolicyStartDate())) {
				error.add(new Error("14", "PolicyEndDate", "PolicyEndDate Before PolicyStartDate Not Allowed"));
			}
		}
		
		// Source Validation
		if( req.getUserType().equalsIgnoreCase("Issuer") && ( req.getSubUserType().equalsIgnoreCase("low") || req.getSubUserType().equalsIgnoreCase("high")
				|| req.getSubUserType().equalsIgnoreCase("both") ) )  {
			if (StringUtils.isBlank(req.getSourceType())) {
				error.add(new Error("10", "SourceType", "Please Select SourceType"));
			} 
			if (StringUtils.isBlank(req.getCustomerCode())) {
				error.add(new Error("10", "CustomerCode", "Please Select CustomerCode"));
			}
			if (StringUtils.isBlank(req.getBrokerCode())) {
				error.add(new Error("10", "SourceCode", "Please Select SourceCode"));
			}
	
		}
		
		if(StringUtils.isNotBlank(req.getSourceType()) && (! req.getSourceType().equalsIgnoreCase("Direct") ) ) {
			if (StringUtils.isBlank(req.getBrokerBranchCode())) {
				error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
			}
		} else if(req.getUserType().equalsIgnoreCase("User") || req.getUserType().equalsIgnoreCase("Broker") ) {
			if (StringUtils.isBlank(req.getBrokerBranchCode())) {
				error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
			}
			
			if (StringUtils.isBlank(req.getBrokerCode())) {
				error.add(new Error("10", "BrokerCode", "Please Select BrokerCode"));
			}
		}

		if (StringUtils.isBlank(req.getCreatedBy())) {

			if (StringUtils.isBlank(req.getApplicationId())) {
				error.add(new Error("17", "ApplicationId", "Please Enter ApplicationId"));
			}

			if (StringUtils.isBlank(req.getLoginId())) {
				error.add(new Error("18", "Login Id", "Please Enter LoginId"));
			} else {
				LoginMaster loginData = loginRepo.findByLoginId(req.getCreatedBy());
				if (loginData.getSubUserType().equalsIgnoreCase("bank")) {
					if (StringUtils.isBlank(req.getAcExecutiveId())) {
						error.add(new Error("19", "AcExecutiveId", "Please Select AcExecutiveId"));
					}
				}
			}
		}
			

		if (StringUtils.isBlank(req.getHavepromocode())) {
			error.add(new Error("46", "Havepromocode", "Please Enter Havepromocode"));
		}
		if (StringUtils.isNotBlank(req.getHavepromocode()) && req.getHavepromocode().equalsIgnoreCase("Y")) {
			if (StringUtils.isBlank(req.getPromocode())) {
				error.add(new Error("47", "Promocode", "Please Enter Promocode"));
			}
		}

		
		
		/*
		if((StringUtils.isNotBlank(req.getAgencyCode()))&& (StringUtils.isNotBlank(req.getLoginId())) && (StringUtils.isNotBlank(req.getCompanyId()))	
				&& (StringUtils.isNotBlank(req.getProductId())) && (StringUtils.isNotBlank(req.getBrokerCode()))){	
			String policy  =	policyRestriction(req.getAgencyCode(), req.getLoginId(),req.getBrokerCode(),req.getCompanyId(),req.getProductId(),"ALL");		
			if(!policy.equalsIgnoreCase("Success")) {
				error.add(new Error("43", "Policy Type", "This loginid is not eligible for this type of policy"));

			}
		
		}
		*/
	} catch (Exception e) {

		log.error(e);
		e.printStackTrace();
	}
	return error;
}


private String policyRestriction(String agencyCode, String loginId, String bdmCode, String companyId,
		String productId, String policyType) {
	// TODO Auto-generated method stub
	String a ="";
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BrokerCommissionDetails> query = cb.createQuery(BrokerCommissionDetails.class);

		// Find All
		Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<BrokerCommissionDetails> ocpm1 = amendId.from(BrokerCommissionDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
		Predicate a4 = cb.equal(ocpm1.get("oaCode"), b.get("oaCode"));
		Predicate a5 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
		Predicate a6 = cb.equal(ocpm1.get("policyType"), b.get("policyType"));
		//Predicate a7 = cb.equal(ocpm1.get("id"), b.get("id"));
		Predicate a8 = cb.equal(ocpm1.get("status"), b.get("status"));

		amendId.where(a1, a2,a3,a4,a5,a6,a8);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("policyType")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), companyId);
		Predicate n3 = cb.equal(b.get("productId"),productId);
		Predicate n4 = cb.equal(b.get("oaCode"),bdmCode);
		Predicate n5 = cb.equal(b.get("loginId"),loginId);
		Predicate n6 = cb.equal(b.get("policyTypeDesc"),policyType);
		Predicate n7 = cb.equal(b.get("status"),"Y");
		Predicate n8 = cb.equal(b.get("agencyCode"),agencyCode);
		Predicate n9 = cb.equal(b.get("status"),"R");
		Predicate n10 = cb.or(n7,n9);

		query.where(n1,n2,n3,n4,n5,n6,n10,n8).orderBy(orderList);
		
		// Get Result
		TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);

		list = result.getResultList();
		List<BrokerCommissionDetails> policy = list
				  .stream()
				  .filter(c -> c.getPolicyTypeDesc().equalsIgnoreCase("ALL"))
				  .collect(Collectors.toList());
		if(policy.size()>0 || list.size()>0) {
			a = "Success";
			}
		} catch (Exception e) {

		log.error(e);
		e.printStackTrace();
	}
	return a;
}

public Tuple getMinMaxRate(String Currency,String CompanyId) {
	Tuple currencyRes =null;
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
		List<Tuple> list = new ArrayList<Tuple>();
		
		// Find All
		Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
		
		Subquery<Long> exchangeRate = query.subquery(Long.class);
		Root<ExchangeMaster> ex = exchangeRate.from(ExchangeMaster.class);
		// Exchange Effective Date Start Max Filter
		Subquery<Long> effectiveDate3 = query.subquery(Long.class);
		Root<ExchangeMaster> ocpm3 = effectiveDate3.from(ExchangeMaster.class);
		effectiveDate3.select(cb.max(ocpm3.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ex.get("exchangeId"),ocpm3.get("exchangeId"));
		Predicate a2 = cb.equal(ex.get("currencyId"),ocpm3.get("currencyId"));
		Predicate a15 = cb.equal(ex.get("companyId"),ocpm3.get("companyId"));
		Predicate a3 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
		effectiveDate3.where(a1,a2,a3,a15);
		
		// Exhange Effective Date End Max Filter
		Subquery<Long> effectiveDate4 = query.subquery(Long.class);
		Root<ExchangeMaster> ocpm4 = effectiveDate4.from(ExchangeMaster.class);
		effectiveDate4.select(cb.max(ocpm4.get("effectiveDateEnd")));
		Predicate a4 = cb.equal(ex.get("exchangeId"),ocpm4.get("exchangeId"));
		Predicate a5 = cb.equal(ex.get("currencyId"),ocpm4.get("currencyId"));
		Predicate a16 = cb.equal(ex.get("companyId"),ocpm4.get("companyId"));
		Predicate a6 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
		effectiveDate4.where(a4,a5,a6,a16);
		
		// Exhange Rate Sub Query
		exchangeRate.select(ex.get("exchangeRate"));
		Predicate a7 = cb.equal(ex.get("currencyId"),Currency);
		Predicate a9 = cb.equal(ex.get("effectiveDateStart"), effectiveDate3);
		Predicate a10 = cb.equal(ex.get("effectiveDateEnd"), effectiveDate4);
		Predicate a17 = cb.equal(ex.get("companyId"),CompanyId);
		exchangeRate.where(a7,a9,a10,a17);

		// Select
		query.multiselect(c.get("currencyId").alias("currencyId") ,
			c.get("minDiscount").alias("minDiscount") , 
				c.get("maxLoading").alias("maxLoading") ,
				exchangeRate.alias("exchangeRate"));
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("currencyName")));
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		javax.persistence.criteria.Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
		javax.persistence.criteria.Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		javax.persistence.criteria.Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
		Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
		
		effectiveDate.where(a11,a12,a18,a22);
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		javax.persistence.criteria.Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
		javax.persistence.criteria.Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		javax.persistence.criteria.Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
		Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
		
		effectiveDate2.where(a13,a14,a19,a23);
		
	    // Where	
		Predicate n1 = cb.equal(c.get("status"), "Y");
		Predicate n11 = cb.equal(c.get("status"), "R");
		Predicate n12 = cb.or(n1,n11);
		javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),CompanyId);
		Predicate n5 = cb.equal(c.get("companyId"),"99999");
		Predicate n6 = cb.or(n4,n5);
		query.where(n12,n2,n3,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<Tuple> result = em.createQuery(query);			
		list =  result.getResultList();
		if( list.size()>0) {
			currencyRes = list.get(0);
		}
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;
	}
	return currencyRes;
}
	

	public List<Error> validateEmployeeLiability(EserviceCommonSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			
		
//			if (StringUtils.isBlank(req.getOccupationType()) ) {
//				error.add(new Error("49", "OccupationType", "Please Select OccupationType"));
//			}
			
//			if (StringUtils.isBlank(req.getCustomerName()) ) {
//				error.add(new Error("49", "CustomerName", "Please Enter CustomerName"));
//			}
//			else if (StringUtils.isNotBlank(req.getCustomerName())&& !req.getCustomerName().matches("(?i)[a-z]([- ',.a-z]{0,23}[a-z])?")) {
//				error.add(new Error("49", "CustomerName", "Please Enter Proper CustomerName"));						
//			}
			// Date Validation
//			Calendar cal = new GregorianCalendar();
//			Date today = new Date();
//			cal.setTime(today);
//			cal.add(Calendar.DAY_OF_MONTH, -1);
//			cal.set(Calendar.HOUR_OF_DAY, 23);
//			cal.set(Calendar.MINUTE, 50);
//			today = cal.getTime();
//			if (req.getDob() == null) {
//				error.add(new Error("38", "Date Of Birth", "Please Enter Date Of Birth "));
//
//			} else if (req.getDob().after(today)) {
//				error.add(new Error("38", "Date Of Birth", "Please Enter Date Of Birth as Past Date"));
//
//			} else {
//
//				LocalDate localDate1 = req.getDob().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//				LocalDate localDate2 = today.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//	
//				Integer years = Period.between(localDate1, localDate2).getYears();
//				if (years > 100) {
//					error.add(new Error("38", "Date Of Birth", "Date Of Birth Not Accepted More than 100 Years"));
//	
//				} else if (years < 18) {
//					error.add(new Error("38", "Date Of Birth", "Date Of Birth Not Accepted Less than 18 Years"));
//	
//				} 
//			}
			
//			if (StringUtils.isBlank(req.getJobJoiningMonth()) ) {
//				error.add(new Error("49", "JobJoiningMonth", "Please Enter JobJoiningMonth"));
//			}
			
			if (StringUtils.isBlank(req.getSumInsured()) ) {
				error.add(new Error("49", "SumInsured", "Please Enter Sum Insured"));
			} else if ( !req.getSumInsured().matches("[0-9.]+")) {
				error.add(new Error("49", "SumInsured", "Please  Valid Sum Insured"));
			}
			
			if (StringUtils.isBlank(req.getIndustryName()) ) {
				error.add(new Error("50", "IndustryName", "Please Enter Industry Name"));
				
			} else if (req.getIndustryName().length() > 100 ) {
				error.add(new Error("50", "IndustryName", "Industry Name Must be Under 100 Character Only Allowed"));
			}  
		
			if (StringUtils.isBlank(req.getNatureOfBusinessId()) ) {
				error.add(new Error("51", "NatureOfBusinessId", "Please Select Nature Of Business"));
				
			} 
			
			if (StringUtils.isBlank(req.getTotalNoOfEmployees()) ) {
				error.add(new Error("52", "TotalNoOfEmployees", "Please Enter Total Number Of Employees"));
			}  else if (! req.getTotalNoOfEmployees().matches("[0-9]+") ) {
				error.add(new Error("52", "TotalNoOfEmployees", "Please Enter Valid Number In Total Number Of Employees"));
			}
			
//			if (StringUtils.isBlank(req.getBetweenDiscontinued()) ) {
//				error.add(new Error("49", "BetweenDiscontinued", "Please Select Between Discontinued Yes/No"));
//			}
//			
//			if (StringUtils.isBlank(req.getEthicalWorkInvolved()) ) {
//				error.add(new Error("49", "EthicalWorkInvolved", "Please Select EthicalWorkInvolved Yes/No"));
//			}
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return error;
	}
	
	public List<Error> validateWorkmenCompensation(EserviceCommonSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			
//		
//			if (StringUtils.isBlank(req.getOccupationType()) ) {
//				error.add(new Error("49", "OccupationType", "Please Select OccupationType"));
//			}
//			
//			if (StringUtils.isBlank(req.getCustomerName()) ) {
//				error.add(new Error("49", "CustomerName", "Please Enter CustomerName"));
//			}
//			else if (StringUtils.isNotBlank(req.getCustomerName())&& !req.getCustomerName().matches("(?i)[a-z]([- ',.a-z]{0,23}[a-z])?")) {
//				error.add(new Error("49", "CustomerName", "Please Enter Proper CustomerName"));						
//			}
			// Date Validation
//			Calendar cal = new GregorianCalendar();
//			Date today = new Date();
//			cal.setTime(today);
//			cal.add(Calendar.DAY_OF_MONTH, -1);
//			cal.set(Calendar.HOUR_OF_DAY, 23);
//			cal.set(Calendar.MINUTE, 50);
//			today = cal.getTime();
//			if (req.getDob() == null) {
//				error.add(new Error("38", "Date Of Birth", "Please Enter Date Of Birth "));
//
//			} else if (req.getDob().after(today)) {
//				error.add(new Error("38", "Date Of Birth", "Please Enter Date Of Birth as Past Date"));
//
//			} else {
//
//				LocalDate localDate1 = req.getDob().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//				LocalDate localDate2 = today.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
//	
//				Integer years = Period.between(localDate1, localDate2).getYears();
//				if (years > 100) {
//					error.add(new Error("38", "Date Of Birth", "Date Of Birth Not Accepted More than 100 Years"));
//	
//				} else if (years < 18) {
//					error.add(new Error("38", "Date Of Birth", "Date Of Birth Not Accepted Less than 18 Years"));
//	
//				} 
//			}
//			
//			if (StringUtils.isBlank(req.getJobJoiningMonth()) ) {
//				error.add(new Error("49", "JobJoiningMonth", "Please Enter JobJoiningMonth"));
//			}
			
			
			if (StringUtils.isBlank(req.getSumInsured()) ) {
				error.add(new Error("49", "SumInsured", "Please Enter Sum Insured"));
			} else if ( !req.getSumInsured().matches("[0-9.]+")) {
				error.add(new Error("49", "SumInsured", "Please  Valid Sum Insured"));
			}
			
			if (StringUtils.isBlank(req.getIndustryName()) ) {
				error.add(new Error("50", "IndustryName", "Please Enter Industry Name"));
				
			} else if (req.getIndustryName().length() > 100 ) {
				error.add(new Error("50", "IndustryName", "Industry Name Must be Under 100 Character Only Allowed"));
			}  
		
			if (StringUtils.isBlank(req.getNatureOfBusinessId()) ) {
				error.add(new Error("51", "NatureOfBusinessId", "Please Select Nature Of Business"));
			} 
			
			if (StringUtils.isBlank(req.getTotalNoOfEmployees()) ) {
				error.add(new Error("52", "TotalNoOfEmployees", "Please Enter Total Number Of Employees"));
			}  else if (! req.getTotalNoOfEmployees().matches("[0-9]+") ) {
				error.add(new Error("52", "TotalNoOfEmployees", "Please Enter Valid Number In Total Number Of Employees"));
			}
			
//			if (StringUtils.isBlank(req.getBetweenDiscontinued()) ) {
//				error.add(new Error("49", "BetweenDiscontinued", "Please Select Between Discontinued Yes/No"));
//			}
//			
//			if (StringUtils.isBlank(req.getEthicalWorkInvolved()) ) {
//				error.add(new Error("49", "EthicalWorkInvolved", "Please Select EthicalWorkInvolved Yes/No"));
//			}
//			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return error;
	}
	
	public List<Error> validatePersonalAccident(EserviceCommonSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			
		
			if (StringUtils.isBlank(req.getOccupationType()) ) {
				error.add(new Error("49", "OccupationType", "Please Select OccupationType"));
			}
			
			if (StringUtils.isBlank(req.getCustomerName()) ) {
				error.add(new Error("49", "CustomerName", "Please Enter CustomerName"));
			}
			else if (StringUtils.isNotBlank(req.getCustomerName())&& !req.getCustomerName().matches("(?i)[a-z]([- ',.a-z]{0,23}[a-z])?")) {
				error.add(new Error("49", "CustomerName", "Please Enter Proper CustomerName"));						
			}
			
			
			if (StringUtils.isBlank(req.getSalaryPerAnnum()) ) {
				error.add(new Error("49", "SumInsured", "Please Enter Salary PerAnnum"));
			} else if ( !req.getSumInsured().matches("[0-9.]+")) {
				error.add(new Error("49", "SumInsured", "Please  Valid Salary PerAnnum"));
			}
			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return error;
	}
	
	
	public List<Error> validateFidelityGuarantee(EserviceCommonSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			if (StringUtils.isBlank(req.getIndustryName()) ) {
				error.add(new Error("50", "IndustryName", "Please Enter Industry Name"));
				
			} else if (req.getIndustryName().length() > 100 ) {
				error.add(new Error("50", "IndustryName", "Industry Name Must be Under 100 Character Only Allowed"));
			}  
		
			if (StringUtils.isBlank(req.getNatureOfBusinessId()) ) {
				error.add(new Error("51", "NatureOfBusinessId", "Please Select Nature Of Business"));
				
			} else if (! req.getNatureOfBusinessId().matches("[0-9]+") ) {
				error.add(new Error("51", "NatureOfBusinessId", "Please Select Valid Nature Of Business"));
			} 
			
			
			if (StringUtils.isBlank(req.getTotalNoOfEmployees()) ) {
				error.add(new Error("52", "TotalNoOfEmployees", "Please Enter Total Number Of Employees"));
			}  else if (! req.getTotalNoOfEmployees().matches("[0-9]+") ) {
				error.add(new Error("52", "TotalNoOfEmployees", "Please Enter Valid Number In Total Number Of Employees"));
			}
			
			if (StringUtils.isBlank(req.getTotalExcludedEmployees()) ) {
				error.add(new Error("53", "TotalExcludedEmployees", "Please Enter Total Excluded Employees"));
			}  else if (! req.getTotalExcludedEmployees().matches("[0-9]+") ) {
				error.add(new Error("53", "TotalExcludedEmployees", "Please Enter Valid Number In Total Excluded Employees"));
			}
			
			if (StringUtils.isBlank(req.getTotalRejoinedEmployees()) ) {
				error.add(new Error("54", "TotalRejoinedEmployees", "Please Enter Total Rejoined Employees"));
			}  else if (! req.getTotalRejoinedEmployees().matches("[0-9]+") ) {
				error.add(new Error("54", "TotalRejoinedEmployees", "Please Enter Valid Number In Total Rejoined Employees"));
				
			} else if(StringUtils.isNotBlank(req.getTotalNoOfEmployees())   && req.getTotalNoOfEmployees().matches("[0-9]+") 
					&& StringUtils.isNotBlank(req.getTotalRejoinedEmployees()) && req.getTotalRejoinedEmployees().matches("[0-9]+")  ) {
				Long totalEmp = Long.valueOf(req.getTotalNoOfEmployees());
				Long rejoinedEmp = Long.valueOf(req.getTotalRejoinedEmployees());
				if(rejoinedEmp > totalEmp ) {
					error.add(new Error("54", "TotalRejoinedEmployees", "Total Rejoined Employees Greater Than Total Number Of Employees Not Allowed"));
				}
				
			}
			
			
			if (StringUtils.isBlank(req.getAccountOutstandingEmployees()) ) {
				error.add(new Error("54", "AccountOutstandingEmployees", "Please Enter Account Outstanding Employees"));
			}  else if (! req.getAccountOutstandingEmployees().matches("[0-9]+") ) {
				error.add(new Error("54", "AccountOutstandingEmployees", "Please Enter Valid Number In Account Outstanding Employees"));
				
			} else if(StringUtils.isNotBlank(req.getTotalNoOfEmployees())   && req.getTotalNoOfEmployees().matches("[0-9]+") 
					&& StringUtils.isNotBlank(req.getAccountOutstandingEmployees()) && req.getAccountOutstandingEmployees().matches("[0-9]+")  ) {
				Long totalEmp = Long.valueOf(req.getTotalNoOfEmployees());
				Long outStEmp = Long.valueOf(req.getAccountOutstandingEmployees());
				if(outStEmp > totalEmp ) {
					error.add(new Error("54", "AccountOutstandingEmployees", "Account Outstanding Employees Greater Than Total Number Of Employees Not Allowed"));
				}
				
			}
			
			if (StringUtils.isBlank(req.getAccountAuditentType()) ) {
				error.add(new Error("55", "AccountAuditentType", "Please Select Account Auditent Type"));
				
			} else if (! req.getNatureOfBusinessId().matches("[0-9]+") ) {
				error.add(new Error("55", "AccountAuditentType", "Please Select Valid Account Auditent Type"));
			} 
			
			if (StringUtils.isBlank(req.getSumInsured()) ) {
				error.add(new Error("49", "SumInsured", "Please Enter SumInsured"));
			} else if ( !req.getSumInsured().matches("[0-9.]+")) {
				error.add(new Error("49", "SumInsured", "Please  Valid SumInsured"));
			} else if(Double.parseDouble(req.getSumInsured()) <=0 ) {
				error.add(new Error("49", "SumInsured", "Please Enter SumInsured Greater than Zero "));
			}
			
			if ((StringUtils.isNotBlank(req.getAccountOutstandingEmployees()))&& (Integer.valueOf(req.getAccountOutstandingEmployees()))>0)  {
			
				if (StringUtils.isBlank(req.getTotalOutstandingAmount()) ) {
				error.add(new Error("56", "TotalOutstandingAmount", "Please Enter Total Outstanding Amount"));
			}  else if (! req.getTotalOutstandingAmount().matches("[0-9]+") ) {
				error.add(new Error("56", "TotalOutstandingAmount", "Please Enter Valid Number In Total Outstanding Amount"));
			}
			}
//			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return error;
	}
	
	
	@Override
	public List<Error> validateEserviceCommonDetails(EserviceCommonSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			
			// Common Validations
			List<Error> commonErrors = validateCommonDetails(req);
			error.addAll(commonErrors);
			
			if (StringUtils.isNotBlank(req.getProductId()) ) {
				
				if (req.getProductId().equalsIgnoreCase(personalAccidentProductId) ){
					
					// Personal Accident Validations
					List<Error> paccErrors = validatePersonalAccident(req);
					error.addAll(paccErrors);
				
				} else if (req.getProductId().equalsIgnoreCase(employeesLiabilityProductId) ){
					
					// Employees Liability Validations
					List<Error> empLiErrors = validateEmployeeLiability(req);
					error.addAll(empLiErrors);
					
				} else if (req.getProductId().equalsIgnoreCase(workmenCompensationProductId) ){
					
					// Workmen Compensation Validations	
					List<Error> workComErrors = validateWorkmenCompensation(req);
					error.addAll(workComErrors);
					
				}  else if (req.getProductId().equalsIgnoreCase(fidelityProductId) ){
					
					// Fidelity Validations	
					List<Error> fidelityErrors = validateFidelityGuarantee(req);
					error.addAll(fidelityErrors);
				}
			} 
			
			// Add 
			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return error;
	}

	@Override
	public List<EserviceCommonSaveRes> saveEserviceCommonDetails(EserviceCommonSaveReq req) {
		List<EserviceCommonSaveRes> resList = new ArrayList<EserviceCommonSaveRes>();
		EserviceCommonDetails saveData = new EserviceCommonDetails();
		String oaCode = "" ;
		try {
			// Save Eservice Common Details
			saveData  = insertEserviceCommonDetails(req); 

			// Section Insert Metohd
			SuccessRes secIns =	insertSectionDetails( req , saveData );
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
		}
		
		try {
			//Direct Broker Details
			if( StringUtils.isNotBlank(req.getSourceType()) && req.getSourceType().equalsIgnoreCase("Direct") ) {
				BranchMaster branchData = getCompanyBranch(req.getCompanyId() , req.getBranchCode() ) ;
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(branchData.getBrokerAgencyCode()), "None", req.getCompanyId());
				if( brokerBranchName!=null) {
					oaCode = brokerBranchName.getOaCode() ;
				}
			// OTher Broker Details	
			} else {
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(req.getBrokerCode()), req.getBrokerBranchCode(), req.getCompanyId());
				if( brokerBranchName!=null) {
					oaCode = brokerBranchName.getOaCode() ;	
					
				}
				
			}
			// One Time Table Thread Call
			resList = OneTimeTableThreadCallMethod( req , saveData ,oaCode);
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		return resList;
	}

	public EserviceCommonDetails insertEserviceCommonDetails(EserviceCommonSaveReq req  ) {
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		EserviceCommonDetails findData = null;
		EserviceCommonDetails saveData = new EserviceCommonDetails();
		String refNo = "";
		try {
			// Save or Update
			if (StringUtils.isBlank(req.getRequestReferenceNo())) {
				String refShortCode = getListItem (req.getCompanyId() , req.getBranchCode() ,"PRODUCT_SHORT_CODE",req.getProductId() );
				refNo = refShortCode +"-"  + genSeqNoService.generateRefNo() ; 
				saveData = dozerMapper.map(req, EserviceCommonDetails.class);
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setEntryDate(new Date());
				saveData.setUpdatedDate(new Date());
			
			}else {
				refNo = req.getRequestReferenceNo() ;
				findData = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),Integer.valueOf(req.getRiskId()));
				saveData = dozerMapper.map(req,EserviceCommonDetails.class);
				
			}
			
			saveData.setBranchCode(  req.getBranchCode()) ;
			saveData.setAcExecutiveId(StringUtils.isBlank(req.getAcExecutiveId())?null :req.getAcExecutiveId());
			saveData.setApplicationId(req.getApplicationId());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			
			//Direct Broker Details
			if( StringUtils.isNotBlank(req.getSourceType()) && req.getSourceType().equalsIgnoreCase("Direct") ) {
				BranchMaster branchData = getCompanyBranch(req.getCompanyId() , req.getBranchCode() ) ;
				saveData.setLoginId(branchData.getDirectBrokerId())		;
				saveData.setBrokerCode(req.getBrokerCode());
				saveData.setBdmCode(req.getBrokerCode());
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(branchData.getBrokerAgencyCode()), "None", req.getCompanyId());
				if( brokerBranchName!=null) {
					saveData.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
					saveData.setBrokerBranchCode(brokerBranchName.getBrokerBranchCode());
			
					
				}
			// OTher Broker Details	
			} else {
				saveData.setLoginId(req.getLoginId())		;
				saveData.setBrokerCode(req.getBrokerCode());
				saveData.setBdmCode(req.getBrokerCode());
				saveData.setBrokerBranchCode(req.getBrokerBranchCode());
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(req.getBrokerCode()), req.getBrokerBranchCode(), req.getCompanyId());
				if( brokerBranchName!=null) {
					saveData.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
					saveData.setCustomerCode( brokerBranchName.getCustomerCode() );
					
					
				}
				
			}

			if(req.getSubUserType().equalsIgnoreCase("b2b") || req.getSubUserType().equalsIgnoreCase("b2c")  ) {
				saveData.setSourceType("Broker");
						
			} else if(req.getSubUserType().equalsIgnoreCase("bank")) {
				saveData.setSourceType("Agent" );
			}   else {
				saveData.setSourceType(req.getSourceType() );
				saveData.setCustomerCode(req.getCustomerCode() );
			}

			;

			// Admin Details
			if( findData !=null ) {
				// Delete Old
				repository.delete( findData);
				
				saveData.setAdminLoginId(findData.getAdminLoginId());
				saveData.setAdminRemarks(findData.getAdminRemarks());
				saveData.setReferalRemarks(findData.getReferalRemarks());
				saveData.setRejectReason(findData.getRejectReason());
				saveData.setQuoteNo(findData.getQuoteNo());
				saveData.setCustomerId(findData.getCustomerId());
				saveData.setOldReqRefNo(findData.getOldReqRefNo());
				saveData.setCreatedBy(findData.getCreatedBy());
				saveData.setEntryDate(findData.getEntryDate());
				saveData.setManualReferalYn(findData.getManualReferalYn());
				
			}
			
			// DropDowns 
			String productName =   getCompanyProductMasterDropdown(req.getCompanyId() , req.getProductId()); 
			String companyName =  getInscompanyMasterDropdown(req.getCompanyId()) ;
			String sectionName = getProductSectionDropdown(req.getCompanyId(), req.getProductId(),req.getSectionId());
			
			// Occupation
			OccupationMaster occupationData  = null ; 
			if (StringUtils.isNotBlank(req.getOccupationType()) ) {
				occupationData = getOccupationMasterDropdown(req.getCompanyId() , req.getBranchCode() ,req.getProductId() ,req.getOccupationType());	
			}
			
			
		
			// Other Details
			Integer riskId = Integer.valueOf(req.getRiskId()) ;
			saveData.setRiskId(riskId);			
			saveData.setRequestReferenceNo(refNo);
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			saveData.setRequestReferenceNo(refNo);
		//	saveData.setStatus("Y");
			saveData.setProductDesc(productName);
			saveData.setCompanyName(companyName);
			saveData.setSumInsured(StringUtils.isBlank(req.getSumInsured())?new BigDecimal(0):new BigDecimal(req.getSumInsured()));
			saveData.setSectionDesc(sectionName);
			saveData.setCustomerReferenceNo(req.getCustomerReferenceNo());
			saveData.setIndustryName(req.getIndustryName());
			saveData.setTotalNoOfEmployees(req.getTotalNoOfEmployees()=="" ?0L : Long.valueOf(req.getTotalNoOfEmployees()));
			if(StringUtils.isNotBlank(req.getNatureOfBusinessId()) ) {
				saveData.setNatureOfBusinessId(Integer.valueOf(req.getNatureOfBusinessId()));
				String 	naturOfBusiness = getIndustryName(req.getCompanyId(), req.getProductId(),req.getBranchCode(),"99999" , req.getNatureOfBusinessId());	
				saveData.setNatureOfBusinessDesc(naturOfBusiness);
				saveData.setOccupationType(req.getNatureOfBusinessId());
				saveData.setOccupationDesc(naturOfBusiness);	
					
			}
			saveData.setTotalExcludedEmployees(StringUtils.isBlank(req.getTotalExcludedEmployees())?0L:Long.valueOf(req.getTotalExcludedEmployees()));
			saveData.setTotalRejoinedEmployees(StringUtils.isBlank(req.getTotalRejoinedEmployees())?0L:Long.valueOf(req.getTotalRejoinedEmployees()));
			saveData.setTotalOutstandingAmount(StringUtils.isBlank(req.getTotalOutstandingAmount())?0L:Long.valueOf(req.getTotalOutstandingAmount()));
			saveData.setAccountOutstandingEmployees(StringUtils.isBlank(req.getAccountOutstandingEmployees())?0L:Long.valueOf(req.getAccountOutstandingEmployees()));
			if(StringUtils.isBlank(req.getAccountAuditentType()) ) {
				saveData.setAccountAuditentType(req.getAccountAuditentType()=="" ? 0 : Integer.valueOf( req.getAccountAuditentType()));
				String auditentType = getListItem (req.getCompanyId() , req.getBranchCode() ,"AUDITENT_TYPE",req.getAccountAuditentType() );
				saveData.setAuditentTypeDesc(auditentType);
			}
			
			saveData.setBankCode(req.getBankCode());
			saveData.setSalaryPerAnnum(StringUtils.isBlank(req.getSalaryPerAnnum())?new BigDecimal(0):new BigDecimal(req.getSalaryPerAnnum()));
			saveData.setBenefitCoverMonth(StringUtils.isBlank(req.getBenefitCoverMonth())?null : Integer.valueOf(req.getBenefitCoverMonth()));
			
			saveData.setCategoryId("99999");
			if( occupationData!=null ) {
				saveData.setCategoryId(occupationData.getCategoryId());
				saveData.setOccupationDesc(occupationData.getOccupationName());	
			}
			
			
			
			// Endoresment Changes
			if(!(req.getEndorsementType()==null || req.getEndorsementType()==0))
				
			 {
			  
				saveData.setOriginalPolicyNo(req.getOriginalPolicyNo());
				saveData.setEndorsementDate(req.getEndorsementDate());
				 saveData.setEndorsementRemarks(req.getEndorsementRemarks());
				 saveData.setEndorsementEffdate(req.getEndorsementEffdate());
				 saveData.setEndtPrevPolicyNo(req.getEndtPrevPolicyNo());
				 saveData.setEndtPrevQuoteNo(req.getEndtPrevQuoteNo());
				 saveData.setEndtCount(req.getEndtCount());
				 saveData.setEndtStatus(req.getEndtStatus());
				 saveData.setIsFinaceYn(req.getIsFinaceYn());
				 saveData.setEndtCategDesc(req.getEndtCategDesc());
				 saveData.setEndorsementType(req.getEndorsementType());
				 saveData.setEndorsementTypeDesc(req.getEndorsementTypeDesc());
				  
			}
			// Status
			saveData.setStatus(StringUtils.isBlank(req.getStatus()) ? "Y" : req.getStatus() );
			if(saveData.getStatus().equalsIgnoreCase("D") ) {
				//	BigDecimal.ZERO
					saveData.setSumInsured(BigDecimal.ZERO);
					
				}
			
			// Date Differents
			Date periodStart =  req.getPolicyStartDate();
			Date periodEnd = req.getPolicyEndDate() ;
			String diff = "0";
			
			if(periodStart!=null && periodEnd!=null ) {
				Long diffInMillies = Math.abs(periodEnd.getTime() - periodStart.getTime());
				Long daysBetween =  TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS) ;
				
				// Check Leap Year
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
				boolean leapYear = LocalDate.parse(sdf.format(periodEnd) ).isLeapYear();
				diff = String.valueOf(daysBetween==364 &&  leapYear==false ? daysBetween+1 : 
					  daysBetween==364 &&  leapYear==true ? daysBetween+2 : 
					  daysBetween==365 &&  leapYear==true ? daysBetween+1 : daysBetween );
				
				
			}
			saveData.setPolicyPeriod(Integer.valueOf(diff));
			
			repository.saveAndFlush(saveData);
			
			// Insert Tracking
			{
				TrackingDetailsSaveReq trackingReq=new TrackingDetailsSaveReq();
				trackingReq.setProductId(req.getProductId());
				trackingReq.setStatus(req.getStatus());
				trackingReq.setBranchCode(req.getBranchCode());
				if( findData !=null ) {
					trackingReq.setQuoteNo(findData.getQuoteNo());
					}else {
						trackingReq.setQuoteNo("");
					}
				trackingReq.setRiskId(riskId.toString());
				trackingReq.setCompanyId(req.getCompanyId());
				trackingReq.setPolicyNo(req.getPolicyNo());
				trackingReq.setOriginalPolicyNo(req.getOriginalPolicyNo());
				trackingReq.setCreatedby(req.getCreatedBy());
				trackingReq.setRequestReferenceNo(refNo);			
				trackingReq.setRemarks(req.getEndorsementRemarks());
				trackService.insertTrackingDetails(trackingReq);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return saveData;
	}
	
	private String getIndustryName(String companyId, String productId, String branchCode,String categoryId , String industryId) {
		String industryName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
			List<IndustryMaster> list = new ArrayList<IndustryMaster>();

			// Find All
			Root<IndustryMaster> c = query.from(IndustryMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("categoryDesc")));

			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<IndustryMaster> ocpm1 = effectiveDate.from(IndustryMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("industryId"),ocpm1.get("industryId"));
			Predicate a1 = cb.equal(c.get("categoryId"), ocpm1.get("categoryId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			
			effectiveDate.where(a1, a2, a3, a4,a5,a11);

			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<IndustryMaster> ocpm2 = effectiveDate2.from(IndustryMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a12 = cb.equal(c.get("industryId"),ocpm2.get("industryId"));
			javax.persistence.criteria.Predicate a6 = cb.equal(c.get("categoryId"), ocpm2.get("categoryId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a6, a7, a8, a9,a10,a12);

			// Where
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), companyId);
			javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("categoryId"),categoryId);
			Predicate n10 = cb.equal(c.get("industryId"),industryId);
			Predicate n7 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n8 = cb.equal(c.get("branchCode"),"99999");
			Predicate n9 = cb.or(n7,n8);
		
			
			query.where(n1, n2, n3, n4, n5, n6,n9,n10).orderBy(orderList);

			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			list = result.getResultList();
			industryName = list.size() > 0 ? list.get(0).getIndustryName() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return industryName;
	}

	public BranchMaster getCompanyBranch( String insuranceId , String branchCode) {
		BranchMaster branchData = new BranchMaster();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat idf = new SimpleDateFormat("yyMMddhhssmmss");
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			// Login Data
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
			List<BranchMaster> branchlist = new ArrayList<BranchMaster>();
			
			// Find All
			Root<BranchMaster>    c = query.from(BranchMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("branchCode")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			effectiveDate.where(a1,a2,a3);
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode") );
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			effectiveDate2.where(a4,a5,a6);
			
			 // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 =cb.equal(c.get("companyId"), insuranceId );
			Predicate n6 =cb.equal(c.get("branchCode"), branchCode);
			query.where(n1,n2,n3,n5,n6).orderBy(orderList);	
			
			// Get Result
			TypedQuery<BranchMaster> result = em.createQuery(query);			
			branchlist =  result.getResultList();
			
			branchData = branchlist.get(0);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return branchData;
	}

	
	public SuccessRes insertSectionDetails(EserviceCommonSaveReq req , EserviceCommonDetails savedData ) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Long paccSecCount = eserSecRepo.countByRequestReferenceNoAndRiskId(savedData.getRequestReferenceNo() ,savedData.getRiskId() );
			if(paccSecCount>0 ) {
				// Delete Old Data
				eserSecRepo.deleteByRequestReferenceNoAndRiskId(savedData.getRequestReferenceNo() ,savedData.getRiskId() );
			}
			
			EserviceSectionDetails secData = new EserviceSectionDetails(); 
			String sectionName =  getProductSectionDropdown(req.getCompanyId() , req.getProductId(),req.getSectionId());// sectionRepo.findBySectionIdOrderByAmendIdDesc(Integer.valueOf(req.getSectionId())); 
			mapper.map(savedData, secData);
			secData.setExchageRate(savedData.getExchangeRate());
			secData.setCurrencyId(req.getCurrency());
			secData.setSectionId(req.getSectionId());
			secData.setSectionDesc(sectionName);
			secData.setRiskId(savedData.getRiskId());
			secData.setUserOpt("N");
			eserSecRepo.saveAndFlush(secData);
			
			res.setResponse("Success");
			res.setSuccessId(savedData.getRequestReferenceNo());
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}
	
	
	public List<EserviceCommonSaveRes> OneTimeTableThreadCallMethod(EserviceCommonSaveReq req , EserviceCommonDetails savedData , String oaCode) {
		List<EserviceCommonSaveRes> resList = new ArrayList<EserviceCommonSaveRes>();
		try {
			List<OneTimeTableRes> otResList = null;
				// One Time Table Thread Call
				OneTimeTableReq otReq = new OneTimeTableReq();
				otReq.setRequestReferenceNo(savedData.getRequestReferenceNo());
				otReq.setVehicleId(savedData.getRiskId());
				otReq.setAgencyCode(StringUtils.isBlank(oaCode) ? savedData.getAgencyCode(): oaCode );
				otReq.setBranchCode(savedData.getBranchCode());
				otReq.setInsuranceId(savedData.getCompanyId());
				otReq.setProductId(Integer.valueOf(savedData.getProductId()));
				List<String> sectionIds = new ArrayList<String>(); 
				sectionIds.add(req.getSectionId());
				otReq.setSectionIds(sectionIds);
				
				otResList = otService.call_OT_Insert(otReq);
				
				// One Time Table Response 
				for (OneTimeTableRes otRes : otResList ) {
					EserviceCommonSaveRes res = new EserviceCommonSaveRes();
					res.setResponse("Saved Successfully");
		 			res.setRequestReferenceNo(savedData.getRequestReferenceNo());
		 			res.setCustomerReferenceNo(req.getCustomerReferenceNo());
		 			res.setRiskId(savedData.getRiskId().toString()) ;			 
					res.setAsRefNo(otRes.getVdRefNo());
					res.setCdRefNo(otRes.getCdRefNo());
					res.setMsrefno(otRes.getMsRefNo());
					res.setCompanyId(otRes.getCompanyId());
					res.setCreatedBy(req.getCreatedBy());
					res.setProductId(otRes.getProductId());
					res.setSectionId(otRes.getSectionId());
					resList.add(res);
				}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return resList;
	}
	
	@Override
	public EserviceCommonGetRes getEserviceCommonDetailsByRiskId(EserviceCommonGetByRiskIdReq req) {
		EserviceCommonGetRes res = new EserviceCommonGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			EserviceCommonDetails data = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),Integer.valueOf(req.getRiskId()));
			res = mapper.map(data, EserviceCommonGetRes.class);
			res.setSumInsured(data.getSumInsured()==null?"":data.getSumInsured().toPlainString() );
			res.setSalaryPerAnnum(data.getSalaryPerAnnum()==null?"":data.getSalaryPerAnnum().toPlainString() );
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<EserviceCommonGetRes> getAllEserviceCommonDetailsByRefNo(EserviceCommonGetAllByRefNo req) {
		List<EserviceCommonGetRes> reslist = new ArrayList<EserviceCommonGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<EserviceCommonDetails> datas = repository.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			
			for (EserviceCommonDetails data : datas) {
				EserviceCommonGetRes res = new EserviceCommonGetRes();
				res = mapper.map(data, EserviceCommonGetRes.class);
				res.setSumInsured(data.getSumInsured()==null?"":data.getSumInsured().toPlainString() );
				res.setSalaryPerAnnum(data.getSalaryPerAnnum()==null?"":data.getSalaryPerAnnum().toPlainString() );
				reslist.add(res);
			}
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return reslist;
	}
	
	/*
	 * @Override public boolean delete(long id) { try { repository.deleteById(id);
	 * return true;
	 * 
	 * } catch (Exception ex) { log.error(ex); return false; } }
	 * 
	 */

}
