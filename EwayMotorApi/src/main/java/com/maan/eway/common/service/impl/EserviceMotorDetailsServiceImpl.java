/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-23 ( Date ISO 2022-09-23 - Time 15:08:00 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.service.impl;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Tuple;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.CriteriaUpdate;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.BrokerCommissionDetails;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.EserviceCustomerDetails;
import com.maan.eway.bean.EserviceDriverDetails;
import com.maan.eway.bean.EserviceMotorDetails;
import com.maan.eway.bean.EserviceSectionDetails;
import com.maan.eway.bean.ExchangeMaster;
import com.maan.eway.bean.HomePositionMaster;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.LoginBranchMaster;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.bean.MotorBodyTypeMaster;
import com.maan.eway.bean.MotorDriverDetails;
import com.maan.eway.bean.PersonalInfo;
import com.maan.eway.bean.PolicyTypeMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.common.req.DriverDetailsGetReq;
import com.maan.eway.common.req.DriverDetailsGetRes;
import com.maan.eway.common.req.DriverDetailsRes;
import com.maan.eway.common.req.DriverDetailsSaveReq;
import com.maan.eway.common.req.DriverLicenceReq;
import com.maan.eway.common.req.DriverSaveRes;
import com.maan.eway.common.req.EserviceMotorDetailsGetReq;
import com.maan.eway.common.req.EserviceMotorDetailsGetallReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveRes;
import com.maan.eway.common.req.EserviceMotorUwReq;
import com.maan.eway.common.req.ExistingMotorDetailsReq;
import com.maan.eway.common.req.MotorDriverSaveReq;
import com.maan.eway.common.req.TrackingDetailsSaveReq;
import com.maan.eway.common.req.UpdateLapsedQuoteReq;
import com.maan.eway.common.res.EserviceCustomerDetailsRes;
import com.maan.eway.common.res.EserviceMotorDetailsRes;
import com.maan.eway.common.res.GetAllMotorDetailsRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.res.UwQuestionsRes;
import com.maan.eway.common.service.EserviceMotorDetailsService;
import com.maan.eway.error.Error;
import com.maan.eway.repository.EServiceDriverDetailsRepository;
import com.maan.eway.repository.EServiceMotorDetailsRepository;
import com.maan.eway.repository.EServiceSectionDetailsRepository;
import com.maan.eway.repository.EserviceCustomerDetailsRepository;
import com.maan.eway.repository.HomePositionMasterRepository;
import com.maan.eway.repository.InsuranceCompanyMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.LoginBranchMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.repository.MotorBodyTypeMasterRepository;
import com.maan.eway.repository.MotorDriverDetailsRepository;
import com.maan.eway.repository.MotorMakeMasterRepository;
import com.maan.eway.repository.MotorMakeModelMasterRepository;
import com.maan.eway.repository.PersonalInfoRepository;
import com.maan.eway.repository.ProductMasterRepository;
import com.maan.eway.repository.SectionMasterRepository;
import com.maan.eway.repository.SeqTrackingRepository;
import com.maan.eway.repository.TrackingDetailsRepository;
import com.maan.eway.req.MotorVehicleInfoGetReq;
import com.maan.eway.req.OneTimeTableReq;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.MotorVehicleInfoRes;
import com.maan.eway.res.OneTimeTableRes;
import com.maan.eway.service.OneTimeService;
import com.maan.eway.service.RegulatoryInfoService;

@Service
@Transactional
public class EserviceMotorDetailsServiceImpl implements EserviceMotorDetailsService {

	@Autowired
	private EServiceMotorDetailsRepository repo;

	@Autowired
	private TrackingDetailsRepository trackingrepo;

	@Autowired
	private ListItemValueRepository livRepo;

	@Autowired
	private SeqTrackingRepository seqTracRepo;
	
	@Autowired
	private ListItemValueRepository listRepo;
	
	@Autowired
	private LoginMasterRepository loginRepo ;

	@Autowired
	private MotorMakeMasterRepository makerepo;

	@Autowired
	private MotorMakeModelMasterRepository modelrepo;

	@Autowired
	private MotorBodyTypeMasterRepository bodyrepo;
	
	@Autowired
	private OneTimeService otService;
	
	@Autowired
	private ProductMasterRepository productRepo;

	@Autowired
	private SectionMasterRepository sectionRepo;

	@Autowired
	private InsuranceCompanyMasterRepository companyRepo;
	

	@Autowired
	private EServiceSectionDetailsRepository eserSecRepo ; 
//	@Autowired
//	private CalculatorEngine calcService;
//	
	@Autowired
	private EserviceCustomerDetailsRepository custRepo ;
	
	@Autowired
	private LoginBranchMasterRepository lbranchRepo ;
	
	@Autowired
	private HomePositionMasterRepository homeRepo ;

	@Autowired
	private MotorDriverDetailsRepository driverRepo ;
	
	@Autowired
	private PersonalInfoRepository personalRepo ;
	
	@Autowired
	private  RegulatoryInfoService regulatoryService;
	
	@PersistenceContext
	private EntityManager em;

	private Logger log = LogManager.getLogger(EserviceMotorDetailsServiceImpl.class);

	Gson json = new Gson();
	SimpleDateFormat sdfFormat = new SimpleDateFormat("ddMMyyyyhhmmss");
	@Autowired
	private GenerateSeqNoServiceImpl genSeqNoService ; 
	
	@Autowired
	private EServiceDriverDetailsRepository eserDriverRepo ;
	
	@Autowired
	private TrackingDetailsServiceImpl  trackService ;
	
	@Override
	public List<Error> validateMotorDetails(EserviceMotorDetailsSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {

			if (StringUtils.isBlank(req.getBranchCode())) {
				error.add(new Error("01", "BranchCode", "Please Enter BranchCode "));
			} else if (req.getBranchCode().length() > 20) {
				error.add(new Error("01", "Branch Code", "Please Enter Branch Code within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getAgencyCode())) {
				error.add(new Error("02", "Agency Code", "Please Enter AgencyCode "));
			} else if (req.getAgencyCode().length() > 20) {
				error.add(new Error("02", "Agency Code", "Please Enter Agency Code within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getProductId())) {
				error.add(new Error("03", "Product Id", "Please Enter ProductId "));
			} else if (req.getProductId().length() > 20) {
				error.add(new Error("03", "Product Id", "Please Enter Product Id within 20 Characters"));
			}
			
			if (StringUtils.isBlank(req.getCompanyId())) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId "));
			} else if (req.getCompanyId().length() > 20) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId within 20 Characters"));
			}
			
			if (StringUtils.isBlank(req.getInsuranceType())) {
				error.add(new Error("06", "Insurance Type", "Please Select Insurance Type "));
			}
			if (StringUtils.isBlank(req.getInsuranceClass())) {
				error.add(new Error("07", "InsuranceClass", "Please Select Insurance Class "));
			}
			
			// Chassis No Restrict
			if (StringUtils.isNotBlank(req.getRequestReferenceNo()) && StringUtils.isNotBlank(req.getChassisNumber())) {
				EserviceMotorDetails findData = repo.findByRequestReferenceNoAndChassisNumberOrderByRiskIdAsc(req.getRequestReferenceNo() , req.getChassisNumber()  );
				if(findData!=null && ! req.getVehicleId().equalsIgnoreCase(findData.getRiskId().toString())  ) {
					error.add(new Error("07", "Chassis Number", "Chassis Number Already Selected For Vehicle Id : " + findData.getRiskId() ));
				}
			}
			
			if (StringUtils.isBlank(req.getChassisNumber())) {
				error.add(new Error("07", "ChassisNumber", "Please Enter Chassis Number"));
			} else {
				MotorVehicleInfoGetReq searchReq = new MotorVehicleInfoGetReq(); 
				searchReq.setReqChassisNumber(req.getChassisNumber());
				MotorVehicleInfoRes res = regulatoryService.getVehicleInfo(searchReq);

				if (res == null) {
					error.add(new Error("01","Chassis Number", "Chassis Number Not Registered In Premia"));

				}
			}
			
			if (StringUtils.isBlank(req.getHavepromocode())) {
				error.add(new Error("10", "Havepromocode", "Please Select Havepromocode Yes/No"));
			} else if ( !(req.getHavepromocode().equalsIgnoreCase("Y") || req.getHavepromocode().equalsIgnoreCase("N") )) {
				error.add(new Error("10", "Havepromocode", "Please Select Havepromocode Yes/No"));
			}else if (req.getHavepromocode().equalsIgnoreCase("Y") ) {
				if (StringUtils.isBlank(req.getPromocode())) {
					error.add(new Error("10", "Promocode", "Please Enter Promocode"));
				}else if (req.getPromocode().length() > 20 ) {
					error.add(new Error("10", "Promocode", "Promocode Must Be Under 20 Charecter Only Allowed"));
				}
			}
			

			if (StringUtils.isBlank(req.getCurrency())) {
				error.add(new Error("10", "Currency", "Please Select Currency"));
			}
			if (StringUtils.isBlank(req.getExchangeRate())) {
				error.add(new Error("11", "ExchangeRate", "Please Enter ExchangeRate"));
			}else if(Double.valueOf(req.getExchangeRate())<=0D) {
				error.add(new Error("11", "ExchangeRate", "ExchangeRate Should not be Zero"));
			}else
				 {
					Tuple minMax =   getMinMaxRate(req.getCurrency(),req.getCompanyId());
					if(minMax !=null ) {
						
						Double exRate=Double.valueOf(minMax.get("exchangeRate")==null?"0" : minMax.get("exchangeRate").toString());
						Double minRate=Double.valueOf(minMax.get("minDiscount")==null?"0" : minMax.get("minDiscount").toString());
						Double maxRate=Double.valueOf(minMax.get("maxLoading")==null?"0" :minMax.get("maxLoading").toString());
						minRate=exRate-(exRate*minRate/100);
						maxRate=exRate+(exRate*maxRate/100);
						if(Double.valueOf(req.getExchangeRate())<=minRate || Double.valueOf( req.getExchangeRate())>=maxRate ){
						error.add(new Error("10", "ExchangeRate", "This Exchange Rate Should Between "+minRate +" And "+maxRate));
						}
					}
				 }
			
			// Source Validation
			if( req.getUserType().equalsIgnoreCase("Issuer") && ( req.getSubUserType().equalsIgnoreCase("low") || req.getSubUserType().equalsIgnoreCase("high")
					|| req.getSubUserType().equalsIgnoreCase("both") ) )  {
				if (StringUtils.isBlank(req.getSourceType())) {
					error.add(new Error("10", "SourceType", "Please Select SourceType"));
				} 
				if (StringUtils.isBlank(req.getCustomerCode())) {
					error.add(new Error("10", "CustomerCode", "Please Select CustomerCode"));
				}
				if (StringUtils.isBlank(req.getBrokerCode())) {
					error.add(new Error("10", "SourceCode", "Please Select SourceCode"));
				}
		
			}
			
			if(StringUtils.isNotBlank(req.getSourceType()) && (! req.getSourceType().equalsIgnoreCase("Direct") ) ) {
				if (StringUtils.isBlank(req.getBrokerBranchCode())) {
					error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
				}
			} else if(req.getUserType().equalsIgnoreCase("User") || req.getUserType().equalsIgnoreCase("Broker") ) {
				if (StringUtils.isBlank(req.getBrokerBranchCode())) {
					error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
				}
				
				if (StringUtils.isBlank(req.getBrokerCode())) {
					error.add(new Error("10", "SourceCode", "Please Select BrokerCode"));
				}
			}
			
			
			if (StringUtils.isBlank(req.getExchangeRate())) {
				error.add(new Error("11", "ExchangeRate", "Please Enter ExchangeRate"));
			}
			if (StringUtils.isBlank(req.getGpsTrackingInstalled())) {
				error.add(new Error("12", "GpsTrackingInstalled", "Please Enter GpsTrackingInstalled"));
			}
			if (req.getPolicyStartDate()==null) {
				error.add(new Error("13", "PolicyStartDate", "Please Enter PolicyStartDate"));
			} else {
				long MILLS_IN_A_DAY = 1000*60*60*24;
				long days90 = MILLS_IN_A_DAY * 90 ;
				Date today = new Date() ;
				
				Date oneDaybefore = new Date(today.getTime() - MILLS_IN_A_DAY) ;
				Date resticDate = new Date(today.getTime() + days90);
				if( req.getPolicyStartDate().before(oneDaybefore) && (req.getEndorsementType()==null || req.getEndorsementType()==0) ) {
					error.add(new Error("14", "PolicyStartDate", "PolicyStartDate  Pass Date Not Allowed"));
				} else if( req.getPolicyStartDate().after(resticDate) ) {
					error.add(new Error("14", "PolicyStartDate", "PolicyStartDate  even after 90 days Not Allowed"));
				}
			}
			if (req.getPolicyEndDate()==null) {
				error.add(new Error("14", "PolicyEndDate", "Please Enter PolicyEndDate"));
			}else if (req.getPolicyStartDate()!=null && req.getPolicyEndDate()!=null) {
				if( req.getPolicyStartDate().after(req.getPolicyEndDate())) {
					error.add(new Error("14", "PolicyEndDate", "PolicyStartDate After PolicyEndDate Not Allwoed"));	
				}
				
			}
			if (StringUtils.isNotBlank(req.getInsuranceClass()) && ( req.getInsuranceClass().equalsIgnoreCase("1") || req.getInsuranceClass().equalsIgnoreCase("2") )) {
				if(req.getSumInsured() ==null ) 
					error.add(new Error("15", "SumInsured", "Please Enter Vehicle SumInsured"));
				else if (! req.getSumInsured().matches("[0-9.]+") )
					error.add(new Error("15", "SumInsured", "Please Enter Valid Vehicle  SumInsured"));
				else if(Double.parseDouble(req.getSumInsured()) <=0 && (req.getEndorsementType()==null ||req.getEndorsementType()==0) ) {
					error.add(new Error("15", "SumInsured", "Please Enter Vehicle  SumInsured Greater than Zero "));
				}

					
			}
			if (req.getAcccessoriesSumInsured()!=null && (! req.getAcccessoriesSumInsured().toString().matches("[0-9.]+")) ) {
				error.add(new Error("16", "AcccessoriesSumInsured", "Please Enter Valid AcccessoriesSumInsured"));
			}
			if (req.getWindScreenSumInsured()!=null && (! req.getWindScreenSumInsured().toString().matches("[0-9.]+")) ) {
				error.add(new Error("17", "WindScreenSumInsured", "Please Enter Valid WindScreenSumInsured"));
			}
			
			if (StringUtils.isNotBlank(req.getCollateralYn()) && req.getCollateralYn().equalsIgnoreCase("Y")) {
			if (StringUtils.isBlank(req.getBorrowerType())) {
				error.add(new Error("18", "BorrowerType", "Please Enter BorrowerType"));
			}
			if (StringUtils.isBlank(req.getCollateralName())) {
				error.add(new Error("19", "CollateralName", "Please Enter CollateralName"));
			}

			if (StringUtils.isBlank(req.getFirstLossPayee())) {
				error.add(new Error("20", "FirstLossPayee", "Please Enter FirstLossPayee"));
			}		

			}
			// Fleet == Y
//			if (StringUtils.isNotBlank(req.getFleetOwnerYn()) && req.getFleetOwnerYn().equalsIgnoreCase("Y")) {
//				if (StringUtils.isBlank(req.getNoOfVehicles())) {
//					error.add(new Error("21", "NoOfVehicles", "Please Enter NoOfVehicles"));
//				}
//				if (StringUtils.isBlank(req.getNoOfComprehensives())) {
//					error.add(new Error("22", "NoOfComprehensives", "Please Enter NoOfComprehensives"));
//				}
//				if (StringUtils.isBlank(req.getClaimRatio())) {
//					error.add(new Error("23", "ClaimRatio", "Please Enter ClaimRatio"));
//				}
//				}
			if (StringUtils.isBlank(req.getVehicleType())) {
				error.add(new Error("24", "VehicleType", "Please Enter VehicleType"));
			}
			
			
			
			if (StringUtils.isBlank(req.getNcdYn())) {
				error.add(new Error("25", "NcdYn", "Please Select ClaimsYn"));
			}
			if (StringUtils.isBlank(req.getUserType())) {
				error.add(new Error("25", "UserType", "Please Enter UserType"));
			}
			if (StringUtils.isBlank(req.getMotorUsage())) {
				error.add(new Error("25", "MotorUsage", "Please Select MotorUsage"));
			}
			
			if( StringUtils.isBlank(req.getCreatedBy()) ) {

				if(StringUtils.isBlank(req.getApplicationId() ) ){
					error.add(new Error("01", "ApplicationId", "Please Enter ApplicationId"));
				}
				
				if(StringUtils.isBlank(req.getLoginId()) ) {
					error.add(new Error("01", "Login Id", "Please Enter LoginId"));
				} else {
					LoginMaster loginData =  	loginRepo.findByLoginId(req.getCreatedBy());
					if( loginData.getSubUserType().equalsIgnoreCase("bank")  ) {
						if( StringUtils.isBlank(req.getAcExecutiveId())) {
							error.add(new Error("01", "AcExecutiveId", "Please Select AcExecutiveId"));
						}
//						if( StringUtils.isBlank(req.getCommissionType())) {
//							error.add(new Error("01", "CommissionType", "Please Select CommissionType"));
//						}
						
					}
				}
			}
			 
			

			List<EserviceMotorDetails> list = new ArrayList<EserviceMotorDetails>();
			if (
			//		StringUtils.isNotBlank(req.getAccessoriesInformation())) && (StringUtils.isNotBlank(req.getAccessoriesInformation()))
			//		&& (StringUtils.isNotBlank(req.getAdditionalCircumstances())) && (StringUtils.isNotBlank(req.getAgencyCode()))
					(StringUtils.isNotBlank(req.getBorrowerType())) && (StringUtils.isNotBlank(req.getBranchCode()))
			//		&&(StringUtils.isNotBlank(req.getChassisNumber())) && (StringUtils.isNotBlank(req.getCityLimit()))
					&& (StringUtils.isNotBlank(req.getClaimRatio())) && (StringUtils.isNotBlank(req.getCollateralName()))
			//		&& (StringUtils.isNotBlank(req.getCollateralYn())) && (StringUtils.isNotBlank(req.getColor()))
			//		&& (StringUtils.isNotBlank(req.getCompanyId())) && (StringUtils.isNotBlank(req.getCovernoteNo()))
					&& (StringUtils.isNotBlank(req.getCreatedBy())) && (StringUtils.isNotBlank(req.getCurrency()))
					//&&(StringUtils.isNotBlank(req.getCustomerReferenceNo())) 
			//		&& (StringUtils.isNotBlank(req.getDrivenByDesc()))
			//		&& (StringUtils.isNotBlank(req.getEngineNumber())) && (StringUtils.isNotBlank(req.getExchangeRate()))
					&& (StringUtils.isNotBlank(req.getFirstLossPayee())) && (StringUtils.isNotBlank(req.getFleetOwnerYn()))
			//		&& (StringUtils.isNotBlank(req.getFuelType())) && (StringUtils.isNotBlank(req.getGpsTrackingInstalled()))
			//		&& (StringUtils.isNotBlank(req.getHoldInsurancePolicy())) && (StringUtils.isNotBlank(req.getIdNumber()))
					&&(StringUtils.isNotBlank(req.getInsuranceClass())) && (StringUtils.isNotBlank(req.getInsuranceType()))
			//		&& (StringUtils.isNotBlank(req.getManufactureYear())) && (StringUtils.isNotBlank(req.getModelNumber()))
			//		&& (StringUtils.isNotBlank(req.getMotorCategory())) && (StringUtils.isNotBlank(req.getMotorUsage()))
					&& (StringUtils.isNotBlank(req.getNcdYn())) && (StringUtils.isNotBlank(req.getNoOfComprehensives()))
			//		&& (StringUtils.isNotBlank(req.getNoOfVehicles())) && (StringUtils.isNotBlank(req.getOwnerCategory()))
			//		&&(StringUtils.isNotBlank(req.getPeriodOfInsurance())) && (StringUtils.isNotBlank(req.getPolicyType()))
			//		&& (StringUtils.isNotBlank(req.getProductId())) && (StringUtils.isNotBlank(req.getRegistrationNumber()))
			//		&& (StringUtils.isNotBlank(req.getRequestReferenceNo())) && (StringUtils.isNotBlank(req.getSectionId()))
			//		&& (StringUtils.isNotBlank(req.getStatus())) && (StringUtils.isNotBlank(req.getStickerNo()))
			//		&& (StringUtils.isNotBlank(req.getTrailerDetails())) && (StringUtils.isNotBlank(req.getVehcileModel()))
					&&(StringUtils.isNotBlank(req.getVehicleId())) && (StringUtils.isNotBlank(req.getVehicleMake()))
			//		&& (StringUtils.isNotBlank(req.getVehicleType())) && (StringUtils.isNotBlank(req.getWindScreenCoverRequired()))
			//		&& (StringUtils.isNotBlank(req.getAcccessoriesSumInsured().toString())) && (StringUtils.isNotBlank(req.getActualPremium().toString()))
			//		&& (StringUtils.isNotBlank(req.getAxelDistance().toString())) && (StringUtils.isNotBlank(req.getCubicCapacity().toString()))
			//		&& (StringUtils.isNotBlank(req.getGrossWeight().toString())) && (StringUtils.isNotBlank(req.getInsurerSettlement().toString()))
			//		&&(StringUtils.isNotBlank(req.getNcdYears().toString())) && (StringUtils.isNotBlank(req.getNoOfClaims().toString()))
			//		&& (StringUtils.isNotBlank(req.getNumberOfAxels().toString())) && (StringUtils.isNotBlank(req.getOverridePercentage().toString()))
			//		&& (StringUtils.isNotBlank(req.getPolicyEndDate().toString())) && (StringUtils.isNotBlank(req.getPolicyStartDate().toString()))
			//		&& (StringUtils.isNotBlank(req.getRadioorcasseteplayer().toString())) && (StringUtils.isNotBlank(req.getRegistrationYear().toString()))
			//		&& (StringUtils.isNotBlank(req.getRoofRack().toString())) && (StringUtils.isNotBlank(req.getSeatingCapacity().toString()))
			//		&&(StringUtils.isNotBlank(req.getSpotFogLamp().toString())) && (StringUtils.isNotBlank(req.getSumInsured().toString()))
			//		&& (StringUtils.isNotBlank(req.getTareWeight().toString())) && (StringUtils.isNotBlank(req.getTppdFreeLimit().toString()))
					&& (StringUtils.isNotBlank(req.getTppdIncreaeLimit().toString())) && (StringUtils.isNotBlank(req.getWindScreenSumInsured().toString()))
					&& (StringUtils.isNotBlank(req.getHavepromocode())) && (StringUtils.isNotBlank(req.getPromocode()))) {
				
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<EserviceMotorDetails> query = cb.createQuery(EserviceMotorDetails.class);
				// Find all
				Root<EserviceMotorDetails> b = query.from(EserviceMotorDetails.class);
				// Select
				query.select(b);
				// Where

				Predicate n1 = cb.equal(b.get("acccessoriesSumInsured"), req.getAcccessoriesSumInsured());
			//	Predicate n2 = (cb.like(cb.lower(b.get("accessoriesInformation")), req.getAccessoriesInformation().toLowerCase()));
				Predicate n3 = (cb.like(cb.lower(b.get("accident")), req.getAccident().toLowerCase()));
			//	Predicate n4 = (cb.equal(b.get("actualPremium"), req.getActualPremium()));
			//	Predicate n5 = (cb.like(cb.lower(b.get("additionalCircumstances")), req.getAdditionalCircumstances().toLowerCase()));
				Predicate n6 = (cb.like(cb.lower(b.get("agencyCode")), req.getAgencyCode().toLowerCase()));
			//	Predicate n7 = (cb.equal(b.get("axelDistance"), req.getAxelDistance()));
				Predicate n8 = (cb.like(cb.lower(b.get("borrowerType")), req.getBorrowerType().toLowerCase()));
				Predicate n9 = (cb.like(cb.lower(b.get("branchCode")), req.getBranchCode().toLowerCase()));
				Predicate n10 = (cb.like(cb.lower(b.get("chassisNumber")), req.getChassisNumber().toLowerCase()));
			//	Predicate n11 = (cb.like(cb.lower(b.get("cityLimit")),req.getCityLimit().toLowerCase()));
				Predicate n12 = (cb.like(cb.lower(b.get("claimRatio")),req.getClaimRatio().toString().toLowerCase()));
				Predicate n13 = (cb.like(cb.lower(b.get("collateralName")), req.getCollateralName().toLowerCase()));
				Predicate n14 = (cb.like(cb.lower(b.get("collateralYn")), req.getCollateralYn().toLowerCase()));
			//	Predicate n15 = (cb.like(cb.lower(b.get("color")), req.getColor().toLowerCase()));
				Predicate n16 = (cb.like(cb.lower(b.get("companyId")), req.getCompanyId().toLowerCase()));
			//	Predicate n17 = (cb.like(cb.lower(b.get("covernoteNo")), req.getCovernoteNo().toLowerCase()));
				Predicate n18 = (cb.like(cb.lower(b.get("createdBy")), req.getCreatedBy().toLowerCase()));
			//	Predicate n19 = (cb.equal(b.get("cubicCapacity"), req.getCubicCapacity()));
				Predicate n20 = (cb.like(cb.lower(b.get("currency")), req.getCurrency().toLowerCase()));
				//Predicate n21 = (cb.like(cb.lower(b.get("customerReferenceNo")), req.getCustomerReferenceNo().toLowerCase()));
			//	Predicate n22 = (cb.like(cb.lower(b.get("drivenByDesc")), req.getDrivenByDesc().toLowerCase()));
			//	Predicate n23 = (cb.like(cb.lower(b.get("engineNumber")), req.getEngineNumber().toLowerCase()));
				Predicate n24 = (cb.equal(b.get("exchangeRate"), req.getExchangeRate()));
				Predicate n25 = (cb.like(cb.lower(b.get("firstLossPayee")), req.getFirstLossPayee().toLowerCase()));
				Predicate n26 = (cb.like(cb.lower(b.get("fleetOwnerYn")), req.getFleetOwnerYn().toLowerCase()));
			//	Predicate n27 = (cb.like(cb.lower(b.get("fuelType")), req.getFuelType().toLowerCase()));
				Predicate n28 = (cb.like(cb.lower(b.get("gpsTrackingInstalled")), req.getGpsTrackingInstalled().toLowerCase()));
			//	Predicate n29 = (cb.equal(b.get("grossWeight"),req.getGrossWeight()));
			//	Predicate n30 = (cb.like(cb.lower(b.get("holdInsurancePolicy")), req.getHoldInsurancePolicy().toLowerCase()));
				Predicate n31 = (cb.like(cb.lower(b.get("idNumber")), req.getIdNumber().toLowerCase()));
				Predicate n32 = (cb.like(cb.lower(b.get("insuranceClass")), req.getInsuranceClass().toLowerCase()));
				Predicate n33 = (cb.like(cb.lower(b.get("insuranceType")), req.getInsuranceType().toLowerCase()));
//				Predicate n34 = (cb.equal(b.get("insurerSettlement"), req.getInsurerSettlement()));
//				Predicate n35 = (cb.like(cb.lower(b.get("manufactureYear")), req.getManufactureYear().toLowerCase()));
//				Predicate n36 = (cb.like(cb.lower(b.get("modelNumber")), req.getModelNumber().toLowerCase()));
//				Predicate n37 = (cb.like(cb.lower(b.get("motorCategory")), req.getMotorCategory().toLowerCase()));
				Predicate n38 = (cb.like(cb.lower(b.get("motorUsage")), req.getMotorUsage().toLowerCase()));
//				Predicate n39 = (cb.equal(b.get("ncdYears"), req.getNcdYears()));
				Predicate n40 = (cb.like(cb.lower(b.get("ncdYn")), req.getNcdYn().toLowerCase()));
			//	Predicate n41 = (cb.equal(b.get("noOfClaims"), req.getNoOfClaims()));
				Predicate n42 = (cb.like(cb.lower(b.get("noOfCompehensives")), req.getNoOfComprehensives().toLowerCase()));
				Predicate n43 = (cb.like(cb.lower(b.get("noOfVehicles")), req.getNoOfVehicles().toLowerCase()));
//				Predicate n44 = (cb.equal(b.get("numberOfAxels"), req.getNumberOfAxels()));
//				Predicate n45 = (cb.equal(b.get("overridePercentage"), req.getOverridePercentage()));
//				Predicate n46 = (cb.like(cb.lower(b.get("ownerCategory")), req.getOwnerCategory().toLowerCase()));
				Predicate n47 = (cb.like(cb.lower(b.get("periodOfInsurance")), req.getPeriodOfInsurance().toLowerCase()));
				Predicate n48 = (cb.equal(b.get("policyEndDate"), req.getPolicyEndDate()));
				Predicate n49 = (cb.equal(b.get("policyStartDate"), req.getPolicyStartDate()));
			//	Predicate n50 = (cb.like(cb.lower(b.get("policyType")), req.getPolicyType().toLowerCase()));
				Predicate n51 = (cb.like(cb.lower(b.get("productId")), req.getProductId().toLowerCase()));
//				Predicate n52 = (cb.equal(b.get("radioorcasseteplayer"), req.getRadioorcasseteplayer()));
//				Predicate n53 = (cb.equal(b.get("registrationNumber"), req.getRegistrationNumber()));
//				Predicate n54 = (cb.equal(b.get("registrationYear"), req.getRegistrationYear()));
				Predicate n55 = (cb.like(cb.lower(b.get("requestReferenceNo")), req.getRequestReferenceNo().toLowerCase()));
//				Predicate n56 = (cb.equal(b.get("roofRack"), req.getRoofRack()));
//				Predicate n57 = (cb.equal(b.get("seatingCapacity"), req.getSeatingCapacity()));
//				Predicate n58 = (cb.equal(b.get("sectionId"), req.getSectionId()));
//				Predicate n59 = (cb.equal(b.get("spotFogLamp"), req.getSpotFogLamp()));
				Predicate n60 = (cb.like(cb.lower(b.get("status")), req.getStatus().toLowerCase()));
			//	Predicate n61 = (cb.like(cb.lower(b.get("stickerNo")), req.getStickerNo().toLowerCase()));
				Predicate n62 = (cb.equal(b.get("sumInsured"), req.getSumInsured()));
//				Predicate n63 = (cb.equal(b.get("tareWeight"), req.getTareWeight()));
//				Predicate n64 = (cb.equal(b.get("tppdFreeLimit"), req.getTppdFreeLimit()));
				Predicate n65 = (cb.equal(b.get("tppdIncreaeLimit"), req.getTppdIncreaeLimit()));
			//	Predicate n66 = (cb.like(cb.lower(b.get("trailerDetails")), req.getTrailerDetails().toLowerCase()));
				Predicate n67 = (cb.like(cb.lower(b.get("vehcileModel")), req.getVehcileModel().toLowerCase()));
				Predicate n68 = (cb.like(cb.lower(b.get("vehicleId")), req.getVehicleId().toLowerCase()));
				Predicate n69 = (cb.like(cb.lower(b.get("vehicleMake")), req.getVehicleMake().toLowerCase()));
				Predicate n70 = (cb.like(cb.lower(b.get("vehicleType")), req.getVehicleType().toLowerCase()));
		//		Predicate n71 = (cb.like(cb.lower(b.get("windScreenCoverRequired")), req.getWindScreenCoverRequired().toLowerCase()));
				Predicate n72 = (cb.equal(b.get("windScreenSumInsured"), req.getWindScreenSumInsured()));
				Predicate n73 = (cb.equal(b.get("havepromocode"), req.getHavepromocode()));
				Predicate n74 = (cb.equal(b.get("promocode"), req.getPromocode()));

				query.where(n1, 
					//	n2, 
						n3,
					//	n4, n5,
						n6,
					//	n7,
						n8, n9, n10, 
					//	n11,
						n12, n13, n14,
					//	n15,
						n16,
					//	n17,
						n18,
					//	n19,
						n20,
						//n21,
					//	n22, n23,
						n24, n25, n26,
					//	n27,
						n28,
					//	n29, n30,					
						n31, n32, n33,
					//	n34, n35, n36, n37, 
						n38, 
						//n39,
						n40,
					//	n41,
						n42, n43,
					//	n44, n45, n46,
						n47, n48, n49,
					//	n50,
						n51,
					//	n52, n53, n54,
						n55,
					//	n56, n57, n58, n59,
						n60,					
					//	n61,
						n62,
					//	n63, n64,
						n65,
					//	n66,
						n67, n68, n69, n70,
				//		n71,
						n72 ,
						n73,n74
						
						);
				// Get Result
				TypedQuery<EserviceMotorDetails> result = em.createQuery(query);
				list = result.getResultList();
				if (list.size() > 0) {
					error.add(new Error("42", "Already have data for requestReferenceNo", list.get(0).getRequestReferenceNo()));

				}
			}
			
			// Old Validations 
//			if (StringUtils.isBlank(req.getSectionId())) {
//				error.add(new Error("04", "SectionId", "Please Enter SectionId"));
//			} else if (req.getSectionId().length() > 20) {
//				error.add(new Error("04", "SectionId", "Please Enter SectionId within 20 Characters"));
//			}
//			if(StringUtils.isNotBlank(req.getFirstLossPayee())) {
//			Pattern pattern = Pattern.compile("[^a-zA-Z]");
//	        Matcher matcher = pattern.matcher(req.getFirstLossPayee());
//	        boolean value = matcher.find();
//	        if(value == true) {
//	        	error.add(new Error("20", "FirstLossPayee", "Please Enter FirstLossPayee in Alphabatical Format"));
//			}
//			}
//			if(StringUtils.isNotBlank(req.getCollateralName())) {
//			Pattern pattern = Pattern.compile("[^a-zA-Z]");
//	        Matcher matcher = pattern.matcher(req.getCollateralName());
//	        boolean value = matcher.find();
//	        if(value == true) {
//	        	error.add(new Error("19", "CollateralName", "Please Enter CollateralName in Alphabatical Format"));
//			}
//			}
//			else if ( req.getSumInsured().equalsIgnoreCase("0")  ) {
//			error.add(new Error("15", "SumInsured", "Please Enter SumInsured Greater Then 0"));
//		}
			// Policy Validation
			/*
			if((StringUtils.isNotBlank(req.getAgencyCode()))&& (StringUtils.isNotBlank(req.getLoginId())) && (StringUtils.isNotBlank(req.getCompanyId()))	
					&& (StringUtils.isNotBlank(req.getProductId())) && (StringUtils.isNotBlank(req.getPolicyType()))&& (StringUtils.isNotBlank(req.getBrokerCode()))){	
				String policy  =	policyRestriction(req.getAgencyCode(), req.getLoginId(),req.getBrokerCode(),req.getCompanyId(),req.getProductId(),req.getPolicyType());		
				if(!policy.equalsIgnoreCase("Success")) {
					error.add(new Error("43", "Policy Type", "This loginid is not eligible for this type of policy"));

				}
			
			}
			*/
			
			
			
		} catch (Exception e ) {

			log.error(e);
			e.printStackTrace();
			error.add(new Error("42", "Common Error", e.getMessage()));
		}
		return error;
	}
	
	private String policyRestriction(String agencyCode, String loginId, String bdmCode, String companyId,
			String productId, String policyType) {
		// TODO Auto-generated method stub
		String a ="";
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BrokerCommissionDetails> query = cb.createQuery(BrokerCommissionDetails.class);

			// Find All
			Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<BrokerCommissionDetails> ocpm1 = amendId.from(BrokerCommissionDetails.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("oaCode"), b.get("oaCode"));
			Predicate a5 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
			Predicate a6 = cb.equal(ocpm1.get("policyType"), b.get("policyType"));
			//Predicate a7 = cb.equal(ocpm1.get("id"), b.get("id"));
			Predicate a8 = cb.equal(ocpm1.get("status"), b.get("status"));

			amendId.where(a1, a2,a3,a4,a5,a6,a8);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("policyType")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("productId"),productId);
			Predicate n4 = cb.equal(b.get("oaCode"),bdmCode);
			Predicate n5 = cb.equal(b.get("loginId"),loginId);
			Predicate n6 = cb.equal(b.get("policyType"),policyType);
			Predicate n7 = cb.equal(b.get("status"),"Y");
			Predicate n8 = cb.equal(b.get("agencyCode"),agencyCode);
			Predicate n9 = cb.equal(b.get("status"),"R");
			Predicate n10 = cb.or(n7,n9);

			query.where(n1,n2,n3,n4,n5,n6,n10,n8).orderBy(orderList);
			
			// Get Result
			TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);

			list = result.getResultList();
			List<BrokerCommissionDetails> policy = list
					  .stream()
					  .filter(c -> c.getPolicyTypeDesc().equalsIgnoreCase("ALL"))
					  .collect(Collectors.toList());
			if(policy.size()>0 || list.size()>0) {
				a = "Success";
				}
			} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return a;
	}
	
	public Tuple getMinMaxRate(String Currency,String CompanyId) {
		Tuple currencyRes =null;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
			List<Tuple> list = new ArrayList<Tuple>();
			
			// Find All
			Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
			
			Subquery<Long> exchangeRate = query.subquery(Long.class);
			Root<ExchangeMaster> ex = exchangeRate.from(ExchangeMaster.class);
			// Exchange Effective Date Start Max Filter
			Subquery<Long> effectiveDate3 = query.subquery(Long.class);
			Root<ExchangeMaster> ocpm3 = effectiveDate3.from(ExchangeMaster.class);
			effectiveDate3.select(cb.max(ocpm3.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ex.get("exchangeId"),ocpm3.get("exchangeId"));
			Predicate a2 = cb.equal(ex.get("currencyId"),ocpm3.get("currencyId"));
			Predicate a15 = cb.equal(ex.get("companyId"),ocpm3.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
			effectiveDate3.where(a1,a2,a3,a15);
			
			// Exhange Effective Date End Max Filter
			Subquery<Long> effectiveDate4 = query.subquery(Long.class);
			Root<ExchangeMaster> ocpm4 = effectiveDate4.from(ExchangeMaster.class);
			effectiveDate4.select(cb.max(ocpm4.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ex.get("exchangeId"),ocpm4.get("exchangeId"));
			Predicate a5 = cb.equal(ex.get("currencyId"),ocpm4.get("currencyId"));
			Predicate a16 = cb.equal(ex.get("companyId"),ocpm4.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
			effectiveDate4.where(a4,a5,a6,a16);
			
			// Exhange Rate Sub Query
			exchangeRate.select(ex.get("exchangeRate"));
			Predicate a7 = cb.equal(ex.get("currencyId"),Currency);
			Predicate a9 = cb.equal(ex.get("effectiveDateStart"), effectiveDate3);
			Predicate a10 = cb.equal(ex.get("effectiveDateEnd"), effectiveDate4);
			Predicate a17 = cb.equal(ex.get("companyId"),CompanyId);
			exchangeRate.where(a7,a9,a10,a17);

			// Select
			query.multiselect(c.get("currencyId").alias("currencyId") ,
				c.get("minDiscount").alias("minDiscount") , 
					c.get("maxLoading").alias("maxLoading") ,
					exchangeRate.alias("exchangeRate"));
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
			javax.persistence.criteria.Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			javax.persistence.criteria.Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			
			effectiveDate.where(a11,a12,a18,a22);
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
			javax.persistence.criteria.Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			javax.persistence.criteria.Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			
			effectiveDate2.where(a13,a14,a19,a23);
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n11 = cb.equal(c.get("status"), "R");
			Predicate n12 = cb.or(n1,n11);
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),CompanyId);
			Predicate n5 = cb.equal(c.get("companyId"),"99999");
			Predicate n6 = cb.or(n4,n5);
			query.where(n12,n2,n3,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);			
			list =  result.getResultList();
			if( list.size()>0) {
				currencyRes = list.get(0);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
		}
		return currencyRes;
	}
@Override
@Transactional
public EserviceMotorDetailsSaveRes saveMotorDetails(EserviceMotorDetailsSaveReq req) {
	EserviceMotorDetailsSaveRes res = new EserviceMotorDetailsSaveRes();
	DozerBeanMapper mapper = new DozerBeanMapper();
	SimpleDateFormat yf = new SimpleDateFormat("yyyy"); 
	EserviceMotorDetails savedata = new EserviceMotorDetails();
	EserviceMotorDetails findData = null;
	String oaCode = "" ;
	try {
		
		String productName =   getCompanyProductMasterDropdown(req.getCompanyId() , req.getProductId()); 
		String sectionName =  getProductSectionDropdown(req.getCompanyId() , req.getProductId(), req.getInsuranceType()); 
		String companyName =  getInscompanyMasterDropdown(req.getCompanyId()) ; 
		Integer vehId = 0 ;
		String refNo = "" ;
		Date entryDate = null ;
		String createdBy = "" ;
		
		if(StringUtils.isBlank(req.getRequestReferenceNo())) {
			// Motor Insert
			entryDate = new Date();
			createdBy = req.getCreatedBy();
		 	String refShortCode = getListItem (req.getCompanyId() , req.getBranchCode() ,"PRODUCT_SHORT_CODE",req.getProductId() );  //listRepo.findByItemTypeAndItemCodeOrderByItemCodeAsc("MOTOR_CATEGORY",req.getMotorCategory());
    		
             refNo = refShortCode +"-" + genSeqNoService.generateRefNo() ; // idf.format(new Date()) + random ; 
             res.setResponse("Saved Successfully");
 			 res.setRequestReferenceNo(refNo);
 			 res.setCustomerReferenceNo(req.getCustomerReferenceNo());
 			 res.setVehicleId(req.getVehicleId()) ;			 
		} 
		else {
			// Motor Update
			refNo = req.getRequestReferenceNo() ;
			EserviceMotorDetails	findoldData = repo.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),Integer.valueOf(req.getVehicleId()));	
			
			
			if(findoldData !=null ) {
				findData = new EserviceMotorDetails();
				mapper.map(findoldData ,findData) ;
				repo.delete( findoldData);
				
			entryDate = findData.getEntryDate() ;
			createdBy = findData.getCreatedBy() ;
			
			
			res.setResponse("Updated Successfully");
			res.setRequestReferenceNo(refNo);
			res.setCustomerReferenceNo(req.getCustomerReferenceNo());
			res.setVehicleId(req.getVehicleId()) ;
			
			} else {
			
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Updated Successfully");
				res.setRequestReferenceNo(refNo);
				res.setCustomerReferenceNo(req.getCustomerReferenceNo());
				res.setVehicleId(req.getVehicleId()) ;
			}
		}
		
		// Save Motor
		savedata=mapper.map(req,EserviceMotorDetails.class);
		vehId = Integer.valueOf(req.getVehicleId()) ;
		savedata.setRiskId(vehId);			
		savedata.setCreatedBy(createdBy);
		savedata.setEntryDate(entryDate);
		savedata.setRequestReferenceNo(refNo);
		
		savedata.setBranchCode(  req.getBranchCode()) ;
		savedata.setAcExecutiveId(StringUtils.isBlank(req.getAcExecutiveId())?null :Integer.valueOf(req.getAcExecutiveId()));
		savedata.setApplicationId(req.getApplicationId());
		savedata.setUpdatedBy(req.getCreatedBy());
		savedata.setUpdatedDate(new Date());
		
		//Direct Broker Details
		if( StringUtils.isNotBlank(req.getSourceType()) && req.getSourceType().equalsIgnoreCase("Direct") ) {
			BranchMaster branchData = getCompanyBranch(req.getCompanyId() , req.getBranchCode() ) ;
			savedata.setLoginId(branchData.getDirectBrokerId())		;
			savedata.setBrokerCode(req.getBrokerCode());
			savedata.setBdmCode(req.getBrokerCode());
			LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(branchData.getBrokerAgencyCode()), "None", req.getCompanyId());
			if( brokerBranchName!=null) {
				savedata.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
				savedata.setBrokerBranchCode(brokerBranchName.getBrokerBranchCode());
		
				oaCode = brokerBranchName.getOaCode() ;
			}
		// OTher Broker Details	
		} else {
			savedata.setLoginId(req.getLoginId())		;
			savedata.setBrokerCode(req.getBrokerCode());
			savedata.setBdmCode(req.getBrokerCode());
			savedata.setBrokerBranchCode(req.getBrokerBranchCode());
			LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(req.getBrokerCode()), req.getBrokerBranchCode(), req.getCompanyId());
			if( brokerBranchName!=null) {
				savedata.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
				savedata.setCustomerCode( brokerBranchName.getCustomerCode() );
				oaCode = brokerBranchName.getOaCode() ;
				
			}
			
		}
		if(req.getSubUserType().equalsIgnoreCase("b2b") || req.getSubUserType().equalsIgnoreCase("b2c")  ) {
			savedata.setSourceType("Broker");
					
		} else if(req.getSubUserType().equalsIgnoreCase("bank")) {
			savedata.setSourceType("Agent" );
		}   else {
			savedata.setSourceType(req.getSourceType() );
			savedata.setCustomerCode(req.getCustomerCode() );
		}
		
		;
		// Admin Details
		if( findData !=null ) {
			
			savedata.setAdminLoginId(findData.getAdminLoginId());
			savedata.setAdminRemarks(findData.getAdminRemarks());
			savedata.setReferalRemarks(findData.getReferalRemarks());
			savedata.setRejectReason(findData.getRejectReason());
			savedata.setQuoteNo(findData.getQuoteNo());
			savedata.setCustomerId(findData.getCustomerId());
			savedata.setOldReqRefNo(findData.getOldReqRefNo());
			savedata.setCreatedBy(findData.getCreatedBy());
			savedata.setEntryDate(findData.getEntryDate());
			savedata.setManualReferalYn(findData.getManualReferalYn());
			
		}
//		if( StringUtils.isNotBlank(req.getCommissionType())) {
//			String commistionDesc =getListItem (req.getCompanyId() , req.getBranchCode() ,"COMMISSION_TYPE",req.getCommissionType());
//			savedata.setCommissionTypeDesc(commistionDesc);
//		}
		
		// Motor Vehice Info
		MotorVehicleInfoGetReq searchReq = new MotorVehicleInfoGetReq(); 
		searchReq.setReqChassisNumber(req.getChassisNumber());
		MotorVehicleInfoRes motorRes = regulatoryService.getVehicleInfo(searchReq);
		savedata.setAxelDistance(StringUtils.isBlank(motorRes.getResAxleDistance()) ? null :  new BigDecimal(motorRes.getResAxleDistance()));
		savedata.setChassisNumber(motorRes.getResChassisNumber());
		savedata.setColor("");
		savedata.setColorDesc(motorRes.getResColor());
		savedata.setFuelType("");
		savedata.setFuelTypeDesc(motorRes.getResFuelUsed());
		savedata.setEngineNumber(motorRes.getResEngineNumber());
		savedata.setGrossWeight(StringUtils.isBlank(motorRes.getResGrossWeight()) ? null :  new BigDecimal(motorRes.getResGrossWeight()));
		String motorDesc = getListItem (req.getCompanyId() , req.getBranchCode() ,"MOTOR_CATEGORY",	motorRes.getResMotorCategory() );  //listRepo.findByItemTypeAndItemCodeOrderByItemCodeAsc("MOTOR_CATEGORY",req.getMotorCategory());
		savedata.setMotorCategory(	motorRes.getResMotorCategory());
		savedata.setMotorCategoryDesc(motorDesc);	
		savedata.setOwnerCategory(motorRes.getResOwnerCategory());
		savedata.setRegistrationNumber(	motorRes.getResRegNumber());
		savedata.setNumberOfAxels(StringUtils.isBlank(motorRes.getResNumberOfAxles()) ? null :  Integer.valueOf(motorRes.getResNumberOfAxles()));
		savedata.setSeatingCapacity(StringUtils.isBlank(motorRes.getResSittingCapacity()) ? null :  Integer.valueOf(motorRes.getResSittingCapacity()));
		savedata.setTareWeight(StringUtils.isBlank(motorRes.getResTareWeight()) ? null :  new BigDecimal(motorRes.getResTareWeight()));
		savedata.setManufactureYear(motorRes.getResYearOfManufacture());
		// Manufacture Age
		Date today = new Date();
		String year = yf.format(today);
		int manuAge = 0 ;
		
		if(StringUtils.isNotBlank(motorRes.getResYearOfManufacture())) {
			
			 manuAge = Integer.valueOf(year) -Integer.valueOf(motorRes.getResYearOfManufacture());
		}
		savedata.setManufactureAge(manuAge);
//		motorRes.getResEngineCapacity()	
//		motorRes.getResMotorUsage()
//		motorRes.getResMsgSignature()
//		motorRes.getResNumberOfAxles()
//		motorRes.getResOwnerName()
//		motorRes.getResRequestId()
//		motorRes.getResResponseId()
//		motorRes.getResStatusCode()
//		motorRes.getResStatusDesc()
		
		String borrowerDesc =getListItem (req.getCompanyId() , req.getBranchCode() ,"BORROWER_TYPE",req.getBorrowerType());  // listRepo.findByItemTypeAndItemCodeOrderByItemCodeAsc("BORROWER_TYPE",req.getBorrowerType());
		
		String policyTypeName = getPolicyTypeName(req.getInsuranceClass(), req.getCompanyId(), req.getProductId());
		savedata.setInsuranceClassDesc(policyTypeName);
		savedata.setPolicyType(req.getInsuranceClass());
		savedata.setSectionId(req.getInsuranceType());
		savedata.setMotorCategoryDesc(motorDesc);
		String insTypeDesc =  getInsuranceType( req.getCompanyId() , req.getProductId() , req.getInsuranceType() );
		savedata.setInsuranceTypeDesc(insTypeDesc);
		savedata.setVehicleMakeDesc(req.getVehicleMake());
		savedata.setVehcileModelDesc(req.getVehcileModel());
		String bodyTypeName  =  getBodyTypeName( req.getCompanyId() , req.getBranchCode() , req.getVehicleType()) ;
		savedata.setVehicleTypeDesc(bodyTypeName);
		savedata.setPolicyTypeDesc(policyTypeName);
		savedata.setAcExecutiveId(StringUtils.isBlank(req.getAcExecutiveId())?null :Integer.valueOf(req.getAcExecutiveId()));
		savedata.setBorrowerTypeDesc(borrowerDesc);
		savedata.setNoOfVehicles(StringUtils.isBlank(req.getNoOfVehicles()) ? 0 :Integer.valueOf(req.getNoOfVehicles()) );
		savedata.setNoOfCompehensives(StringUtils.isBlank(req.getNoOfComprehensives()) ? 0 :Integer.valueOf(req.getNoOfComprehensives()) );
		savedata.setClaimRatio(StringUtils.isBlank(req.getClaimRatio()) ? BigDecimal.ZERO : new BigDecimal(req.getClaimRatio()) );
		//savedata.setDriverYn(StringUtils.isBlank(req.getDriverYn())?"N":req.getDriverYn());
		savedata.setHavepromocode(req.getHavepromocode());
		savedata.setPromocode(req.getHavepromocode().equalsIgnoreCase("N")?"0": req.getPromocode());
		
		// Register Age
	//	Date reg = req.getRegistrationYear();
	//	int regAge = today.getYear()-reg.getYear();
	//	savedata.setRegistrationAge(regAge);
		
		savedata.setAccident(StringUtils.isBlank(req.getAccident())?"N":req.getAccident());
		savedata.setWindScreenCoverRequired(req.getWindScreenSumInsured()!=null && StringUtils.isNotBlank(req.getWindScreenSumInsured().toString()) ?"Y":"N");
		savedata.setCustomerReferenceNo(req.getCustomerReferenceNo());
	//	savedata.setDrivenBy(req.getDrivenByDesc());
		savedata.setProductName(productName);
		savedata.setSectionName(sectionName);
		savedata.setCompanyName(companyName);
		
		String decimalDigits = currencyDecimalFormat(req.getCompanyId() , req.getCurrency() ).toString();
		String stringFormat = "%0"+decimalDigits+"d" ;
		String decimalLength = decimalDigits.equals("0") ?"" : String.format(stringFormat ,0L)  ;
		String pattern = StringUtils.isBlank(decimalLength) ?  "#####0" :   "#####0." + decimalLength;
		DecimalFormat df = new DecimalFormat(pattern);
		
		savedata.setSumInsured(StringUtils.isBlank(req.getSumInsured()) ? null : new BigDecimal(df.format(new BigDecimal(req.getSumInsured()))) ) ;
		savedata.setAcccessoriesSumInsured(StringUtils.isBlank(req.getAcccessoriesSumInsured()) ? null :  new BigDecimal(df.format(new BigDecimal(req.getAcccessoriesSumInsured()))) );
		savedata.setWindScreenSumInsured(StringUtils.isBlank(req.getWindScreenSumInsured()) ? null :  new BigDecimal(df.format(new BigDecimal(req.getWindScreenSumInsured()))) );
		
		// Endrosement CHanges
		if(!(req.getEndorsementType()==null || req.getEndorsementType()==0))
		
		 {
		  
			 savedata.setOriginalPolicyNo(req.getOriginalPolicyNo());
			 savedata.setEndorsementDate(req.getEndorsementDate());
			 savedata.setEndorsementRemarks(req.getEndorsementRemarks());
			 savedata.setEndorsementEffdate(req.getEndorsementEffdate());
			 savedata.setEndtPrevPolicyNo(req.getEndtPrevPolicyNo());
			 savedata.setEndtPrevQuoteNo(req.getEndtPrevQuoteNo());
			 savedata.setEndtCount(req.getEndtCount());
			 savedata.setEndtStatus(req.getEndtStatus());
			 savedata.setIsFinaceYn(req.getIsFinaceYn());
			 savedata.setEndtCategDesc(req.getEndtCategDesc());
			 savedata.setEndorsementType(req.getEndorsementType());
			 savedata.setEndorsementTypeDesc(req.getEndorsementTypeDesc()); 
			
		 }
		
		// Status
		savedata.setStatus(StringUtils.isBlank(req.getStatus()) ? "Y" : req.getStatus() );
		/*if(savedata.getStatus().equalsIgnoreCase("D") ) {
			savedata.setSumInsured(BigDecimal.ZERO);
			savedata.setAcccessoriesSumInsured(BigDecimal.ZERO);
			savedata.setWindScreenSumInsured(BigDecimal.ZERO);
			savedata.setTppdIncreaeLimit(BigDecimal.ZERO);
			savedata.setTppdFreeLimit(BigDecimal.ZERO);
			
		
		}*/
		// Date Differents
		Date periodStart =  req.getPolicyStartDate();
		Date periodEnd = req.getPolicyEndDate() ;
		String diff = "0";
		
		if(periodStart!=null && periodEnd!=null ) {
			Long diffInMillies = Math.abs(periodEnd.getTime() - periodStart.getTime());
			Long daysBetween =  TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS) ;
			
			// Check Leap Year
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
			boolean leapYear = LocalDate.parse(sdf.format(periodEnd) ).isLeapYear();
			diff = String.valueOf(daysBetween==364 &&  leapYear==false ? daysBetween+1 : 
								  daysBetween==364 &&  leapYear==true ? daysBetween+2 : 
								  daysBetween==365 &&  leapYear==true ? daysBetween+1 : daysBetween );
			
			
		}
		savedata.setPeriodOfInsurance(diff);
		
		repo.saveAndFlush(savedata);
	
		// Insert Tracking
		{
			TrackingDetailsSaveReq trackingReq=new TrackingDetailsSaveReq();
			trackingReq.setProductId(req.getProductId());
			trackingReq.setStatus( req.getStatus() );
			trackingReq.setBranchCode(req.getBranchCode());
			if( findData !=null ) {
				trackingReq.setQuoteNo(findData.getQuoteNo());
				}else {
					trackingReq.setQuoteNo("");
				}
			trackingReq.setRiskId(vehId.toString());
			trackingReq.setCompanyId(req.getCompanyId());
			trackingReq.setPolicyNo(req.getPolicyNo());
			trackingReq.setOriginalPolicyNo(req.getOriginalPolicyNo());
			trackingReq.setCreatedby(req.getCreatedBy());
			trackingReq.setRequestReferenceNo(refNo);		
			trackingReq.setRemarks(req.getEndorsementRemarks());		
			trackService.insertTrackingDetails(trackingReq);
		}
		
		
		
		
		// Section Insert
		EserviceSectionDetails secData = new EserviceSectionDetails(); 
		List<EserviceSectionDetails> sectionList =  eserSecRepo.findByRequestReferenceNoAndRiskIdAndProductIdOrderBySectionIdAsc(refNo, savedata.getRiskId(), savedata.getProductId() );
		if (sectionList!=null && sectionList.size()>0 ) {
			eserSecRepo.deleteAll(sectionList);
		}
		
		mapper.map(savedata, secData);
		secData.setExchageRate(savedata.getExchangeRate());
		secData.setCurrencyId(savedata.getCurrency());
		secData.setSectionDesc(sectionName);
		secData.setRiskId(savedata.getRiskId());
		secData.setRequestReferenceNo(refNo);
		secData.setUserOpt("N");
		eserSecRepo.saveAndFlush(secData);
		
		 
		
//		// Driver Details Insert
//		if( req.getDriverYn()!=null && req.getDriverYn().equalsIgnoreCase("Y") ) {
//			
//			// Find Old
//			List<EserviceDriverDetails> findDri = eserDriverRepo.findByRequestReferenceNoAndRiskId(
//					savedata.getRequestReferenceNo() , savedata.getRiskId() );		
//			if(findDri!=null && findDri.size()>0 ) {
//				eserDriverRepo.deleteAll(findDri);
//			}
//			
//			Integer driId = 0 ;
//			String owner = getListItem (req.getCompanyId() , req.getBranchCode() ,"DRIVER_TYPES","1" );
//			String driver = getListItem (req.getCompanyId() , req.getBranchCode() ,"DRIVER_TYPES","2" );
//			
//			for ( DriverDetailsSaveReq dri : req.getDriverDetails()) {
//				EserviceDriverDetails saveDri = new EserviceDriverDetails();
//				driId = driId + 1 ;
//				saveDri.setCompanyId(req.getCompanyId());
//				saveDri.setCreatedBy(req.getCreatedBy());
//				saveDri.setDriverDob(dri.getDriverDob());
//				saveDri.setDriverId(driId);
//				saveDri.setDriverName(dri.getDriverName());
//				saveDri.setDriverType(dri.getDriverType());
//				saveDri.setDriverTypedesc(dri.getDriverType().equalsIgnoreCase("1")?owner :driver );
//				saveDri.setEntryDate(new Date());
//				saveDri.setLicenceNo(dri.getLicenseNo());
//				saveDri.setProductId(Integer.valueOf(req.getProductId()));
//				saveDri.setRequestReferenceNo(refNo);
//				saveDri.setRiskId(Integer.valueOf(savedata.getRiskId()));
//				saveDri.setSectionId(Integer.valueOf(savedata.getSectionId()));
//				saveDri.setStatus("Y");
//				eserDriverRepo.saveAndFlush(saveDri);
//				
//			}
//		}
			
	}catch (Exception e) {
		// TODO: handle exception
		e.printStackTrace();
	}
	OneTimeTableRes otRes=null;
	try {
		// One Time Table Thread Call 
		OneTimeTableReq otReq = new OneTimeTableReq();
		EserviceMotorDetails motorData = repo.findByRequestReferenceNoAndRiskId(savedata.getRequestReferenceNo() , savedata.getRiskId() );
		otReq.setRequestReferenceNo(savedata.getRequestReferenceNo());
		otReq.setVehicleId(motorData.getRiskId());
		otReq.setAgencyCode(StringUtils.isBlank(oaCode) ? motorData.getAgencyCode() : oaCode );
		otReq.setBranchCode(motorData.getBranchCode());
		otReq.setInsuranceId(motorData.getCompanyId());
		otReq.setProductId(Integer.parseInt(motorData.getProductId()));
		otReq.setSectionId(Integer.parseInt(motorData.getSectionId()));
	
		
		otReq.setMotorDetails(motorData);
		otRes = otService.call_OT_Insert(otReq).get(0);
		 
		 //Thread.sleep(10000L);
	}catch (Exception e) {
		e.printStackTrace();
	}
	
	try {
		//LoginMaster loginData = loginRepo.findByLoginId(req.getCreatedBy());
		// Cal Engine
	/*	CalcEngine calcReq = new CalcEngine();
		calcReq.setAgencyCode(loginData.getAgencyCode());
		calcReq.setBranchCode(req.getBranchCode());
		calcReq.setInsuranceId(req.getCompanyId());
		calcReq.setProductId(req.getProductId());
		calcReq.setSectionId(req.getSectionId());
		calcReq.setVehicleId(savedata.getVehicleId().toString());
		calcReq.setMsrefno(otRes.getMsRefNo());
		
		//newly added.
		calcReq.setVdRefNo(otRes.getVdRefNo());
		calcReq.setCdRefNo(otRes.getCdRefNo());
		calcReq.setMsVehicleDetails(otRes.getMsVehicleDetails());
		
		log.info("Cal Req ---> " + json.toJson(calcReq));
		coverList =  calcService.calculator(calcReq); */
		res.setVdRefNo(otRes.getVdRefNo());
		res.setCdRefNo(otRes.getCdRefNo());
		res.setMsrefno(otRes.getMsRefNo());
		res.setInsuranceId(req.getCompanyId());
		res.setCreatedBy(req.getCreatedBy());
		res.setProductId(req.getProductId());
		res.setSectionId(req.getInsuranceType());
		res.setVehicleId(otRes.getVehicleId());
		//	res.setCoverList(coverList);
	}
	catch(Exception e)
	{
		e.printStackTrace();
		log.info("Log Details" + e.getMessage());
		return null;
	}return res;
}


public BranchMaster getCompanyBranch( String insuranceId , String branchCode) {
	BranchMaster branchData = new BranchMaster();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	SimpleDateFormat idf = new SimpleDateFormat("yyMMddhhssmmss");
	try {
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(new Date() );  
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today   = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd   = cal.getTime();
		
		// Login Data
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
		List<BranchMaster> branchlist = new ArrayList<BranchMaster>();
		
		// Find All
		Root<BranchMaster>    c = query.from(BranchMaster.class);		
		
		// Select
		query.select(c );
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(c.get("branchCode")));
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
		effectiveDate.where(a1,a2,a3);
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a4 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode") );
		Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a6 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
		effectiveDate2.where(a4,a5,a6);
		
		 // Where	
		Predicate n1 = cb.equal(c.get("status"), "Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		Predicate n5 =cb.equal(c.get("companyId"), insuranceId );
		Predicate n6 =cb.equal(c.get("branchCode"), branchCode);
		query.where(n1,n2,n3,n5,n6).orderBy(orderList);	
		
		// Get Result
		TypedQuery<BranchMaster> result = em.createQuery(query);			
		branchlist =  result.getResultList();
		
		branchData = branchlist.get(0);
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return branchData;
}

public Integer currencyDecimalFormat(String insuranceId  ,String currencyId ) {
	Integer decimalFormat = 0 ;
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
		List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
		
		// Find All
		Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
		
		// Select
		query.select(c);
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("currencyName")));
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
		Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
		Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
		
		effectiveDate.where(a11,a12,a18,a22);
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
		Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
		Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
		
		effectiveDate2.where(a13,a14,a19,a23);
		
	    // Where	
		Predicate n1 = cb.equal(c.get("status"), "Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
		Predicate n5 = cb.equal(c.get("companyId"),"99999");
		Predicate n6 = cb.or(n4,n5);
		Predicate n7 = cb.equal(c.get("currencyId"),currencyId);
		query.where(n1,n2,n3,n6,n7).orderBy(orderList);
		
		// Get Result
		TypedQuery<CurrencyMaster> result = em.createQuery(query);			
		list =  result.getResultList(); 
		
		decimalFormat = list.size() > 0 ? (list.get(0).getDecimalDigit()==null?0 :list.get(0).getDecimalDigit()) :0; 		
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return decimalFormat;
}

	public String getInscompanyMasterDropdown(String companyId ) {
		String companyName = "" ;
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			javax.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			javax.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
		    // Where	
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			companyName  = list.size()> 0 ? list.get(0).getCompanyName() : "";	
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return companyName;
	}
	
	
	public String getCompanyProductMasterDropdown(String companyId , String productId) {
		String productName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query=  cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));
			
			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("productId"),productId);
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			productName  = list.size()> 0 ? list.get(0).getProductName() : "";	
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return productName;
		}
	
	
	public String getProductSectionDropdown(String companyId , String productId , String sectionId) {
		String sectionName = "";
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			
			// Find All
			Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3,a4);
			
			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId") );
			
			javax.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6,a7,a8);

		    // Where	
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),companyId);
			javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
			query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			sectionName = list.size()> 0 ? list.get(0).getSectionName() : "";	
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionName;
	}

public String getInsuranceType(String companyId , String productId , String sectionId ) {
	String sectionName = "" ;
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
		today   = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
		List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
		
		// Find All
		Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
		
		// Select
		query.select(c );
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("sectionName")));
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
		Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
		Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
		Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2,a3,a4);
		
		// Effective Date End
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		javax.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
		Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
		Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId") );
		
		javax.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a5, a6,a7,a8);

	    // Where	
		javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
		javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),companyId);
		javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
		javax.persistence.criteria.Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
		query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		
		sectionName = list.size()> 0 ? list.get(0).getSectionName() : "" ; 
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return sectionName;
}

public synchronized String getListItem(String insuranceId , String branchCode, String itemType, String itemCode) {
	String itemDesc = "" ;
	List<ListItemValue> list = new ArrayList<ListItemValue>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
		// Find All
		Root<ListItemValue> c = query.from(ListItemValue.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		
		// Effective Date Start Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2);
		// Effective Date End Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a3,a4);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n12 = cb.equal(c.get("status"),"R");
		Predicate n13 = cb.or(n1,n12);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
		Predicate n5 = cb.equal(c.get("companyId"), "99999");
		Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		Predicate n8 = cb.or(n4,n5);
		Predicate n9 = cb.or(n6,n7);
		Predicate n10 = cb.equal(c.get("itemType"),itemType );
		Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
		query.where(n13,n2,n3,n8,n9,n10,n11).orderBy(orderList);
		// Get Result
		TypedQuery<ListItemValue> result = em.createQuery(query);
		list = result.getResultList();
		
		itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ; 
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return itemDesc ;
}

public String getBodyTypeName(String insuranceId , String branchCode ,String bodyId  ) {
	String bodyTypeName = "";
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);;
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<MotorBodyTypeMaster> query=  cb.createQuery(MotorBodyTypeMaster.class);
		List<MotorBodyTypeMaster> list = new ArrayList<MotorBodyTypeMaster>();
		// Find All
		Root<MotorBodyTypeMaster> c = query.from(MotorBodyTypeMaster.class);
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("bodyNameEn")));
		
		// Effective Date Start Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<MotorBodyTypeMaster> ocpm1 = effectiveDate.from(MotorBodyTypeMaster.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("bodyId"),ocpm1.get("bodyId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		Predicate a4 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));

		effectiveDate.where(a1,a2,a3,a4);
		// Effective Date End Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<MotorBodyTypeMaster> ocpm2 = effectiveDate2.from(MotorBodyTypeMaster.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a5 = cb.equal(c.get("bodyId"),ocpm2.get("bodyId"));
		Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));

		effectiveDate2.where(a5,a6,a7,a8);
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("bodyId"),bodyId);
		Predicate n5 = cb.equal(c.get("companyId"),insuranceId);
		Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		Predicate n8 = cb.or(n6,n7);	
		query.where(n1,n2,n3,n4,n5,n8).orderBy(orderList);
		// Get Result
		TypedQuery<MotorBodyTypeMaster> result = em.createQuery(query);
		list = result.getResultList();
		bodyTypeName = list.size() > 0 ? list.get(0).getBodyNameEn() : "" ;		
	}	catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is --->"+e.getMessage());
			return null;
			}
		return bodyTypeName;
	}


public String getPolicyTypeName( String policyTypeId , String InsuranceId , String productId ) {
	String policyTypeName = "" ;
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);;
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PolicyTypeMaster> query=  cb.createQuery(PolicyTypeMaster.class);
		List<PolicyTypeMaster> list = new ArrayList<PolicyTypeMaster>();
		// Find All
		Root<PolicyTypeMaster> c = query.from(PolicyTypeMaster.class);
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("policyTypeId")));
		
		// Effective Date Start Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<PolicyTypeMaster> ocpm1 = effectiveDate.from(PolicyTypeMaster.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("policyTypeId"),ocpm1.get("policyTypeId"));
		Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));	
		Predicate a6 = cb.equal(c.get("productId"),ocpm1.get("productId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2,a5,a6);
		// Effective Date End Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<PolicyTypeMaster> ocpm2 = effectiveDate2.from(PolicyTypeMaster.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("policyTypeId"),ocpm2.get("policyTypeId"));
		Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));	
		Predicate a8 = cb.equal(c.get("productId"),ocpm2.get("productId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a3,a4,a7,a8);
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("policyTypeId"),policyTypeId);	
		Predicate n5 = cb.equal(c.get("companyId"),InsuranceId);	
		Predicate n6 = cb.equal(c.get("productId"),productId);
		query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
		// Get Result
		TypedQuery<PolicyTypeMaster> result = em.createQuery(query);
		list = result.getResultList();
		policyTypeName = list.size() > 0 ? list.get(0).getPolicyTypeName() : "" ;
	}	catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is --->"+e.getMessage());
			return null;
			}
		return policyTypeName;
	}

	@Override
	public EserviceMotorDetailsRes getMotorDetails(EserviceMotorDetailsGetReq req) {
		EserviceMotorDetailsRes res = new EserviceMotorDetailsRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			EserviceMotorDetails data = repo.findByRequestReferenceNoAndRiskId(
					req.getRequestReferenceNo(), Integer.valueOf(req.getVehicleId()));
			res = mapper.map(data, EserviceMotorDetailsRes.class);
			res.setVehicleId(data.getRiskId());
			res.setNoOfComprehensives(data.getNoOfCompehensives()!=null?data.getNoOfCompehensives().toString() : "");
			res.setQuoteNo(data.getQuoteNo()!=null?data.getQuoteNo() :"" );
			res.setCustomerId(data.getCustomerId()!=null ? data.getCustomerId() : "" );
			res.setDriverYn(data.getDriverYn());
			if( data.getDriverYn() !=null && data.getDriverYn().equalsIgnoreCase("Y") ) {
				List<EserviceDriverDetails> drivers = eserDriverRepo.findByRequestReferenceNoAndRiskIdOrderByDriverIdAsc(data.getRequestReferenceNo(), data.getRiskId());
				List<DriverDetailsGetRes> driDatas = new ArrayList<DriverDetailsGetRes>(); 
				
				for (EserviceDriverDetails dri  : drivers ) {
					DriverDetailsGetRes driData = new DriverDetailsGetRes();
					
					driData.setDriverDob(dri.getDriverDob());
					driData.setDriverId(dri.getDriverId().toString());
					driData.setDriverName(dri.getDriverName());
					driData.setDriverType(dri.getDriverType());
					driData.setDriverTypedesc(dri.getDriverTypedesc());
					driData.setLicenseNo(dri.getLicenceNo());
					driDatas.add(driData);					
				}
				res.setDriverDetails(driDatas);	
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<GetAllMotorDetailsRes> getallMotorDetails(EserviceMotorDetailsGetallReq req) {
		List<GetAllMotorDetailsRes> reslist = new ArrayList<GetAllMotorDetailsRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<EserviceMotorDetails> datas = repo.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			for (EserviceMotorDetails data : datas) {
				GetAllMotorDetailsRes res = new GetAllMotorDetailsRes();
				res = mapper.map(data, GetAllMotorDetailsRes.class);
				res.setVehicleId(data.getRiskId());
				res.setQuoteNo(data.getQuoteNo()!=null?data.getQuoteNo() :"" );
				res.setCustomerId(data.getCustomerId()!=null ? data.getCustomerId() : "" );
				res.setPolicyTypeDesc(data.getPolicyTypeDesc());
				res.setReferalRemarks(data.getReferalRemarks());	
				res.setActualPremiumLc(data.getActualPremiumLc()==null ? "" : data.getActualPremiumLc().toPlainString());	
				res.setActualPremiumFc(data.getActualPremiumFc()==null ? "" :data.getActualPremiumFc().toPlainString());	
				res.setOverallPremiumFc(data.getOverallPremiumFc()==null ? "" :data.getOverallPremiumFc().toPlainString());	
				res.setOverallPremiumLc(data.getOverallPremiumLc()==null ? "" :data.getOverallPremiumLc().toPlainString());	
				reslist.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return reslist;
	}

	@Override
	public SuccessRes uwquestions(EserviceMotorUwReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		EserviceMotorDetails savedata = new EserviceMotorDetails();
		try {
			List<EserviceMotorDetails> data = repo.findByRequestReferenceNoAndIdNumberAndRiskId(
					req.getRequestReferenceNo(), req.getIdNumber(), Integer.valueOf(req.getVehicleId()));
			savedata = mapper.map(data.get(0), EserviceMotorDetails.class);
			savedata.setDrivenByUnderAge(req.getDrivenByUnderAge());
			savedata.setDefectiveVisionOrHearing(req.getDefectiveVisionOrHearing());
			savedata.setMotoringOffence(req.getMotoringOffence());
			savedata.setSuspensionOfLicense(req.getSuspensionOfLicense());
			savedata.setSpecialTermsOfPremium(req.getSpecialTermsOfPremium());
			savedata.setIrrespectiveOfBlame(req.getIrrespectiveOfBlame());
			repo.save(savedata);
			res.setSuccessId(req.getRequestReferenceNo());
			res.setResponse("Updated Successful");
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public UwQuestionsRes getuwquestions(EserviceMotorUwReq req) {
		UwQuestionsRes res = new UwQuestionsRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<EserviceMotorDetails> data = repo.findByRequestReferenceNoAndIdNumberAndRiskId(
					req.getRequestReferenceNo(), req.getIdNumber(), Integer.valueOf(req.getVehicleId()));
			res = mapper.map(data.get(0), UwQuestionsRes.class);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}


	@Override
	public List<EserviceCustomerDetailsRes> getallMotorDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		ModelMapper mapper = new ModelMapper();
		mapper.getConfiguration().setAmbiguityIgnored(true);
		try {
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Motor Details
			List<Tuple> motorIds = new ArrayList<Tuple>();
			
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);

			// Find All
			Root<EserviceMotorDetails> b = query.from(EserviceMotorDetails.class);

			// Select
			query.multiselect(b.get("requestReferenceNo").alias("requestReferenceNo") ).distinct(true);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("updatedDate")));
			
			
			// Where
			Predicate n1 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n4 = cb.equal(b.get("createdBy"), req.getCreatedBy());		
			Predicate n5 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
		
			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			motorIds = result.getResultList();
			
			List<String> custRefNos = new ArrayList<String>();
			List<String> reqRefNos = new ArrayList<String>();
			for (Tuple ids : motorIds) { 
				String custRefNo = ids.get("customerReferenceNo").toString() ;
				custRefNos.add(custRefNo);
				String reqRefNo  = ids.get("requestReferenceNo").toString() ;
				reqRefNos.add(reqRefNo);
			}
			
			List<EserviceCustomerDetails> custList = custRepo.findByCustomerReferenceNoInOrderByUpdatedDateDesc(custRefNos);
			List<EserviceMotorDetails> motorList  = repo.findByRequestReferenceNoInOrderByUpdatedDateDesc(reqRefNos);

			Map<String, List<EserviceMotorDetails>>  groupByVehicle = motorList.stream().collect(Collectors.groupingBy(EserviceMotorDetails :: getRequestReferenceNo) );
			
			for(String data : groupByVehicle.keySet()  ) {
				 EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				 List<GetAllMotorDetailsRes> motorRes = new ArrayList<GetAllMotorDetailsRes>();
					
				 List<EserviceMotorDetails> getDatas = groupByVehicle.get(data);
				 getDatas.sort(Comparator.comparing(EserviceMotorDetails :: getRiskId)) ; 
				 List<EserviceCustomerDetails> filterCustomerData = custList.stream().filter( o -> o.getCustomerReferenceNo().equalsIgnoreCase(getDatas.get(0).getCustomerReferenceNo()) ).collect(Collectors.toList());						
				 res = mapper.map(filterCustomerData.get(0) , EserviceCustomerDetailsRes.class);	 
				 res.setRequestReferenceNo(getDatas.get(0).getRequestReferenceNo());
				 Type listType = new TypeToken<List<GetAllMotorDetailsRes>>(){}.getType();
				 motorRes = mapper.map(getDatas ,listType);
				// res.setListOfEserviceMotorDetails(motorRes);  
				 custRes.add(res);	
			}
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}


	@Override
	public List<EserviceCustomerDetailsRes> getallExistingQuoteDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		DozerBeanMapper dozerMapper  = new DozerBeanMapper(); 
		try {
			Date today = new Date() ;
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today); cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1); cal.set(Calendar.MINUTE, 1); cal.add(Calendar.DAY_OF_MONTH, -30);
			Date before30 = cal.getTime();
			
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Quote Customer Details
			List<CriteriaCustomerRes> customerDetails = getallQuoteCustomerDetails(req , "Y" , before30 , today , limit , offset ) ;
			
			for(CriteriaCustomerRes data : customerDetails  ) {
				 EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				 res = dozerMapper.map(data , EserviceCustomerDetailsRes.class);	 
				 custRes.add(res);	
			}
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}
	

	@Override
	public List<EserviceCustomerDetailsRes> getallRejectedQuoteDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		DozerBeanMapper dozerMapper  = new DozerBeanMapper(); 
		try {
			Date today = new Date() ;
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today); cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1); cal.set(Calendar.MINUTE, 1); cal.add(Calendar.DAY_OF_MONTH, -30);
			Date before30 = cal.getTime();
			
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Quote Customer Details
			List<CriteriaCustomerRes> customerDetails = getallQuoteCustomerDetails(req , "R" , before30 , today , limit , offset ) ;
			
			for(CriteriaCustomerRes data : customerDetails  ) {
				 EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				 res = dozerMapper.map(data , EserviceCustomerDetailsRes.class);	 
				 custRes.add(res);	
			}
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}

	@Override
	public List<EserviceCustomerDetailsRes> getallLapsedQuoteDetails(ExistingMotorDetailsReq req) {
		List<EserviceCustomerDetailsRes> custRes = new ArrayList<EserviceCustomerDetailsRes>();
		DozerBeanMapper dozerMapper  = new DozerBeanMapper(); 
		try {
			Date today = new Date() ;
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today); cal.set(Calendar.HOUR_OF_DAY, 1); cal.set(Calendar.MINUTE, 1); cal.add(Calendar.DAY_OF_MONTH, -30);
			Date before30 = cal.getTime();
			
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Quote Customer Details
			List<CriteriaCustomerRes> customerDetails = getallLapsedQuoteCustomerDetails(req , "Y" , before30  , limit , offset ) ;
			
			for(CriteriaCustomerRes data : customerDetails  ) {
				 EserviceCustomerDetailsRes res = new EserviceCustomerDetailsRes();
				 res = dozerMapper.map(data , EserviceCustomerDetailsRes.class);	 
				 custRes.add(res);	
			}
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return custRes;
	}


	
	
	
	public List<CriteriaCustomerRes> getallQuoteCustomerDetails(ExistingMotorDetailsReq req , String status , Date startDate ,Date  endDate , Integer limit , Integer offset ) {
		List<CriteriaCustomerRes> customerDetails = new ArrayList<CriteriaCustomerRes>();
		try {
			// Get Request Ref No
			List<String> reqRefNos = new ArrayList<String>(); 
			{
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<String> query = cb.createQuery(String.class);
				Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);
				Root<EserviceMotorDetails> m = query.from(EserviceMotorDetails.class);

				query.select(m.get("requestReferenceNo")).distinct(true);
				
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(m.get("updatedDate")));
				
				// Where
				Predicate n1 = cb.equal(  c.get("customerReferenceNo"),  m.get("customerReferenceNo"));
				Predicate n2 = cb.equal(  m.get("branchCode"), req.getBranchCode()) ;
				Predicate n3 = cb.equal(  m.get("companyId"),  req.getInsuranceId()) ;
				Predicate n4 = cb.equal(  m.get("productId"),  req.getProductId());
				Predicate n5 = cb.equal(  m.get("createdBy"),  req.getCreatedBy());
				Predicate n6 = cb.equal(m.get("status"),status );
				Predicate n7 = cb.lessThanOrEqualTo(m.get("updatedDate"), endDate);
				Predicate n8 = cb.greaterThanOrEqualTo(m.get("updatedDate"), startDate);
				query.where(n1,n2,n3,n4,n5,n6,n7,n8).orderBy(orderList);
				
				// Get Result
				TypedQuery<String> result = em.createQuery(query);
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				reqRefNos = result.getResultList();
			
			}
			
			// Get Datas
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CriteriaCustomerRes> query = cb.createQuery(CriteriaCustomerRes.class);

			// Find All
			Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);
			Root<EserviceMotorDetails> m = query.from(EserviceMotorDetails.class);

			// Select
			query.multiselect(
					// Customer Info
				    c.get("customerReferenceNo").alias("customerReferenceNo"),
				    c.get("policyHolderTypeid").alias("policyHolderTypeid"),
					c.get("idType").alias("idType"),
					c.get("idNumber").alias("idNumber"),
					c.get("age").alias("age"),
					c.get("clientName").alias("clientName"),
					c.get("titleDesc").alias("titleDesc"),
					c.get("policyHolderType").alias("policyHolderType"),
					c.get("idTypeDesc").alias("idTypeDesc"),
					c.get("dobOrRegDate").alias("dobOrRegDate"),
					c.get("genderDesc").alias("genderDesc"),
					c.get("occupationDesc").alias("occupationDesc"),
					c.get("businessTypeDesc").alias("businessTypeDesc"),
					c.get("telephoneNo1").alias("telephoneNo1"),
					c.get("telephoneNo2").alias("telephoneNo2"),
					c.get("telephoneNo3").alias("telephoneNo3"),
					c.get("mobileNo1").alias("mobileNo1"),
					c.get("mobileNo2").alias("mobileNo2"),
					c.get("mobileNo3").alias("mobileNo3"),
					c.get("email1").alias("email1"),
					c.get("email2").alias("email2"),
					c.get("email3").alias("email3"),
					
					c.get("vrnGst").alias("vrnGst") ,
				
					// Vehicle Info
					m.get("companyId").alias("companyId"),
					m.get("productId").alias("productId"),
					m.get("branchCode").alias("branchCode"),
				 m.get("requestReferenceNo").alias("requestReferenceNo") , 
					m.get("createdBy").alias("createdBy") , 
					m.get("status").alias("status") ,
					m.get("quoteNo").alias("quoteNo") ,
					m.get("customerId").alias("customerId") ,
					m.get("entryDate").alias("entryDate") ,
					m.get("updatedDate").alias("updatedDate") ,
					m.get("updatedBy").alias("updatedBy")
					).distinct(true);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(m.get("quoteNo")));
			
			//In 
			Expression<String>e0= m.get("requestReferenceNo");
			
			// Where
			Predicate n1 = e0.in(reqRefNos);
			Predicate n2 = cb.equal(  c.get("customerReferenceNo"),  m.get("customerReferenceNo"));
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
			TypedQuery<CriteriaCustomerRes> result = em.createQuery(query);
			customerDetails = result.getResultList();
			
			customerDetails = customerDetails.stream().filter(distinctByKey(o -> Arrays.asList(o.getRequestReferenceNo()))).collect(Collectors.toList());	
			customerDetails.sort(Comparator.comparing(CriteriaCustomerRes :: getUpdatedDate).reversed());	
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return customerDetails;
	}
	

	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	
	public List<CriteriaCustomerRes> getallLapsedQuoteCustomerDetails(ExistingMotorDetailsReq req , String status , Date startDate  , Integer limit , Integer offset ) {
		List<CriteriaCustomerRes> customerDetails = new ArrayList<CriteriaCustomerRes>();
		try {
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CriteriaCustomerRes> query = cb.createQuery(CriteriaCustomerRes.class);

			// Find All
			Root<EserviceMotorDetails> m = query.from(EserviceMotorDetails.class);
			Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);
			
			// Select
			query.multiselect(
					// Customer Info
				    c.get("customerReferenceNo").alias("customerReferenceNo"),
				    c.get("policyHolderTypeid").alias("policyHolderTypeid"),
					c.get("idType").alias("idType"),
					c.get("idNumber").alias("idNumber"),
					c.get("age").alias("age"),
					c.get("clientName").alias("clientName"),
					c.get("titleDesc").alias("titleDesc"),
					c.get("policyHolderType").alias("policyHolderType"),
					c.get("idTypeDesc").alias("idTypeDesc"),
					c.get("dobOrRegDate").alias("dobOrRegDate"),
					c.get("genderDesc").alias("genderDesc"),
					c.get("occupationDesc").alias("occupationDesc"),
					c.get("businessTypeDesc").alias("businessTypeDesc"),
					c.get("telephoneNo1").alias("telephoneNo1"),
					c.get("telephoneNo2").alias("telephoneNo2"),
					c.get("telephoneNo3").alias("telephoneNo3"),
					c.get("mobileNo1").alias("mobileNo1"),
					c.get("mobileNo2").alias("mobileNo2"),
					c.get("mobileNo3").alias("mobileNo3"),
					c.get("email1").alias("email1"),
					c.get("email2").alias("email2"),
					c.get("email3").alias("email3"),
					c.get("vrnGst").alias("vrnGst") ,
				
					// Vehicle Info
					m.get("companyId").alias("companyId"),
					m.get("productId").alias("productId"),
					m.get("branchCode").alias("branchCode"),
					
					m.get("requestReferenceNo").alias("requestReferenceNo") , 
					m.get("createdBy").alias("createdBy") , 
					m.get("status").alias("status") ,
					m.get("quoteNo").alias("quoteNo") ,
					m.get("customerId").alias("customerId") ,
						m.get("entryDate").alias("entryDate") 
					//	m.get("updatedDate").alias("updatedDate") ,
					//	m.get("updatedBy").alias("updatedBy")
						).distinct(true);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(m.get("updatedDate")));
			
			//  RequestRefNo Sub Query 
			Subquery<String> reqRefNo = query.subquery(String.class);
			Root<EserviceMotorDetails> ocpm1 = reqRefNo.from(EserviceMotorDetails.class);
			reqRefNo.select(ocpm1.get("requestReferenceNo")).distinct(true);
		//	Predicate a1 = cb.equal(ocpm1.get("requestReferenceNo"),m.get("requestReferenceNo") );
		//	reqRefNo.where(a1);
		
			//In 
			Expression<String>e0= m.get("requestReferenceNo");
			
			// Where
			Predicate n1 = cb.equal(  c.get("customerReferenceNo"),  m.get("customerReferenceNo"));
			Predicate n2 = e0.in(reqRefNo);
			Predicate n3 = cb.equal(  m.get("branchCode"), req.getBranchCode()) ;
			Predicate n4 = cb.equal(  m.get("companyId"),  req.getInsuranceId()) ;
			Predicate n5 = cb.equal(  m.get("productId"),  req.getProductId());
			Predicate n6 = cb.equal(  m.get("createdBy"),  req.getCreatedBy());
			Predicate n7 = cb.equal(m.get("status"),status );
			Predicate n8 = cb.lessThanOrEqualTo(m.get("updatedDate"), startDate);
			
			query.where(n1,n2,n3,n4,n5,n6,n7,n8).orderBy(orderList);
			
			
			// Get Result
			TypedQuery<CriteriaCustomerRes> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			customerDetails = result.getResultList();
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return customerDetails;
	}


	@Override
	public SuccessRes updateLapsedQuote(UpdateLapsedQuoteReq req) {
		SuccessRes res = new SuccessRes();
		try {
			Date today = new Date(); 
			
			CriteriaBuilder cb = this.em.getCriteriaBuilder();
			// create update
			CriteriaUpdate<EserviceMotorDetails> update = cb.createCriteriaUpdate(EserviceMotorDetails.class);
			// set the root class
			Root<EserviceMotorDetails> m = update.from(EserviceMotorDetails.class);
			// set update and where clause
			update.set("updatedBy", req.getCreatedBy());
			update.set("updatedDate", today);
			Predicate n1 = cb.equal(m.get("requestReferenceNo"), req.getRequestReferenceNo());
			update.where(n1 );
			// perform update
			em.createQuery(update).executeUpdate();
			
			res.setResponse("Successfully Updated");
			res.setSuccessId(req.getRequestReferenceNo());
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}


	@Override
	public SuccessRes deleteMotorDetails(EserviceMotorDetailsGetReq req) {
		SuccessRes res = new SuccessRes();
		try {
			EserviceMotorDetails findData = repo.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo() , Integer.valueOf(req.getVehicleId()));
			if(findData !=null && StringUtils.isBlank(req.getEndtType()) ) {
				repo.delete(findData);
				res.setResponse("Successfully Updated");
				res.setSuccessId(req.getRequestReferenceNo());
				
			} else if(findData !=null && StringUtils.isNotBlank(req.getEndtType()) ){
				findData.setStatus("D");
				repo.save(findData);
				res.setResponse("Successfully Updated");
				res.setSuccessId(req.getRequestReferenceNo());
			}else {
				res.setResponse("Data Not Found");
				res.setSuccessId(req.getRequestReferenceNo());
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}
	@Override
	public List<Error> validateDriverDetails(List<MotorDriverSaveReq> req) {
		List<Error> error = new ArrayList<Error>();

		try {

			Integer rowNo =  0 ;
			List<DriverLicenceReq> licenseNos =  new ArrayList<DriverLicenceReq>();
			
			for (MotorDriverSaveReq dri : req ) {
				rowNo = rowNo + 1 ;
				if (StringUtils.isBlank(dri.getDriverName()) ) {
					error.add(new Error("10", "Driver Name", "Please Enter Driver Name in Row No : " + rowNo ));
				} else if (! dri.getDriverName().matches("[a-zA-Z ]+") ) { 
					error.add(new Error("10", "Driver Name", "Please Enter Valid Driver Name in Row No : " + rowNo ));
				}
				if (StringUtils.isBlank(dri.getDriverType())) {
					error.add(new Error("10", "Driver Type", "Please Select Owner/Driver Type in Row No : " + rowNo ));
				}
				if (StringUtils.isBlank(dri.getLicenseNo()) ) {
					error.add(new Error("10", "License No", "Please Enter License No in Row No : " + rowNo ));
				} else if (dri.getLicenseNo().length()>20 ) { 
					error.add(new Error("10", "License No", "Please Enter License No With in 20 Charecter in Row No : " + rowNo ));
				} else if (StringUtils.isNotBlank(dri.getRiskId()) ) {
					List<DriverLicenceReq> filterLicense = licenseNos.stream().filter( o ->  o.getRiskId().equalsIgnoreCase(dri.getRiskId()) && o.getLicenseNo().equalsIgnoreCase(dri.getLicenseNo())  ).collect(Collectors.toList());	
					if (filterLicense.size()>0 ) {
						error.add(new Error("10", "License No", "License No Duplicate in Risk Id :  "+ dri.getRiskId()  +" Row No : " + rowNo ));
						
					} else {
						DriverLicenceReq li = new DriverLicenceReq();
						li.setRiskId(dri.getRiskId());
						li.setLicenseNo(dri.getLicenseNo());
						licenseNos.add(li);
					}
					
				}
				if (dri.getDriverDob()==null ) {
					error.add(new Error("10", "Driver Dob", "Please Enter Driver Dob in Row No : " + rowNo ));
				}
				if (StringUtils.isBlank(dri.getQuoteNo()) ) {
					error.add(new Error("10", "Quote No", "Please Enter Quote No in Row No : " + rowNo ));
				}
				
				if (StringUtils.isBlank(dri.getRiskId()) ) {
					error.add(new Error("10", "Chassis No", "Please Enter Vehicle Chassis No in Row No : " + rowNo ));
				}
				if (StringUtils.isBlank(dri.getCreatedBy()) ) {
					error.add(new Error("10", "Created By", "Please Enter Created By in Row No : " + rowNo ));
				}
				
			}
				
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			error.add(new Error("42", "Common Error", e.getMessage()));
		}
		return error;
	}
	@Override
	public DriverSaveRes saveDriverDetails(List<MotorDriverSaveReq> req) {
		DriverSaveRes res = new DriverSaveRes(); 
		try {
			Long countDri = driverRepo.countByQuoteNo(req.get(0).getQuoteNo() );
			if( countDri > 0) {
				 driverRepo.deleteByQuoteNo(req.get(0).getQuoteNo() );
			}
			
			HomePositionMaster home = homeRepo.findByQuoteNo(req.get(0).getQuoteNo());
			PersonalInfo per = personalRepo.findByCustomerId(home.getCustomerId());
			
			Map<String,List<MotorDriverSaveReq>> groupByRiskId = req.stream().collect(Collectors.groupingBy(MotorDriverSaveReq :: getRiskId )) ;
			
			List<MotorDriverDetails> saveList = new ArrayList<MotorDriverDetails>(); 
			for (String data : groupByRiskId.keySet() ) {
				List<MotorDriverSaveReq> driList = groupByRiskId.get(data)	;
				Integer driId = 0 ;
				for (MotorDriverSaveReq dri :  driList) {
					driId = driId + 1 ;
					MotorDriverDetails saveDri  = new MotorDriverDetails();  
					saveDri.setCompanyId(home.getCompanyId());
					saveDri.setCreatedBy(dri.getCreatedBy());
					saveDri.setDriverDob(dri.getDriverDob());
					saveDri.setDriverId(driId);
					saveDri.setDriverName(dri.getDriverName());
					saveDri.setPolicyHolderType(per.getPolicyHolderType()==null?"":per.getPolicyHolderType().toString());
					saveDri.setPolicyHolderTypeDesc(per.getPolicyHolderTypeDesc() );
					saveDri.setIdType("4");
					List<ListItemValue> IdType = getListItemDriver(home.getCompanyId() , home.getBranchCode() , "POLICY_HOLDER_ID_TYPE" , dri.getDriverType());
					saveDri.setIdTypeDesc(IdType.size()> 0 ? IdType.get(0).getItemValue() : "Driving License");
					saveDri.setIdNumber(dri.getLicenseNo());
					saveDri.setDriverType(dri.getDriverType());
					List<ListItemValue> DriDesc = getListItemDriver(home.getCompanyId() , home.getBranchCode() , "DRIVER_TYPES" , dri.getDriverType());
					saveDri.setDriverTypedesc(DriDesc.size()> 0 ? DriDesc.get(0).getItemValue() : "Driver" );
					saveDri.setEntryDate(new Date());
					saveDri.setProductId(home.getProductId());
					saveDri.setQuoteNo(home.getQuoteNo() );
					saveDri.setRequestReferenceNo(home.getRequestReferenceNo());
					saveDri.setRiskId(Integer.valueOf(dri.getRiskId()));
					saveDri.setStatus("Y");
					saveList.add(saveDri);
				}
			}
			driverRepo.saveAllAndFlush(saveList);
			res.setResponse("Success");
			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			return null;
		}
		return res;
	}
	
	public synchronized List<ListItemValue> getListItemDriver(String companyId ,String branchCode , String itemType , String itemCode) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			Predicate n11 = cb.equal(c.get("itemCode"),itemCode);
			query.where(n1,n2,n3,n8,n9,n10,n11).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}
	
	@Override
	public List<DriverDetailsRes> getDriverDetails(DriverDetailsGetReq req) {
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		List<DriverDetailsRes> resList = new ArrayList<DriverDetailsRes>(); 
		try {
			List<MotorDriverDetails> driverList = driverRepo.findByQuoteNo(req.getQuoteNo() );
			Map<Integer,List<MotorDriverDetails>> groupByRiskId = driverList.stream().collect(Collectors.groupingBy(MotorDriverDetails :: getRiskId )) ;
			
			for (Integer riskId : groupByRiskId.keySet() ) {
				List<MotorDriverDetails> driList = groupByRiskId.get(riskId)	;
				driList.sort(Comparator.comparing(MotorDriverDetails :: getDriverId  )) ;
				
				for (MotorDriverDetails dri :  driList) {
					DriverDetailsRes driverRes  = new DriverDetailsRes();  
					dozerMapper.map(dri, driverRes);
					driverRes.setLicenseNo(dri.getIdNumber());
					resList.add(driverRes);
					
				}
				
			}
			
			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			return null;
		}
		return resList;
	}


}
