/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-11-18 ( Date ISO 2022-11-18 - Time 11:38:42 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Tuple;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.ExchangeMaster;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.bean.OccupationMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.common.req.EservicePaccSaveReq;
import com.maan.eway.common.req.EservicePersonalAccGetById;
import com.maan.eway.common.res.EservicePaccGetRes;
import com.maan.eway.common.res.EservicePaccSaveRes;
import com.maan.eway.common.service.EservicePersonalAccidentService;
import com.maan.eway.error.Error;
import com.maan.eway.repository.CompanyProductMasterRepository;
import com.maan.eway.repository.EServiceSectionDetailsRepository;
import com.maan.eway.repository.EserviceCommonDetailsRepository;
import com.maan.eway.repository.InsuranceCompanyMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.LoginBranchMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.repository.ProductSectionMasterRepository;
import com.maan.eway.req.OneTimeTableReq;
import com.maan.eway.res.OneTimeTableRes;
import com.maan.eway.service.OneTimeService;

/**
 * <h2>EserviceBuildingDetailsServiceimpl</h2>
 */
@Service
@Transactional
public class EservicePersonalAccidentServiceImpl implements EservicePersonalAccidentService {


	@Autowired
	private LoginMasterRepository loginRepo;

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private OneTimeService otService;

	@Autowired
	private CompanyProductMasterRepository productRepo;

	@Autowired
	private ProductSectionMasterRepository sectionRepo;

	@Autowired
	private InsuranceCompanyMasterRepository companyRepo;

	@Autowired
	private EServiceSectionDetailsRepository eserSecRepo ; 
	
	@Autowired
	private LoginBranchMasterRepository lbranchRepo ;
	
	@Autowired
	private ListItemValueRepository listrepo;

	@Autowired
	private EserviceCommonDetailsRepository eserCommonRepo ; 
	
	@Autowired
	private GenerateSeqNoServiceImpl genSeqNoService ; 
	
	
	private Logger log = LogManager.getLogger(EservicePersonalAccidentServiceImpl.class);
	/*
	 * public EserviceBuildingDetailsServiceImpl(EserviceBuildingDetailsRepository
	 * repo) { this.repository = repo; }
	 * 
	 */

	


	public Integer currencyDecimalFormat(String insuranceId  ,String currencyId ) {
		Integer decimalFormat = 0 ;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
			List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
			
			// Find All
			Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
			
			// Select
			query.select(c);
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
			Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			
			effectiveDate.where(a11,a12,a18,a22);
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
			Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			
			effectiveDate2.where(a13,a14,a19,a23);
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"),"99999");
			Predicate n6 = cb.or(n4,n5);
			Predicate n7 = cb.equal(c.get("currencyId"),currencyId);
			query.where(n1,n2,n3,n6,n7).orderBy(orderList);
			
			// Get Result
			TypedQuery<CurrencyMaster> result = em.createQuery(query);			
			list =  result.getResultList(); 
			
			decimalFormat = list.size() > 0 ? (list.get(0).getDecimalDigit()==null?0 :list.get(0).getDecimalDigit()) :0; 		
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return decimalFormat;
	}
	
	public OccupationMaster getOccupationMasterDropdown( String companyId , String branchCode , String occupationId) {
		OccupationMaster occupation = null ;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<OccupationMaster> query=  cb.createQuery(OccupationMaster.class);
			List<OccupationMaster> list = new ArrayList<OccupationMaster>();
			
			// Find All
			Root<OccupationMaster> c = query.from(OccupationMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<OccupationMaster> ocpm1 = effectiveDate.from(OccupationMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("occupationId"),ocpm1.get("occupationId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			effectiveDate.where(a1,a2,a5,a6);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<OccupationMaster> ocpm2 = effectiveDate2.from(OccupationMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("occupationId"),ocpm2.get("occupationId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,a7,a8);
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"),"99999");
			Predicate n7 = cb.or(n5,n6);
			Predicate n8 = cb.equal(c.get("occupationId"),occupationId);
			query.where(n1,n2,n3,n4,n7,n8).orderBy(orderList);
			TypedQuery<OccupationMaster> result = em.createQuery(query);
			list = result.getResultList();

			if(list.size()>0) {
				list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getOccupationId()))).collect(Collectors.toList());
				list.sort(Comparator.comparing(OccupationMaster :: getOccupationName ));
				occupation = list.get(0);
			}
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return occupation;
		}
	
	public String getProductSectionDropdown(String companyId , String productId , String sectionId) {
		String sectionName = "";
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			
			// Find All
			Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3,a4);
			
			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId") );
			
			javax.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6,a7,a8);

		    // Where	
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),companyId);
			javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
			query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			sectionName = list.size()> 0 ? list.get(0).getSectionName() : "";	
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionName;
	}
	
	public String getInscompanyMasterDropdown(String companyId ) {
		String companyName = "" ;
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			javax.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			javax.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
		    // Where	
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			companyName  = list.size()> 0 ? list.get(0).getCompanyName() : "";	
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return companyName;
	}
	
	public String getCompanyProductMasterDropdown(String companyId , String productId) {
		String productName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query=  cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));
			
			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("productId"),productId);
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			productName  = list.size()> 0 ? list.get(0).getProductName() : "";	
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return productName;
		}
	



	private static <T> java.util.function.Predicate<T> distinctByKey(
			java.util.function.Function<? super T, ?> keyExtractor) {
		Map<Object, Boolean> seen = new ConcurrentHashMap<>();
		return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	
	

public synchronized String getListItem(String insuranceId , String branchCode, String itemType, String itemCode) {
	String itemDesc = "" ;
	List<ListItemValue> list = new ArrayList<ListItemValue>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
		// Find All
		Root<ListItemValue> c = query.from(ListItemValue.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		
		// Effective Date Start Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2);
		// Effective Date End Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a3,a4);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
		Predicate n5 = cb.equal(c.get("companyId"), "99999");
		Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		Predicate n8 = cb.or(n4,n5);
		Predicate n9 = cb.or(n6,n7);
		Predicate n10 = cb.equal(c.get("itemType"),itemType );
		Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
		query.where(n1,n2,n3,n8,n9,n10,n11).orderBy(orderList);
		// Get Result
		TypedQuery<ListItemValue> result = em.createQuery(query);
		list = result.getResultList();
		
		itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ; 
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return itemDesc ;
}

	@Override
	public List<Error> validatePersonalAccidentDetails(EservicePaccSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {

			if (StringUtils.isBlank(req.getBranchCode())) {
				error.add(new Error("01", "BranchCode", "Please Enter BranchCode "));
			} else if (req.getBranchCode().length() > 20) {
				error.add(new Error("01", "Branch Code", "Please Enter Branch Code within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getAgencyCode())) {
				error.add(new Error("02", "Agency Code", "Please Enter AgencyCode "));
			} else if (req.getAgencyCode().length() > 20) {
				error.add(new Error("02", "Agency Code", "Please Enter Agency Code within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getProductId())) {
				error.add(new Error("03", "Product Id", "Please Enter ProductId "));
			} else if (req.getProductId().length() > 20) {
				error.add(new Error("03", "Product Id", "Please Enter Product Id within 20 Characters"));
			}
			
			if (StringUtils.isBlank(req.getSectionId())) {
				error.add(new Error("04", "SectionId", "Please Select Insurance Types"));
			}
			
			if (StringUtils.isBlank(req.getCompanyId())) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId "));
			} else if (req.getCompanyId().length() > 20) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId within 20 Characters"));
			}

			if (StringUtils.isBlank(req.getCurrency())) {
				error.add(new Error("10", "Currency", "Please Select Currency"));
			}
			if (StringUtils.isBlank(req.getExchangeRate())) {
				error.add(new Error("11", "ExchangeRate", "Please Enter ExchangeRate"));
			} {
				Tuple minMax =   getMinMaxRate(req.getCurrency(),req.getCompanyId());
				if(minMax !=null ) {
					
					Double exRate=Double.valueOf(minMax.get("exchangeRate")==null?"0" : minMax.get("exchangeRate").toString());
					Double minRate=Double.valueOf(minMax.get("minDiscount")==null?"0" : minMax.get("minDiscount").toString());
					Double maxRate=Double.valueOf(minMax.get("maxLoading")==null?"0" :minMax.get("maxLoading").toString());
					minRate=exRate-(exRate*minRate/100);
					maxRate=exRate+(exRate*maxRate/100);
					if(Double.valueOf(req.getExchangeRate())<=minRate || Double.valueOf( req.getExchangeRate())>=maxRate ){
					error.add(new Error("11", "ExchangeRate", "This Exchange Rate Should Between "+minRate +" And "+maxRate));
					}
				}
			 }

			if (req.getPolicyStartDate() == null) {
				error.add(new Error("13", "PolicyStartDate", "Please Enter PolicyStartDate"));
			}
			if (req.getPolicyEndDate() == null) {
				error.add(new Error("14", "PolicyEndDate", "Please Enter PolicyEndDate"));

			} else if (req.getPolicyStartDate() != null && req.getPolicyEndDate() != null) {
				if (req.getPolicyEndDate().equals(req.getPolicyStartDate())
						|| req.getPolicyEndDate().before(req.getPolicyStartDate())) {
					error.add(new Error("14", "PolicyEndDate", "PolicyEndDate Before PolicyStartDate Not Allowed"));
				}
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {

				if (StringUtils.isBlank(req.getSubUserType())) {
					error.add(new Error("15", "SubUserType", "Please Select SubUserType"));
				}

				if (StringUtils.isBlank(req.getBrokerCode())) {
					error.add(new Error("16", "BrokerCode", "Please Select BrokerCode"));
				}

				if (StringUtils.isBlank(req.getApplicationId())) {
					error.add(new Error("17", "ApplicationId", "Please Enter ApplicationId"));
				}

				if (StringUtils.isBlank(req.getLoginId())) {
					error.add(new Error("18", "Login Id", "Please Enter LoginId"));
				} else {
					LoginMaster loginData = loginRepo.findByLoginId(req.getCreatedBy());
					if (loginData.getSubUserType().equalsIgnoreCase("bank")) {
						if (StringUtils.isBlank(req.getAcExecutiveId())) {
							error.add(new Error("19", "AcExecutiveId", "Please Select AcExecutiveId"));
						}
					}
				}
			}
				

			if (StringUtils.isBlank(req.getHavepromocode())) {
				error.add(new Error("46", "Havepromocode", "Please Enter Havepromocode"));
			}
			if (StringUtils.isNotBlank(req.getHavepromocode()) && req.getHavepromocode().equalsIgnoreCase("Y")) {
				if (StringUtils.isBlank(req.getPromocode())) {
					error.add(new Error("47", "Promocode", "Please Enter Promocode"));
				}
			}

			
			if (StringUtils.isBlank(req.getSumInsured()) ) {
				error.add(new Error("49", "SumInsured", "Please Enter SumInsured"));
			} else if ( !req.getSumInsured().matches("[0-9.]+")) {
				error.add(new Error("49", "SumInsured", "Please  Valid SumInsured"));
			}
			
			if (StringUtils.isBlank(req.getSalaryPerAnnum()) ) {
				error.add(new Error("49", "SumInsured", "Please Enter Salary PerAnnum"));
			} else if ( !req.getSumInsured().matches("[0-9.]+")) {
				error.add(new Error("49", "SumInsured", "Please  Valid Salary PerAnnum"));
			}

			if (StringUtils.isBlank(req.getOccupationType()) ) {
				error.add(new Error("49", "OccupationType", "Please Select OccupationType"));
			}
			
			if (StringUtils.isBlank(req.getCustomerName()) ) {
				error.add(new Error("49", "CustomerName", "Please Enter CustomerName"));
			}
			
			if (req.getDob()==null ) {
				error.add(new Error("49", "Date Of Birth", "Please Enter Date Of Birth"));
			}
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return error;
	}
	public Tuple getMinMaxRate(String Currency,String CompanyId) {
		Tuple currencyRes =null;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
			List<Tuple> list = new ArrayList<Tuple>();
			
			// Find All
			Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
			
			Subquery<Long> exchangeRate = query.subquery(Long.class);
			Root<ExchangeMaster> ex = exchangeRate.from(ExchangeMaster.class);
			// Exchange Effective Date Start Max Filter
			Subquery<Long> effectiveDate3 = query.subquery(Long.class);
			Root<ExchangeMaster> ocpm3 = effectiveDate3.from(ExchangeMaster.class);
			effectiveDate3.select(cb.max(ocpm3.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ex.get("exchangeId"),ocpm3.get("exchangeId"));
			Predicate a2 = cb.equal(ex.get("currencyId"),ocpm3.get("currencyId"));
			Predicate a15 = cb.equal(ex.get("companyId"),ocpm3.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
			effectiveDate3.where(a1,a2,a3,a15);
			
			// Exhange Effective Date End Max Filter
			Subquery<Long> effectiveDate4 = query.subquery(Long.class);
			Root<ExchangeMaster> ocpm4 = effectiveDate4.from(ExchangeMaster.class);
			effectiveDate4.select(cb.max(ocpm4.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ex.get("exchangeId"),ocpm4.get("exchangeId"));
			Predicate a5 = cb.equal(ex.get("currencyId"),ocpm4.get("currencyId"));
			Predicate a16 = cb.equal(ex.get("companyId"),ocpm4.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
			effectiveDate4.where(a4,a5,a6,a16);
			
			// Exhange Rate Sub Query
			exchangeRate.select(ex.get("exchangeRate"));
			Predicate a7 = cb.equal(ex.get("currencyId"),Currency);
			Predicate a9 = cb.equal(ex.get("effectiveDateStart"), effectiveDate3);
			Predicate a10 = cb.equal(ex.get("effectiveDateEnd"), effectiveDate4);
			Predicate a17 = cb.equal(ex.get("companyId"),CompanyId);
			exchangeRate.where(a7,a9,a10,a17);

			// Select
			query.multiselect(c.get("currencyId").alias("currencyId") ,
				c.get("minDiscount").alias("minDiscount") , 
					c.get("maxLoading").alias("maxLoading") ,
					exchangeRate.alias("exchangeRate"));
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
			javax.persistence.criteria.Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			javax.persistence.criteria.Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			
			effectiveDate.where(a11,a12,a18,a22);
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
			javax.persistence.criteria.Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			javax.persistence.criteria.Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			
			effectiveDate2.where(a13,a14,a19,a23);
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n11 = cb.equal(c.get("status"), "R");
			Predicate n12 = cb.or(n1,n11);
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),CompanyId);
			Predicate n5 = cb.equal(c.get("companyId"),"99999");
			Predicate n6 = cb.or(n4,n5);
			query.where(n12,n2,n3,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);			
			list =  result.getResultList();
			if( list.size()>0) {
				currencyRes = list.get(0);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
		}
		return currencyRes;
	}
	@Override
	public EservicePaccSaveRes savePersonalAccidentDetails(EservicePaccSaveReq req) {
		EservicePaccSaveRes res = new EservicePaccSaveRes();
//		DozerBeanMapper dozerMapper = new DozerBeanMapper();
//		EservicePersonalAccidentDetails findData = null;
//		EservicePersonalAccidentDetails saveData = new EservicePersonalAccidentDetails();
//		String refNo = "";
		try {
//			String refShortCode = getListItem (req.getCompanyId() , req.getBranchCode() ,"PRODUCT_SHORT_CODE",req.getProductId() );
//			Integer riskId = 0;
//			
//			Date entryDate = null;
//			String createdBy = "";
//			String status = "Y";
//			
//			if (StringUtils.isBlank(req.getRequestReferenceNo())) {
//			
//					// Save
//				entryDate = new Date();
//				createdBy = req.getCreatedBy();
//
//				refNo = refShortCode +"-"  + genSeqNoService.generateRefNo() ; // idf.format(new Date()) + random ; 
//				saveData = dozerMapper.map(req, EservicePersonalAccidentDetails.class);
//			//	saveData.setSectionDesc(section.get(0).getSectionName());
//			
//
//			}else {
//				// Update
//				refNo = req.getRequestReferenceNo() ;
//				findData = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),Integer.valueOf(req.getRiskId()));	
//				
//				
//				if(findData !=null ) {
//					repository.delete( findData);
//					
//				entryDate = findData.getEntryDate() ;
//				createdBy = findData.getCreatedBy() ;
//				status  =  findData.getStatus();
//				
//				} else {
//				
//					entryDate = new Date();
//					createdBy = req.getCreatedBy();
//					status  =  "Y";
//				}
//			}
//			
//			saveData = dozerMapper.map(req,EservicePersonalAccidentDetails.class);
//			
//			
//			riskId = Integer.valueOf(req.getRiskId()) ;
//			saveData.setRiskId(riskId);			
//			saveData.setCreatedBy(createdBy);
//			saveData.setEntryDate(entryDate);
//			saveData.setRequestReferenceNo(refNo);
//			saveData.setStatus(status);
//			
//			if (req.getUserType().equalsIgnoreCase("Issuer") && ( req.getSubUserType().equalsIgnoreCase("high") || req.getSubUserType().equalsIgnoreCase("both")) ) {  
//				saveData.setAdminLoginId(req.getCreatedBy());			
//				saveData.setUpdatedBy(createdBy);
//				saveData.setUpdatedDate(new Date());
//				
//				
//			} else {
//					saveData.setBranchCode(  req.getBranchCode()) ;
//					saveData.setBrokerBranchCode(req.getBrokerBranchCode());
//					LoginBranchMaster brokerBranchName=lbranchRepo.findByLoginIdAndBrokerBranchCodeAndCompanyId(req.getLoginId(), req.getBrokerBranchCode(), req.getCompanyId());
//					saveData.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
//					saveData.setCreatedBy(req.getCreatedBy());
//					saveData.setLoginId(req.getLoginId())		;
//					saveData.setAcExecutiveId(StringUtils.isBlank(req.getAcExecutiveId())?null : req.getAcExecutiveId());
//					saveData.setApplicationId(req.getApplicationId());
//					saveData.setBrokerCode(req.getBrokerCode());
//				//	saveData.setBdmCode(req.getBdmCode());
//					saveData.setStatus("Y");
//					saveData.setEntryDate(entryDate);
//			}
//				saveData.setUpdatedBy(req.getCreatedBy());
//				saveData.setUpdatedDate(new Date());
//		
//			
//			
//			
//			// Admin Details
//			if( findData !=null ) {
//				saveData.setAdminLoginId(findData.getAdminLoginId());
//				saveData.setAdminRemarks(findData.getAdminRemarks());
//				saveData.setReferalRemarks(findData.getReferalRemarks());
//				saveData.setRejectReason(findData.getRejectReason());
//				saveData.setLoginId(findData.getLoginId());
//				saveData.setBrokerCode(findData.getBrokerCode());
//				saveData.setAcExecutiveId(findData.getAcExecutiveId());
//				saveData.setApplicationId(findData.getApplicationId());
//				saveData.setStatus(findData.getStatus());
//				saveData.setBrokerBranchCode(findData.getBrokerBranchCode())	;
//				saveData.setBrokerBranchName(findData.getBrokerBranchName());
//				saveData.setBranchCode(findData.getBranchCode());
//				//saveData.setBdmCode(findData.getBdmCode());
//				saveData.setQuoteNo(findData.getQuoteNo());
//				saveData.setCustomerId(findData.getCustomerId());
//				saveData.setOldReqRefNo(findData.getOldReqRefNo());
//				
//			}
//			
//			String productName =   getCompanyProductMasterDropdown(req.getCompanyId() , req.getProductId()); //productRepo.findByProductIdOrderByAmendIdDesc(Integer.valueOf(req.getProductId()));
//			String companyName =  getInscompanyMasterDropdown(req.getCompanyId()) ; // companyRepo.findByCompanyIdOrderByAmendIdDesc(req.getCompanyId());
//			
//			riskId = Integer.valueOf(req.getRiskId());				
//			saveData.setRiskId(riskId);
//			saveData.setCreatedBy(createdBy);
//			saveData.setOccupationType(riskId.toString());
//			saveData.setEntryDate(entryDate);
//			saveData.setUpdatedBy(req.getCreatedBy());
//			saveData.setUpdatedDate(new Date());
//			saveData.setRequestReferenceNo(refNo);
//			saveData.setStatus("Y");
//			saveData.setProductDesc(productName);
//			saveData.setCompanyName(companyName);
//			saveData.setSumInsured(req.getSumInsured()==null?new BigDecimal(0):new BigDecimal(req.getSumInsured()));
//			saveData.setSalaryPerAnnum(req.getSalaryPerAnnum()==null?new BigDecimal(0):new BigDecimal(req.getSalaryPerAnnum()));
//			saveData.setBenefitCoverMonth(req.getBenefitCoverMonth()==null?null : Integer.valueOf(req.getBenefitCoverMonth()));
//			saveData.setBrokerBranchCode(req.getBrokerBranchCode());
//			OccupationMaster occupationData = getOccupationMasterDropdown(req.getCompanyId() , req.getBranchCode() ,req.getOccupationType());
//			saveData.setCategoryId(occupationData.getCategoryId());
//			saveData.setOccupationDesc(occupationData.getOccupationName());
//		
//			repository.saveAndFlush(saveData);
//
//			// Building Section Insert
//			Long paccSecCount = eserSecRepo.countByRequestReferenceNoAndRiskId(refNo ,riskId);
//			if(paccSecCount>0 ) {
//				eserSecRepo.deleteByRequestReferenceNoAndRiskId(refNo ,riskId);
//			}
//			
//			EserviceSectionDetails secData = new EserviceSectionDetails(); 
//			String sectionName =  getProductSectionDropdown(req.getCompanyId() , req.getProductId(),req.getSectionId());// sectionRepo.findBySectionIdOrderByAmendIdDesc(Integer.valueOf(req.getSectionId())); 
//			
//			
//			dozerMapper.map(saveData, secData);
//			secData.setExchageRate(saveData.getExchangeRate());
//			secData.setCurrencyId(saveData.getCurrency());
//			secData.setSectionId(req.getSectionId());
//			secData.setSectionDesc(sectionName);
//			secData.setRiskId(saveData.getRiskId());
//			
//			eserSecRepo.saveAndFlush(secData);
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());

		}
		List<OneTimeTableRes> otResList = null;
		try {
			// One Time Table Thread Call
			OneTimeTableReq otReq = new OneTimeTableReq();
//			otReq.setRequestReferenceNo(saveData.getRequestReferenceNo());
//			otReq.setVehicleId(saveData.getRiskId());
//			otReq.setAgencyCode(saveData.getAgencyCode());
//			otReq.setBranchCode(saveData.getBranchCode());
//			otReq.setInsuranceId(saveData.getCompanyId());
//			otReq.setProductId(Integer.valueOf(saveData.getProductId()));
			List<String> sectionIds = new ArrayList<String>(); 
			sectionIds.add(req.getSectionId());
			otReq.setSectionIds(sectionIds);
			//	otReq.setSectionId(Integer.valueOf(buildingData.getSeSectionId()));

			// otReq.setBuildingDetails(buildingData);
			otResList = otService.call_OT_Insert(otReq);
			OneTimeTableRes otRes = otResList.get(0);
			res.setResponse("Saved Successfully");
 		//	res.setRequestReferenceNo(refNo);
 			res.setCustomerReferenceNo(req.getCustomerReferenceNo());
 			res.setRiskId(otRes.getVehicleId()) ;			 
			res.setAsRefNo(otRes.getVdRefNo());
			res.setCdRefNo(otRes.getCdRefNo());
			res.setMsrefno(otRes.getMsRefNo());
			res.setCompanyId(otRes.getCompanyId());
			res.setCreatedBy(req.getCreatedBy());
			res.setProductId(otRes.getProductId());
			res.setSectionId(otRes.getSectionId());
			
		} catch (Exception e) {
			e.printStackTrace();
		}

		return res;
	}
	
	@Override
	public EservicePaccGetRes getPersonalAccidentDetailsByRiskId(EservicePersonalAccGetById req) {
		EservicePaccGetRes res = new EservicePaccGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
//			EservicePersonalAccidentDetails data = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),
//					Integer.valueOf(req.getRiskId()));
//			res = mapper.map(data, EservicePaccGetRes.class);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	
	@Override
	public List<EservicePaccGetRes> getPersonalAccList(EservicePersonalAccGetById req) {
		List<EservicePaccGetRes> reslist = new ArrayList<EservicePaccGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
//			List<EservicePersonalAccidentDetails> datas = repository.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
//			
//			for (EservicePersonalAccidentDetails data : datas) {
//				EservicePaccGetRes res = new EservicePaccGetRes();
//				res = mapper.map(data, EservicePaccGetRes.class);
//				
//				reslist.add(res);
//			}
//			
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return reslist;
	}
	
	/*
	 * @Override public boolean delete(long id) { try { repository.deleteById(id);
	 * return true;
	 * 
	 * } catch (Exception ex) { log.error(ex); return false; } }
	 * 
	 */

}
