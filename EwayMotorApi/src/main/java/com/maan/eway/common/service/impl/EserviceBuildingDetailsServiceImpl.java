/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-11-18 ( Date ISO 2022-11-18 - Time 11:38:42 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.service.impl;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Tuple;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.BrokerCommissionDetails;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.EserviceBuildingDetails;
import com.maan.eway.bean.EserviceCommonDetails;
import com.maan.eway.bean.EserviceCustomerDetails;
import com.maan.eway.bean.EserviceSectionDetails;
import com.maan.eway.bean.ExchangeMaster;
import com.maan.eway.bean.IndustryMaster;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.LoginBranchMaster;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.bean.OccupationMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.bean.TrackingDetails;
import com.maan.eway.common.req.BuildDetailsGetByLocIdReq;
import com.maan.eway.common.req.BuildingSaveReq;
import com.maan.eway.common.req.BuldingDetailsGetReq;
import com.maan.eway.common.req.ExistingBuildingDetailsReq;
import com.maan.eway.common.req.OccupationReqClass;
import com.maan.eway.common.req.TrackingDetailsSaveReq;
import com.maan.eway.common.res.BuildingSectionRes;
import com.maan.eway.common.res.EserviceBuildingSaveRes;
import com.maan.eway.common.res.GetAllBuldingDetailsRes;
import com.maan.eway.common.res.GetBuildingDetailsRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.service.EserviceBuildingDetailsService;
import com.maan.eway.common.service.EserviceMotorDetailsService;
import com.maan.eway.error.Error;
import com.maan.eway.repository.CompanyProductMasterRepository;
import com.maan.eway.repository.EServiceBuildingDetailsRepository;
import com.maan.eway.repository.EServiceSectionDetailsRepository;
import com.maan.eway.repository.EserviceCommonDetailsRepository;
import com.maan.eway.repository.InsuranceCompanyMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.LoginBranchMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.repository.ProductSectionMasterRepository;
import com.maan.eway.req.OneTimeTableReq;
import com.maan.eway.res.OneTimeTableRes;
import com.maan.eway.service.OneTimeService;

/**
 * <h2>EserviceBuildingDetailsServiceimpl</h2>
 */
@Service
@Transactional
public class EserviceBuildingDetailsServiceImpl implements EserviceBuildingDetailsService {

	@Autowired
	private EServiceBuildingDetailsRepository repository;

	@Autowired
	private LoginMasterRepository loginRepo;

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private OneTimeService otService;

	@Autowired
	private CompanyProductMasterRepository productRepo;

	@Autowired
	private ProductSectionMasterRepository sectionRepo;

	@Autowired
	private InsuranceCompanyMasterRepository companyRepo;

	@Autowired
	private EServiceSectionDetailsRepository eserSecRepo;

	@Autowired
	private LoginBranchMasterRepository lbranchRepo;

	@Autowired
	private ListItemValueRepository listrepo;

	@Autowired
	private EserviceCommonDetailsRepository eserCommonRepo;

	@Autowired
	private GenerateSeqNoServiceImpl genSeqNoService;
	
	@Autowired
	private TrackingDetailsServiceImpl trackService ;
	
	private Logger log = LogManager.getLogger(EserviceBuildingDetailsServiceImpl.class);
	/*
	 * public EserviceBuildingDetailsServiceImpl(EserviceBuildingDetailsRepository
	 * repo) { this.repository = repo; }
	 * 
	 */

	@Override
	public EserviceBuildingDetails create(EserviceBuildingDetails d) {

		EserviceBuildingDetails entity;

		try {
			entity = repository.save(d);

		} catch (Exception ex) {
			log.error(ex);
			return null;
		}
		return entity;
	}

	@Override
	public EserviceBuildingDetails update(EserviceBuildingDetails d) {
		EserviceBuildingDetails c;

		try {
			c = repository.saveAndFlush(d);

		} catch (Exception ex) {
			log.error(ex);
			return null;
		}
		return c;
	}

	/*
	 * @Override public EserviceBuildingDetails getOne(long id) {
	 * EserviceBuildingDetails t;
	 * 
	 * try { t = repository.findById(id).orElse(null);
	 * 
	 * } catch (Exception ex) { log.error(ex); return null; } return t; }
	 * 
	 */
	@Override
	public List<EserviceBuildingDetails> getAll() {
		List<EserviceBuildingDetails> lst;

		try {
			lst = repository.findAll();

		} catch (Exception ex) {
			log.error(ex);
			return Collections.emptyList();
		}
		return lst;
	}

	@Override
	public long getTotal() {
		long total;

		try {
			total = repository.count();
		} catch (Exception ex) {
			log.error(ex);
			return 0;
		}
		return total;
	}

	@Override
	public List<Error> validateBuildingDetails(BuildingSaveReq req) {
		List<Error> error = new ArrayList<Error>();
		try {
			// Common Error
			List<Error> commonErrors = DomesticCommonValidation(req);
			if( commonErrors.size()>0 )
				error.addAll(commonErrors);
			
			List<Error> productErrors = new ArrayList<Error>(); 
			if(StringUtils.isNotBlank(req.getProductId()) ) {
				
				if("3".equalsIgnoreCase(req.getProductId()) ) 
					productErrors = BuildingProductValidation(req);
				if("19".equalsIgnoreCase(req.getProductId()) ) 
					productErrors = SmeProductValidation(req);
				if("1".equalsIgnoreCase(req.getProductId()) ) 
					productErrors = BurglaryProductValidation(req);
				
				error.addAll(productErrors);
			}
				
			
			
		}catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			error.add(new Error("19", "Common Error", e.getMessage()));
		}
		return error;
	}
	
	public List<Error> DomesticCommonValidation(BuildingSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {

			if (StringUtils.isBlank(req.getBranchCode())) {
				error.add(new Error("01", "BranchCode", "Please Enter BranchCode "));
			} else if (req.getBranchCode().length() > 20) {
				error.add(new Error("01", "Branch Code", "Please Enter Branch Code within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getAgencyCode())) {
				error.add(new Error("02", "Agency Code", "Please Enter AgencyCode "));
			} else if (req.getAgencyCode().length() > 20) {
				error.add(new Error("02", "Agency Code", "Please Enter Agency Code within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getProductId())) {
				error.add(new Error("03", "Product Id", "Please Enter ProductId "));
			} else if (req.getProductId().length() > 20) {
				error.add(new Error("03", "Product Id", "Please Enter Product Id within 20 Characters"));
			}

			if (req.getSectionId() == null || req.getSectionId().size() <= 0) {
				error.add(new Error("04", "SectionId", "Please Select Insurance Types"));
			}

			if (StringUtils.isBlank(req.getCompanyId())) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId "));
			} else if (req.getCompanyId().length() > 20) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId within 20 Characters"));
			}

			if (StringUtils.isBlank(req.getCurrency())) {
				error.add(new Error("10", "Currency", "Please Select Currency"));
			}
			if (StringUtils.isBlank(req.getExchangeRate())) {
				error.add(new Error("11", "ExchangeRate", "Please Enter ExchangeRate"));
			}
			
			if (req.getPolicyStartDate() == null) {
				error.add(new Error("13", "PolicyStartDate", "Please Enter PolicyStartDate"));
			}
			
			if (StringUtils.isBlank(req.getHavepromocode())) {
				error.add(new Error("46", "Havepromocode", "Please Enter Havepromocode"));
			}
			if( (StringUtils.isNotBlank(req.getHavepromocode()))
					&& req.getHavepromocode().equalsIgnoreCase("Y")) {
				if (StringUtils.isBlank(req.getPromocode())) {
					error.add(new Error("47", "Promocode", "Please Enter Promocode"));
				}
			}
			
			if (req.getPolicyEndDate() == null) {
				error.add(new Error("14", "PolicyEndDate", "Please Enter PolicyEndDate"));

			} else if (req.getPolicyStartDate() != null && req.getPolicyEndDate() != null) {
				if (req.getPolicyEndDate().equals(req.getPolicyStartDate())
						|| req.getPolicyEndDate().before(req.getPolicyStartDate())) {
					error.add(new Error("14", "PolicyEndDate", "PolicyEndDate Before PolicyStartDate Not Allowed"));
				}
			}
			
			// Source Validation
			if( req.getUserType().equalsIgnoreCase("Issuer") && ( req.getSubUserType().equalsIgnoreCase("low") || req.getSubUserType().equalsIgnoreCase("high")
					|| req.getSubUserType().equalsIgnoreCase("both") ) )  {
				if (StringUtils.isBlank(req.getSourceType())) {
					error.add(new Error("10", "SourceType", "Please Select SourceType"));
				} 
				if (StringUtils.isBlank(req.getCustomerCode())) {
					error.add(new Error("10", "CustomerCode", "Please Select CustomerCode"));
				}
				if (StringUtils.isBlank(req.getBrokerCode())) {
					error.add(new Error("10", "SourceCode", "Please Select SourceCode"));
				}
		
			}
			
			if(StringUtils.isNotBlank(req.getSourceType()) && (! req.getSourceType().equalsIgnoreCase("Direct") ) ) {
				if (StringUtils.isBlank(req.getBrokerBranchCode())) {
					error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
				}
			} else if(req.getUserType().equalsIgnoreCase("User") || req.getUserType().equalsIgnoreCase("Broker") ) {
				if (StringUtils.isBlank(req.getBrokerBranchCode())) {
					error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
				}
				
				if (StringUtils.isBlank(req.getBrokerCode())) {
					error.add(new Error("10", "SourceCode", "Please Select BrokerCode"));
				}
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {

				if (StringUtils.isBlank(req.getApplicationId())) {
					error.add(new Error("17", "ApplicationId", "Please Enter ApplicationId"));
				}

				if (StringUtils.isBlank(req.getLoginId())) {
					error.add(new Error("18", "Login Id", "Please Enter LoginId"));
				} else {
					LoginMaster loginData = loginRepo.findByLoginId(req.getCreatedBy());
					if (loginData.getSubUserType().equalsIgnoreCase("bank")) {
						if (StringUtils.isBlank(req.getAcExecutiveId())) {
							error.add(new Error("19", "AcExecutiveId", "Please Select AcExecutiveId"));
						}
					}
				}
			}

			

		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			error.add(new Error("19", "Common Error", e.getMessage()));
		}
		return error;
	}
	
	public List<Error> BuildingProductValidation(BuildingSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			// For Domestic Product
			// Setion ids
			List<String> buildingSectionId = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("1"))
					.collect(Collectors.toList());
			List<String> allRiskSectionId = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("3"))
					.collect(Collectors.toList());
			List<String> paAccidentSectionId = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("35"))
					.collect(Collectors.toList());
			List<String> paIntemeditySectionId = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("36"))
					.collect(Collectors.toList());
			List<String> contentSectionId = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("47"))
					.collect(Collectors.toList());
			List<String> workmenCompensationSectionId = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("48"))
					.collect(Collectors.toList());

			if (buildingSectionId.size() > 0) {
				if (StringUtils.isBlank(req.getBuildingUsageId())) {
					error.add(new Error("32", "BuidingUsageId", "Please Select Building Usage Id"));
				}

				int year = Calendar.getInstance().get(Calendar.YEAR);

				if (StringUtils.isNotBlank(req.getBuildingBuildYear())) {
					Integer year1 = Integer.valueOf(req.getBuildingBuildYear());
					Integer diff = year - year1;
					 if ((StringUtils.isNotBlank(req.getBuildingBuildYear())
							&& !req.getBuildingBuildYear().matches("[0-9]+"))
							|| req.getBuildingBuildYear().length() > 4) {
						error.add(new Error("33", "BuildingBuildYear",
								"Please Enter Building Build Year Format in YYYY"));
					} else if ((StringUtils.isNotBlank(req.getBuildingBuildYear())
							&& !req.getBuildingBuildYear().matches("[0-9]+"))
							|| req.getBuildingBuildYear().length() < 4) {
						error.add(new Error("33", "BuildingBuildYear",
								"Please Enter Building Build Year Format in YYYY"));
					}
					else if (StringUtils.isNotBlank(req.getBuildingBuildYear())){
						if(year1>year) {
							error.add(new Error("33", "BuildingBuildYear",
									"Please Enter Building Build Year as Past Year"));
						}
						else if(diff>100) {
							error.add(new Error("33", "BuildingBuildYear",
									"Please Enter Building Build Year within 100 years"));
								
						}
					}
				}
				if (StringUtils.isNotBlank(req.getBuildingFloors())) {
					 if ((!req.getBuildingFloors().matches("[0-9]+")) || req.getBuildingFloors().length() > 3) {
							error.add(new Error("34", "BuildingFloors", "Please Enter Valid Number In Building Floors"));
						} else if (Double.valueOf(req.getBuildingFloors()) < 0   ) {
							error.add(new Error("34", "BuildingFloors", "Please Enter Valid Number In Building Floors"));
					}
					
				} 

				if (StringUtils.isBlank(req.getCurrency())) {
					error.add(new Error("41", "Currency", "Please Select Currency"));
				}
				if (StringUtils.isBlank(req.getExchangeRate())) {
					error.add(new Error("42", "ExchangeRate", "Please Select ExchangeRate"));
				}else if(Double.valueOf(req.getExchangeRate())<=0D) {
					error.add(new Error("42", "ExchangeRate", "ExchangeRate Should not be Zero"));
				}else
				 {
					Tuple minMax =   getMinMaxRate(req.getCurrency(),req.getCompanyId());
					if(minMax !=null ) {
						
						Double exRate=Double.valueOf(minMax.get("exchangeRate")==null?"0" : minMax.get("exchangeRate").toString());
						Double minRate=Double.valueOf(minMax.get("minDiscount")==null?"0" : minMax.get("minDiscount").toString());
						Double maxRate=Double.valueOf(minMax.get("maxLoading")==null?"0" :minMax.get("maxLoading").toString());
						minRate=exRate-(exRate*minRate/100);
						maxRate=exRate+(exRate*maxRate/100);
						if(Double.valueOf(req.getExchangeRate())<=minRate || Double.valueOf( req.getExchangeRate())>=maxRate ){
						error.add(new Error("42", "ExchangeRate", "This Exchange Rate Should Between "+minRate +" And "+maxRate));
						}
					}
				 }

				if ((StringUtils.isBlank(req.getBuildingOwnerYn()))||req.getBuildingOwnerYn()==null) {
					error.add(new Error("37", "BuildingOwnerYn", "Please Select BuildingOwnerYn"));
				} else if ((StringUtils.isNotBlank(req.getBuildingOwnerYn()))
						&& req.getBuildingOwnerYn().equalsIgnoreCase("Y")) {
					if (StringUtils.isBlank(req.getBuildingSuminsured())) {
						error.add(new Error("35", "BuildingSuminsured", "Please Enter BuildingSuminsured"));
					} else if (!req.getBuildingSuminsured().matches("[0-9.]+")) {
						error.add(new Error("35", "BuildingSuminsured",
								"Please Enter Valid Number In BuildingSuminsured"));
					}


					Double a1 = StringUtils.isBlank(req.getBuildingSuminsured()) ? 0
							: Double.valueOf(req.getBuildingSuminsured());
					Double b1 = a1 / 2;
					Double c1 = StringUtils.isBlank(req.getContentSuminsured()) ? 0
							: Double.valueOf(req.getContentSuminsured());
					if (StringUtils.isNotBlank(req.getContentSuminsured())) {
						if (!req.getContentSuminsured().matches("[0-9.]+")) {
							error.add(new Error("38", "ContentSuminsured",
									"Please Enter Valid Number In Content Suminsured"));
						} 


					}

					if (  StringUtils.isNotBlank(req.getBuildingSuminsured())  && req.getBuildingSuminsured().matches("[0-9.]+")  ) {
						if (StringUtils.isNotBlank(req.getContentSuminsured()) && c1 > b1) {
							error.add(new Error("38", "ContentSuminsured",
									"Content Suminsured Should not be greater than 50 % of BuildingSuminsured"));

						}
					
					}
				}

			}

			if (allRiskSectionId.size() > 0) {
				Double d1 = 0D;
				Double e1 = 0D;
				if (StringUtils.isBlank(req.getAllriskSuminsured())) {
					error.add(new Error("35", "AllriskSuminsured", "Please Enter AllriskSuminsured"));
				} 
				if (StringUtils.isNotBlank(req.getAllriskSuminsured())) {
					if(!req.getAllriskSuminsured().matches("[0-9.]+")) {
					error.add(
							new Error("35", "AllriskSuminsured", "Please Enter Valid Number In AllriskSuminsured"));
				}
				}
				else if ((StringUtils.isNotBlank(req.getAllriskSuminsured()))
						&&req.getAllriskSuminsured().equalsIgnoreCase("0")) {
					error.add(new Error("35", "AllriskSuminsured",
							"Please Enter  AllriskSuminsured above zero"));
				}
				else if (StringUtils.isNotBlank(req.getBuildingOwnerYn())
						&& req.getBuildingOwnerYn().equalsIgnoreCase("N")) {

					d1 = Double.valueOf(req.getAllriskSuminsured());
					Double c1 = StringUtils.isBlank(req.getContentSuminsured()) ? 0
							: req.getContentSuminsured().matches("[0-9.]+") ? 0
									: Double.valueOf(req.getContentSuminsured());
					e1 = c1 / 2;
					if (StringUtils.isNotBlank(req.getAllriskSuminsured())) {
						if (!req.getAllriskSuminsured().matches("[0-9.]+")) {
							error.add(new Error("20", "AllriskSuminsured",
									"Please Enter Valid Number In Allrisk Suminsured"));
						} else if (StringUtils.isNotBlank(req.getAllriskSuminsured()) && e1 > d1) {
							error.add(new Error("20", "AllriskSuminsured",
									"AllriskSuminsured Should not be greater than 50 % of Content Sumisured"));
						} else if ((StringUtils.isNotBlank(req.getAllriskSuminsured()))
								&&req.getAllriskSuminsured().equalsIgnoreCase("0")) {
							error.add(new Error("20", "AllriskSuminsured",
									"Please Enter  AllriskSuminsured above zero"));
						}

					}
					
					
				}
			}

			if (paAccidentSectionId.size()>0 ) {
				if (StringUtils.isBlank(req.getOccupationType())) {
					error.add(new Error("37", "OccupationType", "Please Select OccupationType"));
				} 
	
				if (StringUtils.isBlank(req.getPersonalAccSuminsured())) {
					error.add(new Error("37", "Personal Accident", "Please Enter Personal Accident Suminsured"));
				} else if (! req.getPersonalAccSuminsured().matches("[0-9.]+")) {
					error.add(new Error("37", "Personal Accident", "Please Enter Valid Number In Personal Accident Suminsured"));
				}
				else if ((StringUtils.isNotBlank(req.getPersonalAccSuminsured()))
						&&req.getPersonalAccSuminsured().equalsIgnoreCase("0")) {
					error.add(new Error("37", "Personal Accident",
							"Please Enter  Personal Accident above zero"));
				}
			}
			
		
			if (paIntemeditySectionId.size() > 0) {
				
				if (StringUtils.isBlank(req.getLiabilityOccupationId())) {
					error.add(new Error("35", "PersonalLiabilityOccupation ",
							"Please Enter Personal Liability Occupation"));
				}
				if (StringUtils.isBlank(req.getPersonalIntermediarySuminsured())) {
					error.add(new Error("35", "PersonalIntermediarySuminsured",
							"Please Enter Personal Liability Occupation"));
				} else if (!req.getPersonalIntermediarySuminsured().matches("[0-9.]+")) {
					error.add(new Error("35", "Personal Liability Occupation",
							"Please Enter Valid Number In Personal Liability Occupation"));
				} else if (StringUtils.isNotBlank(req.getPersonalIntermediarySuminsured())
						&& req.getPersonalIntermediarySuminsured().equalsIgnoreCase("0")) {
					error.add(new Error("35", "Personal Liability Occupation",
							"Please Enter  Personal Liability Occupation above zero"));
				}
			}

			if (contentSectionId.size() > 0) {

				if (StringUtils.isBlank(req.getContentSuminsured())) {
					error.add(new Error("39", "ContentSuminsured",
							"Please Enter Content Suminsured"));
				} else if (!req.getContentSuminsured().matches("[0-9.]+")) {
					error.add(new Error("39", "ContentSuminsured",
							"Please Enter Valid Number In ContentSuminsured"));
				} else if (StringUtils.isNotBlank(req.getContentSuminsured())
						&& req.getContentSuminsured().equalsIgnoreCase("0")) {
					error.add(new Error("35", "ContentSuminsured",
							"Please Enter  ContentSuminsured above zero"));
				}
			}

			if (workmenCompensationSectionId.size() > 0) {

				if (StringUtils.isBlank(req.getWorkmenCompSuminsured())) {
					error.add(new Error("40", "WorkmenCompensationSuminsured",
							"Please Enter WorkmenCompensation Suminsured"));
				} else if (!req.getWorkmenCompSuminsured().matches("[0-9.]+")) {
					error.add(new Error("40", "WorkmenCompensationSuminsured",
							"Please Enter Valid Number In WorkmenCompensationSuminsured"));
				} else if (StringUtils.isNotBlank(req.getWorkmenCompSuminsured())
						&& req.getWorkmenCompSuminsured().equalsIgnoreCase("0")) {
					error.add(new Error("40", "WorkmenCompensationSuminsured",
							"Please Enter  WorkmenCompensationSuminsured above zero"));
				}
			}
			

		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			error.add(new Error("19", "Common Error", e.getMessage()));
		}
		return error;
	}
	
	public List<Error> SmeProductValidation(BuildingSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			// Setion ids
			List<String> accidentalDamage = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("56")).collect(Collectors.toList());
			List<String> allRisk = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("3")).collect(Collectors.toList());
			List<String> burglaryAndHouse = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("52")).collect(Collectors.toList());
			List<String> content = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("47")).collect(Collectors.toList());
			List<String> equpimentbreakdown = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("39")).collect(Collectors.toList());
			List<String> employersLiability = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("45")).collect(Collectors.toList());
			List<String> fidelityGuaranty = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("43")).collect(Collectors.toList());
			List<String> fireandperils = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("40")).collect(Collectors.toList());
			List<String> machineryBreakdown = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("41")).collect(Collectors.toList());
			List<String> money = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("42")).collect(Collectors.toList());
			List<String> plateGlass = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("53")).collect(Collectors.toList());
			List<String> publicLiabilty = req.getSectionId().stream().filter(o -> o.equalsIgnoreCase("54")).collect(Collectors.toList());
		
			
			// Accident Damage Section 
			if (accidentalDamage.size() > 0 ) {
				
				if(StringUtils.isBlank(req.getAccDamageSi()) ) {
					error.add(new Error("35", "AccDamageSi","Please Enter Accidental Damage Suminsured"));
				}else if( !req.getAccDamageSi().matches("[0-9.]+")) {
					error.add(new Error("35", "AccDamageSi","Please Enter Valid Number In Accidental Damage Suminsured"));
				} else if( Double.valueOf(req.getAccDamageSi()) <= 0) {
					error.add(new Error("35", "AccDamageSi","Please Enter  Accidental Damage Suminsured Above Zero"));
				}
			}

			// All Risk Section
			if (allRisk.size() > 0 && StringUtils.isNotBlank(req.getAllriskSuminsured()) ) {
				if(StringUtils.isBlank(req.getAllriskSuminsured()) ) {
					error.add(new Error("35", "AllriskSuminsured","Please Enter All Risk Suminsured"));
				} else if( !req.getAllriskSuminsured().matches("[0-9.]+")) {
					error.add(new Error("35", "AllriskSuminsured","Please Enter Valid Number In All Risk Suminsured"));
					
				} else if( Double.valueOf(req.getAllriskSuminsured()) <= 0) {
					error.add(new Error("35", "AllriskSuminsured","Please Enter  All Risk Suminsured Above Zero"));
				}
			}
			
			// Burglary And House Breaking Section 
			if (burglaryAndHouse.size() > 0) {

				if (StringUtils.isBlank(req.getBurglarySi())) {
					error.add(new Error("01", "FirstLossPercent",  "Please Enter Burglary SumInsured"));
				} else if (! req.getBurglarySi().matches("[0-9.]+") ) {
					error.add(new Error("01", "BurglarySi",  "Please Enter Valid Number in Burglary SumInsured"));
				} else if ( Double.valueOf(req.getBurglarySi()) <=0 ) {
					error.add(new Error("01", "BurglarySi",  "Please Enter  Burglary SumInsured Above Zero"));
				}
				
				if (StringUtils.isBlank(req.getFirstLossPercentId())) {
					error.add(new Error("01", "FirstLossPercentId",  "Please Select First Loss Percent Id"));
				} 
				/*
				else if (! req.getFirstLossPercent().matches("[0-9.]+") ) {
						error.add(new Error("01", "FirstLossPercent",  "Please Enter Valid Number in First Loss Percent"));
				 } else if ( Double.valueOf(req.getFirstLossPercent()) <=0 ) {
						error.add(new Error("01", "FirstLossPercent",  "Please Enter  First Loss Percent Above Zero"));
				 } 
				*/

			}
			
			// Content Section
			if (content.size() > 0) {

				if (StringUtils.isBlank(req.getContentSuminsured())) {
					error.add(new Error("39", "ContentSuminsured",	"Please Enter Content Suminsured"));
				} else if (!req.getContentSuminsured().matches("[0-9.]+")) {
					error.add(new Error("39", "ContentSuminsured","Please Enter Valid Number In Content Suminsured"));
				} else if (Double.valueOf(req.getContentSuminsured()) < 0) {
					error.add(new Error("35", "ContentSuminsured","Please Enter  ContentSuminsured above zero"));
				}
			}
			
			// Equipment Breakdown Section 
			if (equpimentbreakdown.size() > 0) {

				if (StringUtils.isBlank(req.getElecEquipSuminsured())) {
					error.add(new Error("40", "ElecEquipSuminsured", "Please Enter Electronic Equipment Suminsured"));
				} else if (!req.getElecEquipSuminsured().matches("[0-9.]+")) {
					error.add(new Error("40", "ElecEquipSuminsured","Please Enter Valid Number In Electronic Equipment Suminsured"));
				} else if (Double.valueOf(req.getElecEquipSuminsured()) < 0) {
					error.add(new Error("40", "ElecEquipSuminsured", "Please Enter  Electronic Equipment Suminsured Above Zero"));
				}

			}
			
			// Employers liability Section
			if (employersLiability.size() > 0) {

				if (StringUtils.isBlank(req.getEmpLiabilitySi())) {
					error.add(new Error("44", "Employers Liability Suminsured", "Please Enter Employers Liability Suminsured"));
				} else if (!req.getEmpLiabilitySi().matches("[0-9.]+")) {
					error.add(new Error("44", "Employers Liability Suminsured","Please Enter Valid Number In Employers Liability Suminsured"));
				} else if (Double.valueOf(req.getEmpLiabilitySi()) < 0) {
					error.add(new Error("44", "Employers Liability Suminsured", "Please Enter  Employers Liability Suminsured Above Zero"));
				}
				
				if (StringUtils.isBlank(req.getLiabilityOccupationId())) {
					error.add(new Error("44", "LiabilityOccupationId", "Please Select Employers Liability Occupation"));
				} else if (!req.getLiabilityOccupationId().matches("[0-9.]+")) {
					error.add(new Error("44", "LiabilityOccupationId","Please Enter Valid Number In Employers Liability Occupation"));
				}
				
				if (StringUtils.isBlank(req.getTotalNoOfEmployees())) {
					error.add(new Error("44", "TotalNoOfEmployees", "Please Select Total No Of Employers"));
				} else if (!req.getTotalNoOfEmployees().matches("[0-9.]+")) {
					error.add(new Error("44", "TotalNoOfEmployees","Please Enter Valid Number In Total No Of Employers"));
				}
				
			}				
			
			// Fidelity Guaranty Section
			if (fidelityGuaranty.size() > 0) {

				if (StringUtils.isBlank(req.getFidEmpSi())) {
					error.add(new Error("44", "Fidelity Employees Suminsured", "Please Enter Fidelity Employees Suminsured"));
				} else if (!req.getLiabilitySi().matches("[0-9.]+")) {
					error.add(new Error("44", "Fidelity Employees Suminsured","Please Enter Valid Number In Fidelity Employees Suminsured"));
				} else if (Double.valueOf(req.getFidEmpSi()) < 0) {
					error.add(new Error("44", "Fidelity Employees Suminsured", "Please Enter  Fidelity Employees Suminsured Above Zero"));
				}
				
				if (StringUtils.isBlank(req.getFidEmpCount())) {
					error.add(new Error("44", "FidEmpCount", "Please Enter Fidelity Employee Count"));
				} else if (!req.getFidEmpCount().matches("[0-9.]+")) {
					error.add(new Error("44", "FidEmpCount","Please Enter Valid Number In Fidelity Employee Count"));
				} else if (Double.valueOf(req.getFidEmpCount()) < 0) {
					error.add(new Error("44", "FidEmpCount", "Please Enter  Fidelity Employee Count Above Zero"));
				}
				
			}
			
			// Fire And Perils Section (Building)
			if ((StringUtils.isBlank(req.getBuildingOwnerYn()))||req.getBuildingOwnerYn()==null) {
				error.add(new Error("37", "BuildingOwnerYn", "Please Select BuildingOwnerYn"));
			} else if ((StringUtils.isNotBlank(req.getBuildingOwnerYn()))	&& req.getBuildingOwnerYn().equalsIgnoreCase("Y")) {
				if ( fireandperils.size() > 0 && StringUtils.isBlank(req.getBuildingSuminsured())) {
					error.add(new Error("35", "BuildingSuminsured", "Please Enter BuildingSuminsured"));
				} else if (fireandperils.size() > 0 && !req.getBuildingSuminsured().matches("[0-9.]+")) {
					error.add(new Error("35", "BuildingSuminsured","Please Enter Valid Number In BuildingSuminsured"));
				}

			}
			
			// Machinery Breakdown Section
			if (machineryBreakdown.size() > 0) {

				if (StringUtils.isNotBlank(req.getPowerPlantSi())) {
					if (!req.getPowerPlantSi().matches("[0-9.]+")) {
						error.add(new Error("44", "Power Plant Suminsured","Please Enter Valid Number In Power Plant Suminsured"));
					}
				} 

				if (StringUtils.isNotBlank(req.getElecMachinesSi())) {
					 if (!req.getElecMachinesSi().matches("[0-9.]+")) {
							error.add(new Error("44", "ElecMachinesSi","Please Enter Valid Number In Electical Machines Suminsured"));
					}
				} 
				
				if (StringUtils.isNotBlank(req.getEquipmentSi())) {
					if (!req.getEquipmentSi().matches("[0-9.]+")) {
						error.add(new Error("44", "EquipmentSi","Please Enter Valid Number In Equipments Suminsured"));
					}
				} 
				
				if (StringUtils.isNotBlank(req.getGeneralMachineSi())) {
					if (!req.getGeneralMachineSi().matches("[0-9.]+")) {
						error.add(new Error("44", "GeneralMachineSi","Please Enter Valid Number In General Machines Suminsured"));
					}
				}
				
				if (StringUtils.isNotBlank(req.getManuUnitsSi())) {
					if (!req.getManuUnitsSi().matches("[0-9.]+")) {
						error.add(new Error("44", "ManuUnitsSi","Please Enter Valid Number In Manufacturing Units Suminsured"));
					}
				}
				
				if (StringUtils.isNotBlank(req.getBoilerPlantsSi())) {
					if (!req.getBoilerPlantsSi().matches("[0-9.]+")) {
						error.add(new Error("44", "BoilerPlantsSi","Please Enter Valid Number In Boiler And Pressure Plants Suminsured"));
					}
				}
				
				if (StringUtils.isNotBlank(req.getMachineEquipSi())) {
					if (!req.getMachineEquipSi().matches("[0-9.]+")) {
						error.add(new Error("44", "MachineEquipSi","Please Enter Valid Number In Machines Electronic Equipment Suminsured"));
					}
				}
				
			}

			// Money Section
			if (money.size() > 0) {
				
				if (StringUtils.isNotBlank(req.getCashInHandDirectors())) {
					 if (!req.getCashInHandDirectors().matches("[0-9.]+")) {
						 error.add(new Error("41", "CashInHandDirectors",	"Please Enter Valid Number In Cash in hands Of directors"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getCashInTransit())) {
					 if (!req.getCashInTransit().matches("[0-9.]+")) {
						 error.add(new Error("41", "CashInTransit",	"Please Enter Valid Number In Cash in transit"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getCashInHandEmployees())) {
					 if (!req.getCashInHandEmployees().matches("[0-9.]+")) {
						 error.add(new Error("41", "CashInHandEmployees",	"Please Enter Valid Number In Cash in hands of authorized employees"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getCashInSafe())) {
					 if (!req.getCashInSafe().matches("[0-9.]+")) {
						 error.add(new Error("41", "CashInSafe",	"Please Enter Valid Number In Cash in safe"));
					 }
				}
			
				if (StringUtils.isNotBlank(req.getCashInPremises())) {
					 if (!req.getCashInPremises().matches("[0-9.]+")) {
						 error.add(new Error("41", "CashInPremises",	"Please Enter Valid Number In Cash in premises"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getMoneyAnnualcarrySuminsured())) {
					 if (!req.getMoneyAnnualcarrySuminsured().matches("[0-9.]+")) {
						 error.add(new Error("41", "MoneyAnnualcarrySuminsured",	"Please Enter Valid Number In Estimated annual carry"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getRevenueFromStamps())) {
					 if (!req.getRevenueFromStamps().matches("[0-9.]+")) {
						 error.add(new Error("41", "RevenueFromStamps",	"Please Enter Valid Number In Revenue from stamps"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getMoneyInSafeBusiness())) {
					 if (!req.getMoneyInSafeBusiness().matches("[0-9.]+")) {
						 error.add(new Error("41", "MoneyInSafeBusiness",	"Please Enter Valid Number In Money  in safe during business hours"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getMoneyOutSafeBusiness())) {
					 if (!req.getMoneyOutSafeBusiness().matches("[0-9.]+")) {
						 error.add(new Error("41", "MoneyOutSafeBusiness",	"Please Enter Valid Number In Money  out of safe during business hours"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getMoneyInPremises())) {
					 if (!req.getMoneyInPremises().matches("[0-9.]+")) {
						 error.add(new Error("41", "MoneyInPremises",	"Please Enter Valid Number In Money in premises out of business hours in safe"));
					 }
				}
				
				if (StringUtils.isNotBlank(req.getMoneyInLocker())) {
					 if (!req.getMoneyInLocker().matches("[0-9.]+")) {
						 error.add(new Error("41", "MoneyInLocker",	"Please Enter Valid Number In Money in locked drawers"));
					 }
				}

			}
			
			// Plate Glass Section
			if (plateGlass.size() > 0) {

				if (StringUtils.isBlank(req.getPlateGlassSi())) {
					error.add(new Error("44", "PlateGlassSi", "Please Enter Plate Glass Suminsured"));
				} else if (!req.getPlateGlassSi().matches("[0-9.]+")) {
					error.add(new Error("44", "PlateGlassSi","Please Enter Valid Number In Plate Glass Suminsured"));
				} else if (Double.valueOf(req.getPlateGlassSi()) < 0) {
					error.add(new Error("44", "PlateGlassSi", "Please Enter  Plate Glass Suminsured Above Zero"));
				}
				
			}

			// Public Liability Section
			if (publicLiabilty.size() > 0) {

				if (StringUtils.isBlank(req.getLiabilitySi())) {
					error.add(new Error("44", "LiabilitySi", "Please Enter Public Liability Suminsured"));
				} else if (!req.getLiabilitySi().matches("[0-9.]+")) {
					error.add(new Error("44", "LiabilitySi","Please Enter Valid Number In Public Liability Suminsured"));
				} else if (Double.valueOf(req.getLiabilitySi()) < 0) {
					error.add(new Error("44", "LiabilitySi", "Please Enter  Public Liability Suminsured Above Zero"));
				}
				
			}
			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
			error.add(new Error("19", "Common Error", e.getMessage()));
		}
		return error;
	}
	
	public List<Error> BurglaryProductValidation(BuildingSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {
			
			
			
			// Check Box 
			if (req.getInsuranceForId()==null ||  req.getInsuranceForId().size() <= 0 )  {
				error.add(new Error("01", "InsuranceFor", "Please Select Altleast any one in Insurance For"));
			}
			
			// Factor DropDowns
			if (StringUtils.isBlank(req.getNatureOfTradeId())) {
				error.add(new Error("01", "NatureOfTradeId", "Please Select Nature Of Trade"));
			} else if (! req.getNatureOfTradeId().matches("[0-9]+") ) {
				error.add(new Error("01", "Branch Code",  "Please Select Valid Id in  Nature Of Trade"));
			}
			
			if (StringUtils.isBlank(req.getIndustryId())) {
				error.add(new Error("01", "Industry", "Please Select Industry"));
			} else if (! req.getIndustryId().matches("[0-9]+") ) {
				error.add(new Error("01", "Industry",  "Please Select Valid Id in Industry"));
			}
			
			if (StringUtils.isNotBlank(req.getWallType())) {
				if (! req.getWallType().matches("[0-9]+") ) {
					error.add(new Error("01", "WallType",  "Please Select Valid Id in External Wall Type"));
				}
			} 
			
			if (StringUtils.isNotBlank(req.getInternalWallType())) {
				 if (! req.getInternalWallType().matches("[0-9]+") ) {
						error.add(new Error("01", "InternalWallType",  "Please Select Valid Id in Internal Wall Type"));
				}
			} 
			
			if (StringUtils.isNotBlank(req.getRoofType())) {
				 if (! req.getRoofType().matches("[0-9]+") ) {
						error.add(new Error("01", "RoofType",  "Please Select Valid Id in Roof Type"));
				}
			} 
			
			if (StringUtils.isNotBlank(req.getCeilingType())) {
				 if (! req.getCeilingType().matches("[0-9]+") ) {
						error.add(new Error("01", "CeilingType",  "Please Select Valid Id in Ceiling Type"));
				}
			} 

			if (StringUtils.isNotBlank(req.getFirstLossPercentId())) {
				 if (! req.getFirstLossPercentId().matches("[0-9]+") ) {
						error.add(new Error("01", "First Loss Percent Id",  "Please Select Valid Id in First Loss Percent Id"));
				}
			}
			// Sum Insured
			if (StringUtils.isNotBlank(req.getStockInTradeSi())) {
				 if (! req.getStockInTradeSi().matches("[0-9.]+") ) {
						error.add(new Error("01", "StockInTradeSi",  "Please Enter Valid Number in Stock In Trade SumInsured"));
				 } else if ( Double.valueOf(req.getStockInTradeSi()) <=0 ) {
						error.add(new Error("01", "StockInTradeSi",  "Greater Then Zero Only Allowed In Stock In Trade SumInsured"));
				 } 
			} 
			
			if (StringUtils.isNotBlank(req.getGoodsSi())) {
				 if (! req.getGoodsSi().matches("[0-9.]+") ) {
						error.add(new Error("01", "GoodsSi",  "Please Enter Valid Number in o	Goods in Trust  SumInsured"));
				 } else if ( Double.valueOf(req.getGoodsSi()) <=0 ) {
						error.add(new Error("01", "StockInTradeSi",  "Greater Then Zero Only Allowed In Goods in Trust  SumInsured"));
				 } 
			}
			
			if (StringUtils.isNotBlank(req.getFurnitureSi())) {
				 if (! req.getFurnitureSi().matches("[0-9.]+") ) {
						error.add(new Error("01", "FurnitureSi",  "Please Enter Valid Number in Furniture Fixtures SumInsured"));
				 } else if ( Double.valueOf(req.getFurnitureSi()) <=0 ) {
						error.add(new Error("01", "FurnitureSi",  "Greater Then Zero Only Allowed Furniture Fixtures SumInsured"));
				 } 
			}
			
			if (StringUtils.isNotBlank(req.getApplianceSi())) {
				 if (! req.getApplianceSi().matches("[0-9.]+") ) {
						error.add(new Error("01", "ApplianceSi",  "Please Enter Valid Number in Business Plan & Appliances SumInsured"));
				 } else if ( Double.valueOf(req.getApplianceSi()) <=0 ) {
						error.add(new Error("01", "ApplianceSi",  "Greater Then Zero Only Allowed Business Plan & Appliances SumInsured"));
				 } 
			}
			
			if (StringUtils.isNotBlank(req.getCashValueablesSi())) {
				 if (! req.getCashValueablesSi().matches("[0-9.]+") ) {
						error.add(new Error("01", "CashValueablesSi",  "Please Enter Valid Number in Cash or Valuables SumInsured"));
				 } else if ( Double.valueOf(req.getCashValueablesSi()) <=0 ) {
						error.add(new Error("01", "CashValueablesSi",  "Greater Then Zero Only Allowed Cash or Valuables SumInsured"));
				 } 
			}

			// Other DroPDowns
			if (StringUtils.isNotBlank(req.getRegionCode())) {
				 if (! req.getRegionCode().matches("[0-9]+") ) {
						error.add(new Error("01", "RegionCode",  "Please Select Valid Id in RegionCode"));
				}
			}
			
			if (StringUtils.isNotBlank(req.getDistrictCode())) {
				if (! req.getDistrictCode().matches("[0-9]+") ) {
						error.add(new Error("01", "DistrictCode",  "Please Select Valid Id in DistrictCode"));
				}
			}

			// Address
			if (StringUtils.isNotBlank(req.getAddress())) {
				if (req.getAddress().length()> 300 ) {
						error.add(new Error("01", "Address",  "Address must be Under 300 Charecter Only Allowed"));
				}
			} 
			
			
			if (StringUtils.isBlank(req.getBuildingOwnerYn())) {
				error.add(new Error("01", "BuildingOwnerYn",  "Please Select Owner / Tenant"));
			}
			
			int year = Calendar.getInstance().get(Calendar.YEAR);
			int buildyear = 0 ;
			if (StringUtils.isNotBlank(req.getBuildingBuildYear())) {
				Integer year1 = Integer.valueOf(req.getBuildingBuildYear());
				Integer diff = year - year1;
				 if ((StringUtils.isNotBlank(req.getBuildingBuildYear()) && !req.getBuildingBuildYear().matches("[0-9]+")) || req.getBuildingBuildYear().length() > 4) {
					error.add(new Error("33", "BuildingBuildYear", "Please Enter Building Build Year Format in YYYY"));
				} else if ((StringUtils.isNotBlank(req.getBuildingBuildYear()) && !req.getBuildingBuildYear().matches("[0-9]+")) || req.getBuildingBuildYear().length() < 4) {
					error.add(new Error("33", "BuildingBuildYear", "Please Enter Building Build Year Format in YYYY"));
				}
				else if (StringUtils.isNotBlank(req.getBuildingBuildYear())){
					if(year1>year) {
						error.add(new Error("33", "BuildingBuildYear","Please Enter Building Build Year as Past Year"));
					}
					else if(diff>100) {
						error.add(new Error("33", "BuildingBuildYear","Please Enter Building Build Year within 100 years"));
							
					} else {
						buildyear = diff ;
					}
				}
			}
			
			if (StringUtils.isNotBlank(req.getOccupiedYear())) {
				Integer year1 = Integer.valueOf(req.getOccupiedYear());
				Integer diff = year - year1;
				 if ((StringUtils.isNotBlank(req.getOccupiedYear()) && !req.getOccupiedYear().matches("[0-9]+")) || req.getOccupiedYear().length() > 4) {
					error.add(new Error("33", "OccupiedYear", "Please Enter Building Occupied Year Format in YYYY"));
				} else if ((StringUtils.isNotBlank(req.getOccupiedYear()) && !req.getOccupiedYear().matches("[0-9]+")) || req.getOccupiedYear().length() < 4) {
					error.add(new Error("33", "OccupiedYear", "Please Enter Building Occupied Year Format in YYYY"));
				}
				else if (StringUtils.isNotBlank(req.getOccupiedYear())){
					if(year1>year) {
						error.add(new Error("33", "OccupiedYear","Please Enter Building Occupied Year as Past Year"));
					}
					else if(diff>100) {
						error.add(new Error("33", "OccupiedYear","Please Enter Building Occupied Year within 100 years"));
							
					} else if (StringUtils.isBlank(req.getBuildingBuildYear()) || ! req.getBuildingBuildYear().matches("[0-9]+")  ) {
						error.add(new Error("33", "OccupiedYear","Building Build Year is Mandatory For Occupied Year"));
							
					} else if(buildyear > 0 && buildyear < diff ) {
						error.add(new Error("33", "OccupiedYear","Occupied Year Less Than  Building Build Year Not Allowed Occupied Year within 100 years"));
							
					}
				}
			}
			
			
			if (StringUtils.isNotBlank(req.getWatchmanGuardHours())) {
				 if (! req.getWatchmanGuardHours().matches("[0-9.]+") ) {
						error.add(new Error("01", "WatchmanGuardHours",  "Please Enter Valid Number in Watchman Guard the Premises Hours"));
				 } else if ( Double.valueOf(req.getWatchmanGuardHours()) <=0 ) {
						error.add(new Error("01", "WatchmanGuardHours",  "Greater Then Zero Only Allowed in in Watchman Guard the Premises Hours"));
				 }  else if ( Double.valueOf(req.getWatchmanGuardHours()) > 24 ) {
						error.add(new Error("01", "WatchmanGuardHours",  "Less Then 24 Only Allowed in in Watchman Guard the Premises Hours"));
				 } 
			}
			
			
			// Windows
			if (StringUtils.isNotBlank(req.getAccessibleWindows())) {
				 if (! req.getAccessibleWindows().matches("[0-9.]+") ) {
						error.add(new Error("01", "AccessibleWindows",  "Please Enter Valid Number in Accessible Windows"));
				 } else if ( Double.valueOf(req.getAccessibleWindows()) <=0 ) {
						error.add(new Error("01", "AccessibleWindows",  "Greater Then Zero Only Allowed in Accessible Windows"));
				 }  else if ( Double.valueOf(req.getAccessibleWindows()) > 100 ) {
						error.add(new Error("01", "AccessibleWindows",  "Less Then 100 Only Allowed Accessible Windows"));
				 } 
			}
			
			if (StringUtils.isNotBlank(req.getShowWindow())) {
				 if (! req.getAccessibleWindows().matches("[0-9.]+") ) {
						error.add(new Error("01", "ShowWindow",  "Please Enter Valid Number in Show Window"));
				 } else if ( Double.valueOf(req.getShowWindow()) <=0 ) {
						error.add(new Error("01", "ShowWindow",  "Greater Then Zero Only Allowed in Show Window"));
				 }  else if ( Double.valueOf(req.getShowWindow()) > 100 ) {
						error.add(new Error("01", "ShowWindow",  "Less Then 100 Only Allowed Show Window"));
				 } 
			}
			
			if (StringUtils.isNotBlank(req.getFrontDoors())) {
				 if (! req.getFrontDoors().matches("[0-9.]+") ) {
						error.add(new Error("01", "Front Doors",  "Please Enter Valid Number in Front Doors"));
				 } else if ( Double.valueOf(req.getFrontDoors()) <=0 ) {
						error.add(new Error("01", "Front Doors",  "Greater Then Zero Only Allowed in Front Doors"));
				 }  else if ( Double.valueOf(req.getFrontDoors()) > 100 ) {
						error.add(new Error("01", "AccessibleWindows",  "Less Then 100 Only Allowed FrontDoors"));
				 } 
			}
			
			if (StringUtils.isNotBlank(req.getBackDoors())) {
				 if (! req.getFrontDoors().matches("[0-9.]+") ) {
						error.add(new Error("01", "Back Doors",  "Please Enter Valid Number in Back Doors"));
				 } else if ( Double.valueOf(req.getBackDoors()) <=0 ) {
						error.add(new Error("01", "Back Doors",  "Greater Then Zero Only Allowed in Back Doors"));
				 }  else if ( Double.valueOf(req.getBackDoors()) > 100 ) {
						error.add(new Error("01", "Back Doors",  "Less Then 100 Only Allowed Back Doors"));
				 } 
			}
			
			if (StringUtils.isNotBlank(req.getTrapDoors())) {
				 if (! req.getFrontDoors().matches("[0-9.]+") ) {
						error.add(new Error("01", "Trap Doors",  "Please Enter Valid Number in Trap Doors"));
				 } else if ( Double.valueOf(req.getTrapDoors()) <=0 ) {
						error.add(new Error("01", "Trap Doors",  "Greater Then Zero Only Allowed in Trap Doors"));
				 }  else if ( Double.valueOf(req.getTrapDoors()) > 100 ) {
						error.add(new Error("01", "Trap Doors",  "Less Then 100 Only Allowed Trap Doors"));
				 } 
			}
			
			
			if (StringUtils.isNotBlank(req.getWindowsMaterialId())) {
				 if (! req.getFrontDoors().matches("[0-9.]+") ) {
						error.add(new Error("01", "Windows Material",  "Please Enter Valid Id in Windows Material"));
				 }
			}
			
			if (StringUtils.isNotBlank(req.getDoorsMaterialId())) {
				 if (! req.getDoorsMaterialId().matches("[0-9.]+") ) {
						error.add(new Error("01", "Doors Material",  "Please Enter Valid Id in Doors Material"));
				 }
			}
			

			if (StringUtils.isNotBlank(req.getNightLeftDoor())) {
				 if (! req.getNightLeftDoor().matches("[0-9.]+") ) {
						error.add(new Error("01", "NightLeftDoor",  "Please Enter Valid Id in Night Left Door"));
				 }
			}
			
			if (StringUtils.isNotBlank(req.getBuildingOccupied())) {
				 if (! req.getBuildingOccupied().matches("[0-9.]+") ) {
						error.add(new Error("01", "Building Occupied",  "Please Enter Valid Id in Building Occupied"));
				 }
			}
			
		} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return error;
	}
	
	
	private String policyRestriction(String agencyCode, String loginId, String bdmCode, String companyId,
			String productId, String policyType) {
		// TODO Auto-generated method stub
		String a ="";
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BrokerCommissionDetails> query = cb.createQuery(BrokerCommissionDetails.class);

			// Find All
			Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<BrokerCommissionDetails> ocpm1 = amendId.from(BrokerCommissionDetails.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("oaCode"), b.get("oaCode"));
			Predicate a5 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
			Predicate a6 = cb.equal(ocpm1.get("policyType"), b.get("policyType"));
			//Predicate a7 = cb.equal(ocpm1.get("id"), b.get("id"));
			Predicate a8 = cb.equal(ocpm1.get("status"), b.get("status"));

			amendId.where(a1, a2,a3,a4,a5,a6,a8);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("policyType")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("productId"),productId);
			Predicate n4 = cb.equal(b.get("oaCode"),bdmCode);
			Predicate n5 = cb.equal(b.get("loginId"),loginId);
			Predicate n6 = cb.equal(b.get("policyTypeDesc"),policyType);
			Predicate n7 = cb.equal(b.get("status"),"Y");
			Predicate n8 = cb.equal(b.get("agencyCode"),agencyCode);
			Predicate n9 = cb.equal(b.get("status"),"R");
			Predicate n10 = cb.or(n7,n9);

			query.where(n1,n2,n3,n4,n5,n6,n10,n8).orderBy(orderList);
			
			// Get Result
			TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);

			list = result.getResultList();
			List<BrokerCommissionDetails> policy = list
					  .stream()
					  .filter(c -> c.getPolicyTypeDesc().equalsIgnoreCase("ALL"))
					  .collect(Collectors.toList());
			if(policy.size()>0 || list.size()>0) {
				a = "Success";
				}
			} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return a;
	}

	public Tuple getMinMaxRate(String Currency,String CompanyId) {
		Tuple currencyRes =null;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
			List<Tuple> list = new ArrayList<Tuple>();
			
			// Find All
			Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
			
			Subquery<Long> exchangeRate = query.subquery(Long.class);
			Root<ExchangeMaster> ex = exchangeRate.from(ExchangeMaster.class);
			// Exchange Effective Date Start Max Filter
			Subquery<Long> effectiveDate3 = query.subquery(Long.class);
			Root<ExchangeMaster> ocpm3 = effectiveDate3.from(ExchangeMaster.class);
			effectiveDate3.select(cb.max(ocpm3.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ex.get("exchangeId"),ocpm3.get("exchangeId"));
			Predicate a2 = cb.equal(ex.get("currencyId"),ocpm3.get("currencyId"));
			Predicate a15 = cb.equal(ex.get("companyId"),ocpm3.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
			effectiveDate3.where(a1,a2,a3,a15);
			
			// Exhange Effective Date End Max Filter
			Subquery<Long> effectiveDate4 = query.subquery(Long.class);
			Root<ExchangeMaster> ocpm4 = effectiveDate4.from(ExchangeMaster.class);
			effectiveDate4.select(cb.max(ocpm4.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ex.get("exchangeId"),ocpm4.get("exchangeId"));
			Predicate a5 = cb.equal(ex.get("currencyId"),ocpm4.get("currencyId"));
			Predicate a16 = cb.equal(ex.get("companyId"),ocpm4.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
			effectiveDate4.where(a4,a5,a6,a16);
			
			// Exhange Rate Sub Query
			exchangeRate.select(ex.get("exchangeRate"));
			Predicate a7 = cb.equal(ex.get("currencyId"),Currency);
			Predicate a9 = cb.equal(ex.get("effectiveDateStart"), effectiveDate3);
			Predicate a10 = cb.equal(ex.get("effectiveDateEnd"), effectiveDate4);
			Predicate a17 = cb.equal(ex.get("companyId"),CompanyId);
			exchangeRate.where(a7,a9,a10,a17);

			// Select
			query.multiselect(c.get("currencyId").alias("currencyId") ,
				c.get("minDiscount").alias("minDiscount") , 
					c.get("maxLoading").alias("maxLoading") ,
					exchangeRate.alias("exchangeRate"));
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
			javax.persistence.criteria.Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			javax.persistence.criteria.Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			
			effectiveDate.where(a11,a12,a18,a22);
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
			javax.persistence.criteria.Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			javax.persistence.criteria.Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			
			effectiveDate2.where(a13,a14,a19,a23);
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n11 = cb.equal(c.get("status"), "R");
			Predicate n12 = cb.or(n1,n11);
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),CompanyId);
			Predicate n5 = cb.equal(c.get("companyId"),"99999");
			Predicate n6 = cb.or(n4,n5);
			query.where(n12,n2,n3,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);			
			list =  result.getResultList();
			if( list.size()>0) {
				currencyRes = list.get(0);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
		}
		return currencyRes;
	}

	@Override
	public List<EserviceBuildingSaveRes> saveBuildingDetails(BuildingSaveReq req) {
		List<EserviceBuildingSaveRes> resList = new ArrayList<EserviceBuildingSaveRes>();
		EserviceBuildingDetails buildingData = new EserviceBuildingDetails();
		List<BuildingSectionRes> sectionResList = new ArrayList<BuildingSectionRes>();
		
		try {
			// Save Building
			buildingData =  insertBuildingDetails(req);
			
			// Save Section
			sectionResList =   insertSectionDetails(req , buildingData );
			
			// Save Human
			List<BuildingSectionRes> humanSection = sectionResList.stream().filter( o -> o.getMotorYn().equalsIgnoreCase("H") ).collect(Collectors.toList());
			if(humanSection.size() > 0   ) {
				EserviceCommonDetails  human = insertHumanDetails(req , buildingData);
			}			
			
			
			// Insert Tracking
			{
				TrackingDetailsSaveReq trackingReq=new TrackingDetailsSaveReq();
				trackingReq.setProductId(req.getProductId());
				trackingReq.setStatus(req.getStatus());
				trackingReq.setBranchCode(req.getBranchCode());
				if( buildingData.getQuoteNo()  !=null ) {
					trackingReq.setQuoteNo( buildingData.getQuoteNo());
					}else {
						trackingReq.setQuoteNo("");
					}
				trackingReq.setRiskId( buildingData.getRiskId().toString());
				trackingReq.setCompanyId(req.getCompanyId());
				trackingReq.setPolicyNo(req.getPolicyNo());
				trackingReq.setOriginalPolicyNo(req.getOriginalPolicyNo());
				trackingReq.setCreatedby(req.getCreatedBy());
				trackingReq.setRequestReferenceNo(buildingData.getRequestReferenceNo() );		
				trackingReq.setRemarks(req.getEndorsementRemarks());
				trackService.insertTrackingDetails(trackingReq);
			}

			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());

		}
		
		List<OneTimeTableRes> otResList = null;
		try {
			// One Time Table Thread Call
			OneTimeTableReq otReq = new OneTimeTableReq();
			otReq.setRequestReferenceNo(buildingData.getRequestReferenceNo());
			otReq.setVehicleId(buildingData.getRiskId());
			if(StringUtils.isBlank(req.getAgencyCode())) {		
				otReq.setAgencyCode(buildingData.getAgencyCode() );
			}
			otReq.setBranchCode(buildingData.getBranchCode());
			otReq.setInsuranceId(buildingData.getCompanyId());
			otReq.setProductId(Integer.valueOf(buildingData.getProductId()));
			otReq.setSectionIds(req.getSectionId());
			otReq.setSectionList(sectionResList);
			// otReq.setSectionId(Integer.valueOf(buildingData.getSeSectionId()));

			// otReq.setBuildingDetails(buildingData);
			otResList = otService.call_OT_Insert(otReq);
			for (OneTimeTableRes otRes : otResList) {
				EserviceBuildingSaveRes res = new EserviceBuildingSaveRes();
				res.setResponse("Saved Successfully");
				res.setRequestReferenceNo(buildingData.getRequestReferenceNo() );
				res.setCustomerReferenceNo(req.getCustomerReferenceNo());
				res.setLocationId(otRes.getVehicleId());
				res.setAsRefNo(otRes.getVdRefNo());
				res.setCdRefNo(otRes.getCdRefNo());
				res.setMsrefno(otRes.getMsRefNo());
				res.setCompanyId(otRes.getCompanyId());
				res.setCreatedBy(req.getCreatedBy());
				res.setProductId(otRes.getProductId());
				res.setSectionId(otRes.getSectionId());
				resList.add(res);
			}

			//

			// Thread.sleep(10000L);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return resList;
	}
	
	
	public EserviceBuildingDetails insertBuildingDetails(BuildingSaveReq req) {
		
		EserviceBuildingDetails saveData = new EserviceBuildingDetails();
		EserviceBuildingDetails findData = new EserviceBuildingDetails();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		String refNo = "";
		try {
			saveData = dozerMapper.map(req, EserviceBuildingDetails.class);
			String refShortCode = getListItem(req.getCompanyId(), req.getBranchCode(), "PRODUCT_SHORT_CODE",req.getProductId());
			Integer locId = StringUtils.isBlank(req.getLocationId()) ? Integer.valueOf(req.getLocationId()) : 1 ;
			Date   entryDate = new Date();
			String createdBy = req.getCreatedBy();
		
			if (StringUtils.isBlank(req.getRequestReferenceNo())) {
				// Save
				refNo = refShortCode + "-" + genSeqNoService.generateRefNo(); 
				saveData = dozerMapper.map(req, EserviceBuildingDetails.class);
				
			} else {
				// Update
				refNo = req.getRequestReferenceNo();
				findData = repository.findByRequestReferenceNoAndRiskId(	req.getRequestReferenceNo(), Integer.valueOf(req.getLocationId()));

				if (findData != null) {
					repository.delete(findData);
					entryDate = findData.getEntryDate();
					createdBy = findData.getCreatedBy();
					saveData  =  setAdminDetails( req , findData) ;
				}
			}

			// Primary Key 
			saveData.setRiskId(locId);
			saveData.setRequestReferenceNo(refNo);
			saveData.setEntryDate(entryDate);
			saveData.setCreatedBy(createdBy);
			
			// Set Policy And Endt Details 
			saveData = setPolicyAndEndtDetails(req , saveData) ;
			
			// Set Broker Details
			saveData = setBrokerDetails(req , saveData) ;
			
			// Common Details 
			saveData = setOtherFields(req , saveData) ;
			
			// Set DropDown Details 
			saveData = setDropDownDetails(req , saveData ) ;
			
			repository.saveAndFlush(saveData);
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			
		}

		return saveData ;
	}
	
	public List<BuildingSectionRes> insertSectionDetails(BuildingSaveReq req , EserviceBuildingDetails buildingData ) {
		List<BuildingSectionRes> sectionResList = new ArrayList<BuildingSectionRes>(); 
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			
			// Building Section Insert
			Long buildSecCount = eserSecRepo.countByRequestReferenceNoAndRiskId(buildingData.getRequestReferenceNo() ,  buildingData.getRiskId());
			if (buildSecCount > 0) {
				eserSecRepo.deleteByRequestReferenceNoAndRiskId(buildingData.getRequestReferenceNo() ,  buildingData.getRiskId());
			}
			
			List<ProductSectionMaster> sectionList = getProductSectionDropdown(req.getCompanyId(), req.getProductId());
			
			List<EserviceSectionDetails> sectionds=new ArrayList<EserviceSectionDetails>(); 
			for (String section : req.getSectionId()) {
				
				EserviceSectionDetails secData = new EserviceSectionDetails();
				List<ProductSectionMaster> filterSection = sectionList.stream().filter( o -> o.getSectionId().equals(Integer.valueOf(section ) ) ).collect(Collectors.toList());		
				if( filterSection.size() > 0 ) {
					ProductSectionMaster sec =  filterSection.get(0) ;
					dozerMapper.map(buildingData, secData);
					secData.setExchageRate(buildingData.getExchangeRate());
					secData.setCurrencyId(buildingData.getCurrency());
					secData.setSectionId(section);
					secData.setSectionDesc( sec.getSectionName() );
					secData.setRiskId(buildingData.getRiskId());
					secData.setUserOpt("N");
					sectionds.add(secData);
					
					// Response 
					BuildingSectionRes secRes = new  BuildingSectionRes();
					secRes.setSectionId(section);
					secRes.setSectionName( sec.getSectionName());
					secRes.setMotorYn( sec.getMotorYn());
					sectionResList.add(secRes);
					
				}
				
			
			}
			eserSecRepo.saveAllAndFlush(sectionds);
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			
		}

		return sectionResList ;
	}
	
	public EserviceCommonDetails insertHumanDetails(BuildingSaveReq req , EserviceBuildingDetails buildingData ) {
		EserviceCommonDetails savehuman = new EserviceCommonDetails();  
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			
			Long count = eserCommonRepo.countByRequestReferenceNo(buildingData.getRequestReferenceNo() );
			if (count > 0) {
				eserCommonRepo.deleteByRequestReferenceNo(buildingData.getRequestReferenceNo() );
			}
			dozerMapper.map(buildingData, savehuman);
			savehuman.setRiskId(buildingData.getRiskId() );
			savehuman.setOccupationType(req.getOccupationType());
			savehuman.setCount(1);
			savehuman.setSumInsured(StringUtils.isNotBlank(req.getPersonalAccSuminsured()) ?  new BigDecimal(req.getPersonalAccSuminsured())
					: StringUtils.isNotBlank(req.getSumInsured()) ?  new BigDecimal(req.getSumInsured()) : new BigDecimal(0) );
			savehuman.setRequestReferenceNo(buildingData.getRequestReferenceNo() );
			savehuman.setBranchCode(buildingData.getBranchCode());
			savehuman.setCompanyId(buildingData.getCompanyId());
			savehuman.setCompanyName(buildingData.getCompanyName());
			savehuman.setCustomerReferenceNo(buildingData.getCustomerReferenceNo());
			savehuman.setEntryDate(buildingData.getEntryDate());
			savehuman.setProductId(buildingData.getProductId());
			savehuman.setProductDesc(buildingData.getProductDesc());
			savehuman.setSectionId(buildingData.getSectionId());
			savehuman.setSectionDesc(buildingData.getSectionDesc());
			savehuman.setStatus(StringUtils.isBlank(req.getStatus()) ? "Y" : req.getStatus() );
			savehuman.setPolicyStartDate(buildingData.getPolicyStartDate());
			savehuman.setPolicyEndDate(buildingData.getPolicyEndDate());
			savehuman.setPolicyPeriod(Integer.valueOf(buildingData.getPolicyPeriord()) );
			savehuman.setCategoryId(req.getCategoryId());
			savehuman.setTotalNoOfEmployees(req.getTotalNoOfEmployees() == null ? 0L : Long.valueOf(req.getTotalNoOfEmployees()));
			savehuman.setLiabilitySi(StringUtils.isBlank(req.getLiabilitySi()) ? new BigDecimal(0): new BigDecimal(req.getLiabilitySi()));
			savehuman.setFidEmpCount(StringUtils.isBlank(req.getFidEmpCount()) ? new BigDecimal(0): new BigDecimal(req.getFidEmpCount()));
			savehuman.setFidEmpSi(StringUtils.isBlank(req.getFidEmpSi()) ? new BigDecimal(0): new BigDecimal(req.getFidEmpSi()));
			savehuman.setEmpLiabilitySi(StringUtils.isBlank(req.getEmpLiabilitySi()) ? new BigDecimal(0): new BigDecimal(req.getEmpLiabilitySi()));
			savehuman.setPersonalLiabilitySi(null);
			
			// Personal Accident 
			if(StringUtils.isNotBlank(req.getOccupationType()) ) {
				OccupationMaster occupationData = getOccupationMasterDropdown(req.getCompanyId(), req.getBranchCode(), req.getProductId(), req.getOccupationType());
				savehuman.setSumInsured(StringUtils.isBlank(req.getPersonalAccSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getPersonalAccSuminsured()));
				savehuman.setOccupationType(req.getOccupationType());
				savehuman.setOccupationDesc(occupationData.getOccupationName());
				savehuman.setCategoryId(occupationData.getCategoryId());
			}
			
			// Personal Liability
			if(StringUtils.isNotBlank(req.getLiabilityOccupationId()) ) {
				OccupationMaster occupationData = getOccupationMasterDropdown(req.getCompanyId(), req.getBranchCode(), req.getProductId(), req.getLiabilityOccupationId());
				savehuman.setPersonalLiabilitySi(StringUtils.isBlank(req.getLiabilitySi()) ? new BigDecimal(0): new BigDecimal(req.getLiabilitySi()));
				savehuman.setPersonalLiabilityOccupation(StringUtils.isBlank(req.getLiabilityOccupationId()) ? "": req.getLiabilityOccupationId());
				savehuman.setPersonalLiabilityCategory(StringUtils.isBlank(occupationData.getCategoryId()) ? new BigDecimal(0): new BigDecimal(occupationData.getCategoryId()));
			}
			
		//	savehuman.setOccupationDesc(req.getOccupationType());
			if(!(req.getEndorsementType()==null || req.getEndorsementType()==0))	{

				savehuman.setOriginalPolicyNo(buildingData.getOriginalPolicyNo());
				savehuman.setEndorsementDate(buildingData.getEndorsementDate());
				savehuman.setEndorsementRemarks(buildingData.getEndorsementRemarks());
				savehuman.setEndorsementEffdate(buildingData.getEndorsementEffdate());
				savehuman.setEndtPrevPolicyNo(buildingData.getEndtPrevPolicyNo());
				savehuman.setEndtPrevQuoteNo(buildingData.getEndtPrevQuoteNo());
				savehuman.setEndtCount(buildingData.getEndtCount());
				savehuman.setEndtStatus(buildingData.getEndtStatus());
				savehuman.setIsFinaceYn(buildingData.getIsFinaceYn());
				savehuman.setEndtCategDesc(buildingData.getEndtCategDesc());
				savehuman.setEndorsementType(buildingData.getEndorsementType());
				savehuman.setEndorsementTypeDesc(buildingData.getEndorsementTypeDesc()); 
			}
			
			eserCommonRepo.save(savehuman);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			
		}

		return savehuman ;
	}

	
	public EserviceBuildingDetails setPolicyAndEndtDetails(BuildingSaveReq req ,EserviceBuildingDetails  data ) {
		EserviceBuildingDetails saveData = data ;
		try {
			// Date Differents
			Date periodStart =  req.getPolicyStartDate();
			Date periodEnd = req.getPolicyEndDate() ;
			String diff = "0";
			
			if(periodStart!=null && periodEnd!=null ) {
				Long diffInMillies = Math.abs(periodEnd.getTime() - periodStart.getTime());
				Long daysBetween =  TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS) ;
				
				// Check Leap Year
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd"); 
				boolean leapYear = LocalDate.parse(sdf2.format(periodEnd) ).isLeapYear();
				diff = String.valueOf(daysBetween==364 &&  leapYear==false ? daysBetween+1 : 
					  daysBetween==364 &&  leapYear==true ? daysBetween+2 : 
					  daysBetween==365 &&  leapYear==true ? daysBetween+1 : daysBetween );
				
				
			}
			saveData.setPolicyPeriord(Integer.valueOf(diff));
			// Endorsement Changes
			if(!(req.getEndorsementType()==null || req.getEndorsementType()==0))
				
			 {
			  
				saveData.setOriginalPolicyNo(req.getOriginalPolicyNo());
				saveData.setEndorsementDate(req.getEndorsementDate());
				saveData.setEndorsementRemarks(req.getEndorsementRemarks());
				saveData.setEndorsementEffdate(req.getEndorsementEffdate());
				saveData.setEndtPrevPolicyNo(req.getEndtPrevPolicyNo());
				 saveData.setEndtPrevQuoteNo(req.getEndtPrevQuoteNo());
				 saveData.setEndtCount(req.getEndtCount());
				 saveData.setEndtStatus(req.getEndtStatus());
				 saveData.setIsFinaceYn(req.getIsFinaceYn());
				 saveData.setEndtCategDesc(req.getEndtCategDesc());
				 saveData.setEndorsementType(req.getEndorsementType());
				 saveData.setEndorsementTypeDesc(req.getEndorsementTypeDesc()); 
				
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			return null;
		}

		return saveData;
	}
	
	
	public EserviceBuildingDetails setBrokerDetails(BuildingSaveReq req ,EserviceBuildingDetails  data ) {
		EserviceBuildingDetails saveData = data ;
		try {
			//Direct Broker Details
			if( StringUtils.isNotBlank(req.getSourceType()) && req.getSourceType().equalsIgnoreCase("Direct") ) {
				BranchMaster branchData = getCompanyBranch(req.getCompanyId() , req.getBranchCode() ) ;
				saveData.setLoginId(branchData.getDirectBrokerId())		;
				saveData.setBrokerCode(req.getBrokerCode());
				saveData.setBdmCode(req.getBrokerCode());
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(branchData.getBrokerAgencyCode()), "None", req.getCompanyId());
				if( brokerBranchName!=null) {
					saveData.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
					saveData.setBrokerBranchCode(brokerBranchName.getBrokerBranchCode());
			
					saveData.setBrokerCode(brokerBranchName.getOaCode()) ;
					saveData.setBdmCode(brokerBranchName.getOaCode());
				}
				
			// OTher Broker Details	
			} else {
				saveData.setLoginId(req.getLoginId())		;
				saveData.setBrokerCode(req.getBrokerCode());
				saveData.setBdmCode(req.getBrokerCode());
				saveData.setBrokerBranchCode(req.getBrokerBranchCode());
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(req.getBrokerCode()), req.getBrokerBranchCode(), req.getCompanyId());
				if( brokerBranchName!=null) {
					saveData.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
					saveData.setCustomerCode( brokerBranchName.getCustomerCode() );
					saveData.setBrokerCode(brokerBranchName.getOaCode()) ;
					saveData.setBdmCode(brokerBranchName.getOaCode());
				}
				
			}
			
			// Source Type
			if(req.getSubUserType().equalsIgnoreCase("b2b") || req.getSubUserType().equalsIgnoreCase("b2c")  ) {
				saveData.setSourceType("Broker");
						
			} else if(req.getSubUserType().equalsIgnoreCase("bank")) {
				saveData.setSourceType("Agent" );
			}   else {
				saveData.setSourceType(req.getSourceType() );
			}
			saveData.setCustomerCode(req.getCustomerCode() );
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			return null;
		}

		return saveData;
	}
	
	public EserviceBuildingDetails setAdminDetails(BuildingSaveReq req  , EserviceBuildingDetails findData ) {
		EserviceBuildingDetails saveData = new EserviceBuildingDetails() ;
		try {
				saveData.setAdminLoginId(findData.getAdminLoginId());
				saveData.setAdminRemarks(findData.getAdminRemarks());
				saveData.setReferalRemarks(findData.getReferalRemarks());
				saveData.setRejectReason(findData.getRejectReason());
				saveData.setQuoteNo(findData.getQuoteNo());
				saveData.setCustomerId(findData.getCustomerId());
				saveData.setOldReqRefNo(findData.getOldReqRefNo());
				saveData.setCreatedBy(findData.getCreatedBy());
				saveData.setEntryDate(findData.getEntryDate());
				saveData.setManualReferalYn(findData.getManualReferalYn());
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			return null;
		}

		return saveData;
	}
	
	public EserviceBuildingDetails setDropDownDetails(BuildingSaveReq req ,EserviceBuildingDetails  data  ) {
		EserviceBuildingDetails saveData = data ;
		try {
			saveData.setProductId( req.getProductId());
			String productName = getCompanyProductMasterDropdown(req.getCompanyId(), req.getProductId()); // productRepo.findByProductIdOrderByAmendIdDesc(Integer.valueOf(req.getProductId()));
			saveData.setProductDesc(productName);
			
			saveData.setCompanyId(req.getCompanyId());
			String companyName = getInscompanyMasterDropdown(req.getCompanyId()); // companyRepo.findByCompanyIdOrderByAmendIdDesc(req.getCompanyId());
			saveData.setCompanyName(companyName);
			
			saveData.setRegionCode(req.getRegionCode());
			saveData.setDistrictCode(req.getDistrictCode());
			
			if (StringUtils.isNotBlank(req.getCommissionType())) {
				String commistionDesc = getListItem(req.getCompanyId(), req.getBranchCode(), "COMMISSION_TYPE",req.getCommissionType());
				saveData.setCommissionTypeDesc(commistionDesc);
			}
			
			if(StringUtils.isNotBlank(req.getWallType()) ) {
				String wallType = getListItem(req.getCompanyId(), req.getBranchCode(), "WALL_TYPE", req.getWallType());
				saveData.setWallType(req.getWallType());
				saveData.setWallTypeDesc(wallType);
				
			}
			
			if(StringUtils.isNotBlank(req.getRoofType()) ) {
				String roofType = getListItem(req.getCompanyId(), req.getBranchCode(), "ROOF_TYPE", req.getRoofType());
				saveData.setRoofType(req.getRoofType());
				saveData.setRoofTypeDesc(roofType);
				
			}
			
			if(StringUtils.isNotBlank(req.getFirstLossPercentId()) ) {
				String firstLoss = getListItem(req.getCompanyId(), req.getBranchCode(), "FIRST_LOSS_PERCENT", req.getFirstLossPercentId());
				saveData.setFirstLossPercentId(Integer.valueOf(req.getFirstLossPercentId()));
				saveData.setFirstLossPercent(Integer.valueOf(firstLoss));
				
			}
			
			if(StringUtils.isNotBlank(req.getBuildingUsageId()) ) {
				String buildingusage = getListItem(req.getCompanyId(), req.getBranchCode(), "BUILDING_USAGE",req.getBuildingUsageId());
				saveData.setBuildingUsageId(req.getBuildingUsageId());
				saveData.setBuildingUsageDesc(buildingusage);
				
			}
			
			if(StringUtils.isNotBlank(req.getOccupationType()) ) {
				saveData.setOccupationType(req.getOccupationType());
			}
			
			if(StringUtils.isNotBlank(req.getNatureOfTradeId()) ) {
				String naturOfTrade = getListItem(req.getCompanyId(), req.getBranchCode(), "NATURE_OF_TRADE", req.getNatureOfTradeId());
				saveData.setNatureOfTradeId(Integer.valueOf(req.getNatureOfTradeId()));
				saveData.setNatureOfTradeDesc(naturOfTrade);
				
			}
			
			if(req.getInsuranceForId()!=null &&  req.getInsuranceForId().size()>0 ) {
				String insuranceForIds = "" ;
				String insuranceForDesc = "" ;
				for (String id :  req.getInsuranceForId() ) {
					String insDesc = getListItem(req.getCompanyId(), req.getBranchCode(), "BURGLARY_INSURANCE_FOR", id);
					
					insuranceForIds = StringUtils.isBlank(insuranceForIds) ? id : insuranceForIds + "," + id ;
					insuranceForDesc = StringUtils.isBlank(insuranceForDesc) ? insDesc : insuranceForDesc + "~" + insDesc ;
				}
				
				saveData.setInsuranceForId(insuranceForIds);
				saveData.setInsuranceForDesc(insuranceForDesc);
				
			}
			
			if(StringUtils.isNotBlank(req.getInternalWallType()) ) {
				String internalWall = getListItem(req.getCompanyId(), req.getBranchCode(), "WALL_TYPE", req.getInternalWallType());
				saveData.setInternalWallType(Integer.valueOf(req.getInternalWallType()));
				saveData.setInternalWallDesc(internalWall);
				
			}
			
			if(StringUtils.isNotBlank(req.getCeilingType()) ) {
				String ceilingDesc = getListItem(req.getCompanyId(), req.getBranchCode(), "CEILING_TYPE", req.getCeilingType());
				saveData.setCeilingType(Integer.valueOf(req.getCeilingType()));
				saveData.setCeilingTypeDesc(ceilingDesc);
				
			}
			
			if(StringUtils.isNotBlank(req.getWindowsMaterialId()) ) {
				String winMaterialDesc = getListItem(req.getCompanyId(), req.getBranchCode(), "WINDOWS_MATERIAL", req.getWindowsMaterialId());
				saveData.setWindowsMaterialId(Integer.valueOf(req.getWindowsMaterialId()));
				saveData.setWindowsMaterialDesc(winMaterialDesc);
				
			}
			
			if(StringUtils.isNotBlank(req.getDoorsMaterialId()) ) {
				String doorMaterialDesc = getListItem(req.getCompanyId(), req.getBranchCode(), "DOORS_MATERIAL", req.getDoorsMaterialId());
				saveData.setDoorsMaterialId(Integer.valueOf(req.getDoorsMaterialId()));
				saveData.setDoorsMaterialDesc(doorMaterialDesc);
				
			}
			
			if(StringUtils.isNotBlank(req.getNightLeftDoor()) ) {
				String leftDoorDesc = getListItem(req.getCompanyId(), req.getBranchCode(), "NIGHT_LEFT_DOOR", req.getNightLeftDoor());
				saveData.setNightLeftDoor(Integer.valueOf(req.getNightLeftDoor()));
				saveData.setNightLeftDoorDesc(leftDoorDesc);
				
			}
			
			if(StringUtils.isNotBlank(req.getBuildingOccupied()) ) {
				String buldingOccupationDesc = getListItem(req.getCompanyId(), req.getBranchCode(), "BUILDING_OCCUPIED", req.getBuildingOccupied());
				saveData.setBuildingOccupied( Integer.valueOf(req.getBuildingOccupied()));
				saveData.setBuildingOccupiedDesc(buldingOccupationDesc);
				
			}
			
			if (StringUtils.isNotBlank(req.getIndustryId()) && StringUtils.isNotBlank(req.getCategoryId())  ) {

				saveData.setCategoryId(req.getCategoryId());
				saveData.setIndustryId(Integer.valueOf(req.getIndustryId()));
				IndustryMaster industry = getIndustryName(req.getCompanyId(), req.getProductId(),req.getBranchCode(),req.getCategoryId() , req.getIndustryId());
				saveData.setIndustryDesc(industry!=null ? industry.getIndustryName() : "" );
				saveData.setCategoryDesc(industry!=null ? industry.getCategoryDesc() : "" );
			}
			
			// Personal Accident
			if(StringUtils.isNotBlank(req.getOccupationType()) ) {
				OccupationMaster occupationData = getOccupationMasterDropdown(req.getCompanyId(), req.getBranchCode(), req.getProductId(), req.getOccupationType());
				saveData.setOccupationType(req.getOccupationType());	
				saveData.setOccupationTypeDesc(occupationData.getOccupationName());	
			}
			// Personal Liability
			if(StringUtils.isNotBlank(req.getLiabilityOccupationId()) ) {
				OccupationMaster occupationData = getOccupationMasterDropdown(req.getCompanyId(), req.getBranchCode(), req.getProductId(), req.getLiabilityOccupationId());
				saveData.setLiabilityOccupationId(occupationData.getOccupationId().toString());
				saveData.setLiabilityOccupationDesc(occupationData.getOccupationName());	
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			return null;
		}

		return saveData;
	}
	
	public EserviceBuildingDetails setOtherFields(BuildingSaveReq req ,EserviceBuildingDetails  data  ) {
		EserviceBuildingDetails saveData = data ;
		SimpleDateFormat yf = new SimpleDateFormat("yyyy");
		try {
			saveData.setCompanyId(req.getCompanyId());
			saveData.setProductId(req.getProductId());
			saveData.setSectionId(req.getSectionId()!=null && req.getSectionId().size() ==1 ? req.getSectionId().get(0) : "") ;
			saveData.setBranchCode(req.getBranchCode());
			saveData.setAcExecutiveId(StringUtils.isBlank(req.getAcExecutiveId()) ? null : Integer.valueOf(req.getAcExecutiveId()));
			saveData.setApplicationId(req.getApplicationId());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			saveData.setContentSuminsured((StringUtils.isBlank(req.getContentSuminsured())) ? new BigDecimal(0): new BigDecimal(req.getContentSuminsured()));
			saveData.setBuildingSuminsured(req.getBuildingSuminsured() == null ? new BigDecimal(0): new BigDecimal(req.getBuildingSuminsured()));
			saveData.setPersonalIntSuminsured(req.getPersonalIntermediarySuminsured() == null ? new BigDecimal(0): new BigDecimal(req.getPersonalIntermediarySuminsured()));
			saveData.setBuildingAreaSqm(req.getBuidingAreaSqm() == null ? BigDecimal.ZERO : new BigDecimal(req.getBuidingAreaSqm()));
			saveData.setDomesticPackageYn(req.getDomesticPackageYn());
			saveData.setStockInTradeSi(StringUtils.isBlank(req.getStockInTradeSi()) ? new BigDecimal(0): new BigDecimal(req.getStockInTradeSi()));
			saveData.setGoodsSi(StringUtils.isBlank(req.getGoodsSi()) ? new BigDecimal(0): new BigDecimal(req.getGoodsSi()));
			saveData.setFurnitureSi(StringUtils.isBlank(req.getFurnitureSi()) ? new BigDecimal(0): new BigDecimal(req.getFurnitureSi()));
			saveData.setApplianceSi(StringUtils.isBlank(req.getApplianceSi()) ? new BigDecimal(0): new BigDecimal(req.getApplianceSi()));
			saveData.setCashValueablesSi(StringUtils.isBlank(req.getCashValueablesSi()) ? new BigDecimal(0): new BigDecimal(req.getCashValueablesSi()));
			saveData.setOccupiedYear(StringUtils.isBlank(req.getOccupiedYear()) ? null : Integer.valueOf(req.getCashValueablesSi()));
			saveData.setAccessibleWindows(StringUtils.isBlank(req.getAccessibleWindows()) ? null : Integer.valueOf(req.getAccessibleWindows()));
			saveData.setShowWindow(StringUtils.isBlank(req.getShowWindow()) ? null : Integer.valueOf(req.getShowWindow()));
			saveData.setFrontDoors(StringUtils.isBlank(req.getFrontDoors()) ? null : Integer.valueOf(req.getFrontDoors()));
			saveData.setBackDoors(StringUtils.isBlank(req.getBackDoors()) ? null : Integer.valueOf(req.getBackDoors()));
			saveData.setWatchmanGuardHours(StringUtils.isBlank(req.getWatchmanGuardHours()) ? null : Integer.valueOf(req.getWatchmanGuardHours()));
			saveData.setAddress(req.getAddress());
			saveData.setTrapDoors(StringUtils.isBlank(req.getTrapDoors()) ? null : Integer.valueOf(req.getTrapDoors()));
			saveData.setCashInHandDirectors(StringUtils.isBlank(req.getCashInHandDirectors()) ? new BigDecimal(0) :new BigDecimal(req.getCashInHandDirectors()));
			saveData.setCashInHandEmployees(StringUtils.isBlank(req.getCashInHandEmployees()) ? new BigDecimal(0) :new BigDecimal(req.getCashInHandEmployees()));
			saveData.setCashInPremises(StringUtils.isBlank(req.getCashInPremises())? new BigDecimal(0) :new BigDecimal(req.getGoodsTurnoverSuminsured()));
			saveData.setCashInSafe(StringUtils.isBlank(req.getCashInSafe())? new BigDecimal(0):new BigDecimal(req.getCashInSafe()));
			saveData.setCashInTransit(StringUtils.isBlank(req.getCashInTransit())? new BigDecimal(0) :new BigDecimal(req.getCashInTransit()));
			saveData.setCashValueablesSi(StringUtils.isBlank(req.getCashValueablesSi())? new BigDecimal(0) :new BigDecimal(req.getCashValueablesSi()));
			saveData.setRevenueFromStamps(StringUtils.isBlank(req.getRevenueFromStamps())? new BigDecimal(0) :new BigDecimal(req.getRevenueFromStamps()));
			saveData.setMoneyInLocker(StringUtils.isBlank(req.getMoneyInLocker())? new BigDecimal(0) :new BigDecimal(req.getMoneyInLocker()));
			saveData.setMoneyInPremises(StringUtils.isBlank(req.getMoneyInPremises())? new BigDecimal(0) :new BigDecimal(req.getMoneyInPremises()));
			saveData.setMoneyInSafeBusiness(StringUtils.isBlank(req.getMoneyInSafeBusiness())? new BigDecimal(0):new BigDecimal(req.getMoneyInSafeBusiness()));
			saveData.setMoneyOutSafeBusiness(StringUtils.isBlank(req.getMoneyOutSafeBusiness())? new BigDecimal(0):new BigDecimal(req.getMoneyOutSafeBusiness()));
			saveData.setMoneyInPremises(StringUtils.isBlank(req.getMoneyInPremises())? new BigDecimal(0) :new BigDecimal(req.getMoneyInPremises()));
			saveData.setMoneyAnnualcarrySuminsured(StringUtils.isBlank(req.getMoneyAnnualcarrySuminsured())? new BigDecimal(0) :new BigDecimal(req.getMoneyAnnualcarrySuminsured()));
			saveData.setMoneySinglecarrySuminsured(StringUtils.isBlank(req.getMoneySinglecarrySuminsured())? new BigDecimal(0) :new BigDecimal(req.getMoneySinglecarrySuminsured()));
			saveData.setElecEquipSuminsured(req.getElecEquipSuminsured() == null ? new BigDecimal(0): new BigDecimal(req.getElecEquipSuminsured()));
			saveData.setMoneySinglecarrySuminsured(StringUtils.isBlank(req.getMoneySinglecarrySuminsured()) ? new BigDecimal(0): new BigDecimal(req.getMoneySinglecarrySuminsured()));
			saveData.setMoneyInsafeSuminsured(StringUtils.isBlank(req.getMoneyInsafeSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getMoneyInsafeSuminsured()));
			saveData.setMoneyAnnualcarrySuminsured(StringUtils.isBlank(req.getMoneyAnnualcarrySuminsured())  ? new BigDecimal(0): new BigDecimal(req.getMoneyAnnualcarrySuminsured()));
			saveData.setFidelityAnnualSuminsured(StringUtils.isBlank(req.getFidelityAnnualSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getFidelityAnnualSuminsured()));
			saveData.setFidelityAnyoccuSuminsured(StringUtils.isBlank(req.getFidelityAnyoccuSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getFidelityAnyoccuSuminsured()));
			saveData.setTpliabilityAnyoccuSuminsured(StringUtils.isBlank(req.getTpliabilityAnyoccuSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getTpliabilityAnyoccuSuminsured()));
			saveData.setEmpliabilityAnnualSuminsured(StringUtils.isBlank(req.getEmpliabilityAnnualSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getEmpliabilityAnnualSuminsured()));
			saveData.setEmpliabilityExcessSuminsured(StringUtils.isBlank(req.getEmpliabilityExcessSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getEmpliabilityExcessSuminsured()));
			saveData.setGoodsSinglecarrySuminsured(StringUtils.isBlank(req.getGoodsSinglecarrySuminsured()) ? new BigDecimal(0): new BigDecimal(req.getGoodsSinglecarrySuminsured()));
			saveData.setGoodsTurnoverSuminsured(StringUtils.isBlank(req.getGoodsTurnoverSuminsured()) ? new BigDecimal(0): new BigDecimal(req.getGoodsTurnoverSuminsured()));
			
			// Newly Added Fields
			saveData.setMachineEquipSi(StringUtils.isBlank(req.getMachineEquipSi()) ? new BigDecimal(0): new BigDecimal(req.getMachineEquipSi()));
			saveData.setPlateGlassSi(StringUtils.isBlank(req.getPlateGlassSi()) ? new BigDecimal(0): new BigDecimal(req.getPlateGlassSi()));
			saveData.setAccDamageSi(StringUtils.isBlank(req.getAccDamageSi()) ? new BigDecimal(0): new BigDecimal(req.getAccDamageSi()));
		//	saveData.setFirstLossPercent(StringUtils.isBlank(req.getFirstLossPercent()) ? 0: Integer.valueOf(req.getFirstLossPercent()));
		//	saveData.setFirstLossPercentId(StringUtils.isBlank(req.getFirstLossPercentId()) ? 0: Integer.valueOf(req.getFirstLossPercentId()));
			saveData.setBurglarySi(StringUtils.isBlank(req.getBurglarySi()) ? new BigDecimal(0): new BigDecimal(req.getBurglarySi()));
			saveData.setPowerPlantSi(StringUtils.isBlank(req.getPowerPlantSi()) ? new BigDecimal(0): new BigDecimal(req.getPowerPlantSi()));
			saveData.setElecMachinesSi(StringUtils.isBlank(req.getElecMachinesSi()) ? new BigDecimal(0): new BigDecimal(req.getElecMachinesSi()));
			saveData.setEquipmentSi(StringUtils.isBlank(req.getEquipmentSi()) ? new BigDecimal(0): new BigDecimal(req.getEquipmentSi()));
			saveData.setGeneralMachineSi(StringUtils.isBlank(req.getGeneralMachineSi()) ? new BigDecimal(0): new BigDecimal(req.getGeneralMachineSi()));
			saveData.setManuUnitsSi(StringUtils.isBlank(req.getManuUnitsSi()) ? new BigDecimal(0): new BigDecimal(req.getManuUnitsSi()));
			saveData.setBoilerPlantsSi(StringUtils.isBlank(req.getBoilerPlantsSi()) ? new BigDecimal(0): new BigDecimal(req.getBoilerPlantsSi()));
		
			
			Date today = new Date();
			String year = yf.format(today);
			// Building Age
			if(StringUtils.isNotBlank(req.getBuildingBuildYear())) {
				String buidingYear = req.getBuildingBuildYear();
				int buildingAge = Integer.valueOf(year) - Integer.valueOf(buidingYear);
				saveData.setBuildingAge(buildingAge);
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info( "Exception Is ---> " + e.getMessage());
			return null;
		}

		return saveData;
	}
	
	private IndustryMaster getIndustryName(String companyId, String productId, String branchCode,String categoryId , String industryId) {
		IndustryMaster industry = new IndustryMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<IndustryMaster> query = cb.createQuery(IndustryMaster.class);
			List<IndustryMaster> list = new ArrayList<IndustryMaster>();

			// Find All
			Root<IndustryMaster> c = query.from(IndustryMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("categoryDesc")));

			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<IndustryMaster> ocpm1 = effectiveDate.from(IndustryMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("industryId"),ocpm1.get("industryId"));
			Predicate a1 = cb.equal(c.get("categoryId"), ocpm1.get("categoryId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			
			effectiveDate.where(a1, a2, a3, a4,a5,a11);

			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<IndustryMaster> ocpm2 = effectiveDate2.from(IndustryMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a12 = cb.equal(c.get("industryId"),ocpm2.get("industryId"));
			javax.persistence.criteria.Predicate a6 = cb.equal(c.get("categoryId"), ocpm2.get("categoryId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a6, a7, a8, a9,a10,a12);

			// Where
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), companyId);
			javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("categoryId"),categoryId);
			Predicate n10 = cb.equal(c.get("industryId"),industryId);
			Predicate n7 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n8 = cb.equal(c.get("branchCode"),"99999");
			Predicate n9 = cb.or(n7,n8);
		
			
			query.where(n1, n2, n3, n4, n5, n6,n9,n10).orderBy(orderList);

			// Get Result
			TypedQuery<IndustryMaster> result = em.createQuery(query);
			list = result.getResultList();
			industry = list.size() > 0 ? list.get(0) : null;
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return industry;
	}

	public BranchMaster getCompanyBranch(String insuranceId, String branchCode) {
		BranchMaster branchData = new BranchMaster();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat idf = new SimpleDateFormat("yyMMddhhssmmss");
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date());
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Login Data
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
			List<BranchMaster> branchlist = new ArrayList<BranchMaster>();

			// Find All
			Root<BranchMaster> c = query.from(BranchMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("branchCode")));

			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			query.where(n1, n2, n3, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<BranchMaster> result = em.createQuery(query);
			branchlist = result.getResultList();

			branchData = branchlist.get(0);

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return branchData;
	}

	public Integer currencyDecimalFormat(String insuranceId, String currencyId) {
		Integer decimalFormat = 0;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
			List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();

			// Find All
			Root<CurrencyMaster> c = query.from(CurrencyMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));

			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("currencyId"), ocpm1.get("currencyId"));
			Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a18 = cb.equal(c.get("status"), ocpm1.get("status"));
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));

			effectiveDate.where(a11, a12, a18, a22);

			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a13 = cb.equal(c.get("currencyId"), ocpm2.get("currencyId"));
			Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("status"), ocpm2.get("status"));
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));

			effectiveDate2.where(a13, a14, a19, a23);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.or(n4, n5);
			Predicate n7 = cb.equal(c.get("currencyId"), currencyId);
			query.where(n1, n2, n3, n6, n7).orderBy(orderList);

			// Get Result
			TypedQuery<CurrencyMaster> result = em.createQuery(query);
			list = result.getResultList();

			decimalFormat = list.size() > 0
					? (list.get(0).getDecimalDigit() == null ? 0 : list.get(0).getDecimalDigit())
					: 0;

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return decimalFormat;
	}

	public OccupationMaster getOccupationMasterDropdown(String companyId, String branchCode, String productId,
			String occupationId) {
		OccupationMaster occupation = null;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<OccupationMaster> query = cb.createQuery(OccupationMaster.class);
			List<OccupationMaster> list = new ArrayList<OccupationMaster>();

			// Find All
			Root<OccupationMaster> c = query.from(OccupationMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<OccupationMaster> ocpm1 = effectiveDate.from(OccupationMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("occupationId"), ocpm1.get("occupationId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a9 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			effectiveDate.where(a1, a2, a5, a6, a9);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<OccupationMaster> ocpm2 = effectiveDate2.from(OccupationMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("occupationId"), ocpm2.get("occupationId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			effectiveDate2.where(a3, a4, a7, a8, a10);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			Predicate n8 = cb.equal(c.get("occupationId"), occupationId);
		//	Predicate n9 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2, n3, n4, n7, n8).orderBy(orderList);
			TypedQuery<OccupationMaster> result = em.createQuery(query);
			list = result.getResultList();

			if (list.size() > 0) {
				list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getOccupationId())))
						.collect(Collectors.toList());
				list.sort(Comparator.comparing(OccupationMaster::getOccupationName));
				occupation = list.get(0);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return occupation;
	}

	public List<ProductSectionMaster> getProductSectionDropdown(String companyId, String productId) {
		List<ProductSectionMaster> sectionList = new ArrayList<ProductSectionMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
		
			// Find All
			Root<ProductSectionMaster> c = query.from(ProductSectionMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));

			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3, a4);

			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId"));

			javax.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6, a7, a8);

			// Where
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), companyId);
			javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
		//	Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
		//	query.where(n1, n2, n3, n4, n5, n6).orderBy(orderList);
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			sectionList = result.getResultList();
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionList;
	}

	public String getInscompanyMasterDropdown(String companyId) {
		String companyName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();

			// Find All
			Root<InsuranceCompanyMaster> c = query.from(InsuranceCompanyMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));

			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			javax.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2);

			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			javax.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4);

			// Where
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);

			query.where(n1, n2, n3, n4).orderBy(orderList);

			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			companyName = list.size() > 0 ? list.get(0).getCompanyName() : "";

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return companyName;
	}

	public String getCompanyProductMasterDropdown(String companyId, String productId) {
		String productName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));

			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			productName = list.size() > 0 ? list.get(0).getProductName() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return productName;
	}

	@Override
	public GetBuildingDetailsRes getBuildingDetailsByLocationId(BuildDetailsGetByLocIdReq req) {
		GetBuildingDetailsRes res = new GetBuildingDetailsRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			EserviceBuildingDetails data = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),
					Integer.valueOf(req.getLocationId()));
			res = mapper.map(data, GetBuildingDetailsRes.class);
			res.setLocationId(data.getRiskId().toString());
			// res.setQuoteNo(data.getQuoteNo()!=null?data.getQuoteNo() :"" );
			// res.setCustomerId(data.getCustomerId()!=null ? data.getCustomerId() : "" );
			res.setBuidingAreaSqm(data.getBuildingAreaSqm() == null ? "0" : data.getBuildingAreaSqm().toString());
			res.setBuildingPurposeId(data.getBuildingPurposeId());
			res.setAcExecutiveId(data.getAcExecutiveId() == null ? "0" : data.getAcExecutiveId().toString());
			res.setWithoutInhabitantDays(
					data.getWithoutInhabitantDays() == null ? "0" : data.getWithoutInhabitantDays().toString());
			res.setIndustryId(data.getIndustryId() == null ? "0" : data.getIndustryId().toString());
			res.setIndustryDesc(data.getIndustryDesc() == null ? "" : data.getIndustryDesc());

			res.setFirstLossPercentId(data.getFirstLossPercentId().toString() == null ? "" : data.getFirstLossPercentId().toString());
			res.setFirstLossPercent(data.getFirstLossPercent().toString()== null ? "" : data.getFirstLossPercent().toString());

			
			// Sections
			List<EserviceSectionDetails> eserSections = eserSecRepo
					.findByRequestReferenceNoAndRiskIdAndProductIdOrderBySectionIdAsc(req.getRequestReferenceNo(),
							Integer.valueOf(req.getLocationId()), data.getProductId());

			List<String> sections = eserSections.stream().map(EserviceSectionDetails::getSectionId)
					.collect(Collectors.toList());
			res.setSectionId(sections);

			List<EserviceCommonDetails> datas = eserCommonRepo.findByRequestReferenceNo(req.getRequestReferenceNo());
			if(datas.size() > 0 ) {
				res.setOccupationType(datas.get(0).getOccupationType().toString());
				res.setPersonalAccSuminsured(datas.get(0).getSumInsured().toString());
				res.setCount(datas.get(0).getCount().toString());	
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<GetBuildingDetailsRes> getBuildingDetailsByRefNo(BuldingDetailsGetReq req) {
		List<GetBuildingDetailsRes> reslist = new ArrayList<GetBuildingDetailsRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		String pattern1 = "#####0.00";
		DecimalFormat df1 = new DecimalFormat(pattern1);
		String pattern2 = "#";
		DecimalFormat df2 = new DecimalFormat(pattern2);
		try {
			List<EserviceBuildingDetails> datas = repository
					.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			// Sections
			List<EserviceSectionDetails> eserSections = eserSecRepo
					.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			eserSections = eserSections.stream().filter(distinctByKey(o -> Arrays.asList(o.getSectionId())))
					.collect(Collectors.toList());

			List<String> sections = eserSections.stream().map(EserviceSectionDetails::getSectionId)
					.collect(Collectors.toList());

			for (EserviceBuildingDetails data : datas) {
				GetBuildingDetailsRes res = new GetBuildingDetailsRes();
				res = mapper.map(data, GetBuildingDetailsRes.class);
				res.setLocationId(data.getRiskId().toString());
				// res.setQuoteNo(data.getQuoteNo()!=null?data.getQuoteNo() :"" );
				// res.setCustomerId(data.getCustomerId()!=null ? data.getCustomerId() : "" );
				res.setBuidingAreaSqm(data.getBuildingAreaSqm() == null ? "0" : data.getBuildingAreaSqm().toString());
				res.setContentSuminsured(data.getContentSuminsured().toString());
				res.setBuildingPurposeId(data.getBuildingPurposeId());
				res.setAcExecutiveId(data.getAcExecutiveId() == null ? "0" : data.getAcExecutiveId().toString());
				res.setAllriskSuminsured(data.getAllriskSuminsured() == null ? ""
						: data.getAllriskSuminsured().toString().matches("[.]+")
								? df1.format(data.getAllriskSuminsured())
								: df2.format(data.getAllriskSuminsured()));
				res.setBuildingSuminsured(data.getBuildingSuminsured() == null ? ""
						: data.getBuildingSuminsured().toString().matches("[.]+")
								? df1.format(data.getBuildingSuminsured())
								: df2.format(data.getBuildingSuminsured()));
				res.setContentSuminsured(data.getContentSuminsured() == null ? ""
						: data.getContentSuminsured().toString().matches("[.]+")
								? df1.format(data.getContentSuminsured())
								: df2.format(data.getContentSuminsured()));
				// res.setPaDeathSuminsured(data.getPaDeathSuminsured()==null?"":data.getPaDeathSuminsured().toString().matches("[.]+")
				// ? df1.format(data.getPaDeathSuminsured()) :
				// df2.format(data.getPaDeathSuminsured()));
				// res.setPaMedicalSuminsured(data.getPaMedicalSuminsured()==null?"":data.getPaMedicalSuminsured().toString().matches("[.]+")
				// ? df1.format(data.getPaMedicalSuminsured()) :
				// df2.format(data.getPaMedicalSuminsured()));
				// res.setPaPermanentdisablementSuminsured(data.getPaPermanentdisablementSuminsured()==null?"":data.getPaPermanentdisablementSuminsured().toString().matches("[.]+")
				// ? df1.format(data.getPaPermanentdisablementSuminsured()) :
				// df2.format(data.getPaPermanentdisablementSuminsured()));
				// res.setPaTotaldisabilitySumInsured(data.getPaTotaldisabilitySumInsured()==null?"":data.getPaTotaldisabilitySumInsured().toString().matches("[.]+")
				// ? df1.format(data.getPaTotaldisabilitySumInsured()) :
				// df2.format(data.getPaTotaldisabilitySumInsured()));
				res.setPersonalIntermediarySuminsured(data.getPersonalIntSuminsured() == null ? ""
						: data.getPersonalIntSuminsured().toString().matches("[.]+")
								? df1.format(data.getPersonalIntSuminsured())
								: df2.format(data.getPersonalIntSuminsured()));

				res.setWithoutInhabitantDays(
						data.getWithoutInhabitantDays() == null ? "0" : data.getWithoutInhabitantDays().toString());
				res.setSectionId(sections);

				res.setIndustryId(data.getIndustryId() == null ? "0" : data.getIndustryId().toString());
				res.setIndustryDesc(data.getIndustryDesc() == null ? "" : data.getIndustryDesc());

				res.setCustomerCode(data.getCustomerCode()== null ? "" : data.getCustomerCode());
				res.setInsuranceForId(data.getInsuranceForId()!=null ? Arrays.asList(data.getInsuranceForId().split(",")) : null )  ;
			
				res.setGoodsSi(data.getGoodsSi() == null ? ""
						: data.getGoodsSi() .toString().matches("[.]+")
								? df1.format(data.getGoodsSi())
								: df2.format(data.getGoodsSi()));
				res.setFirstLossPercentId(data.getFirstLossPercentId().toString() == null ? "" : data.getFirstLossPercentId().toString());
				res.setFirstLossPercent(data.getFirstLossPercent().toString()== null ? "" : data.getFirstLossPercent().toString());

				
				List<EserviceCommonDetails> datass = eserCommonRepo
						.findByRequestReferenceNo(req.getRequestReferenceNo());

				if(datass.size() > 0 ) {
					res.setOccupationType(datass.get(0).getOccupationType().toString());
					res.setPersonalAccSuminsured(datass.get(0).getSumInsured().toString());
					res.setCount(datass.get(0).getCount().toString());
					res.setOccupationTypeDesc(datass.get(0).getOccupationDesc());
				}

				reslist.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return reslist;
	}

	@Override
	public SuccessRes deleteBuidingDetailsByLocId(BuildDetailsGetByLocIdReq req) {
		SuccessRes res = new SuccessRes();
		try {
			EserviceBuildingDetails findData = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),
					Integer.valueOf(req.getLocationId()));
			if (findData != null) {
				repository.delete(findData);
				res.setResponse("Successfully Updated");
				res.setSuccessId(req.getRequestReferenceNo());

			} else {
				res.setResponse("Data Not Found");
				res.setSuccessId(req.getRequestReferenceNo());
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<GetAllBuldingDetailsRes> getallExistingQuoteDetails(ExistingBuildingDetailsReq req) {
		List<GetAllBuldingDetailsRes> resList = new ArrayList<GetAllBuldingDetailsRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			cal.add(Calendar.DAY_OF_MONTH, -30);
			Date before30 = cal.getTime();

			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Quote Customer Details
			List<CriteriaBuildingRes> customerDetails = getallQuoteBuldingDetails(req, "Y", before30, today, limit,
					offset);

			for (CriteriaBuildingRes data : customerDetails) {
				GetAllBuldingDetailsRes res = new GetAllBuldingDetailsRes();
				res = dozerMapper.map(data, GetAllBuldingDetailsRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return resList;
	}

	public List<CriteriaBuildingRes> getallQuoteBuldingDetails(ExistingBuildingDetailsReq req, String status,
			Date startDate, Date endDate, Integer limit, Integer offset) {
		List<CriteriaBuildingRes> customerDetails = new ArrayList<CriteriaBuildingRes>();
		try {
			// Get Request Ref No
			List<String> reqRefNos = new ArrayList<String>();
			{
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<String> query = cb.createQuery(String.class);
				Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);
				Root<EserviceBuildingDetails> b = query.from(EserviceBuildingDetails.class);

				query.select(b.get("requestReferenceNo")).distinct(true);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("updatedDate")));

				// Where
				Predicate n1 = cb.equal(c.get("customerReferenceNo"), b.get("customerReferenceNo"));
				Predicate n2 = cb.equal(b.get("branchCode"), req.getBranchCode());
				Predicate n3 = cb.equal(b.get("companyId"), req.getInsuranceId());
				Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
				Predicate n5 = cb.equal(b.get("createdBy"), req.getCreatedBy());
				Predicate n6 = cb.equal(b.get("status"), status);
				Predicate n7 = cb.lessThanOrEqualTo(b.get("updatedDate"), endDate);
				Predicate n8 = cb.greaterThanOrEqualTo(b.get("updatedDate"), startDate);
				query.where(n1, n2, n3, n4, n5, n6, n7, n8).orderBy(orderList);

				// Get Result
				TypedQuery<String> result = em.createQuery(query);
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				reqRefNos = result.getResultList();

			}

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CriteriaBuildingRes> query = cb.createQuery(CriteriaBuildingRes.class);

			// Find All
			Root<EserviceCustomerDetails> c = query.from(EserviceCustomerDetails.class);
			Root<EserviceBuildingDetails> b = query.from(EserviceBuildingDetails.class);

			// Select
			query.multiselect(
					// Customer Info
					c.get("customerReferenceNo").alias("customerReferenceNo"),
					c.get("policyHolderTypeid").alias("policyHolderTypeid"), c.get("idType").alias("idType"),
					c.get("idNumber").alias("idNumber"), c.get("age").alias("age"),
					c.get("clientName").alias("clientName"), c.get("titleDesc").alias("titleDesc"),
					c.get("policyHolderType").alias("policyHolderType"), c.get("idTypeDesc").alias("idTypeDesc"),
					c.get("dobOrRegDate").alias("dobOrRegDate"), c.get("genderDesc").alias("genderDesc"),
					c.get("occupationDesc").alias("occupationDesc"),
					c.get("businessTypeDesc").alias("businessTypeDesc"), c.get("telephoneNo1").alias("telephoneNo1"),
					c.get("telephoneNo2").alias("telephoneNo2"), c.get("telephoneNo3").alias("telephoneNo3"),
					c.get("mobileNo1").alias("mobileNo1"), c.get("mobileNo2").alias("mobileNo2"),
					c.get("mobileNo3").alias("mobileNo3"), c.get("email1").alias("email1"),
					c.get("email2").alias("email2"), c.get("email3").alias("email3"),

					c.get("vrnGst").alias("vrnGst"),

					// Vehicle Info
					b.get("companyId").alias("companyId"), b.get("productId").alias("productId"),
					b.get("branchCode").alias("branchCode"), b.get("requestReferenceNo").alias("requestReferenceNo"),
					b.get("createdBy").alias("createdBy"), b.get("status").alias("status"),
					b.get("quoteNo").alias("quoteNo"), b.get("customerId").alias("customerId"),
					b.get("entryDate").alias("entryDate"), b.get("updatedDate").alias("updatedDate"),
					b.get("updatedBy").alias("updatedBy")).distinct(true);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("quoteNo")));

			// In
			Expression<String> e0 = b.get("requestReferenceNo");

			// Where
			Predicate n1 = e0.in(reqRefNos);
			Predicate n2 = cb.equal(c.get("customerReferenceNo"), b.get("customerReferenceNo"));
			query.where(n1, n2).orderBy(orderList);

			// Get Result
			TypedQuery<CriteriaBuildingRes> result = em.createQuery(query);
			customerDetails = result.getResultList();
			customerDetails = customerDetails.stream()
					.filter(distinctByKey(o -> Arrays.asList(o.getRequestReferenceNo()))).collect(Collectors.toList());
			customerDetails.sort(Comparator.comparing(CriteriaBuildingRes::getUpdatedDate).reversed());

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return customerDetails;
	}

	private static <T> java.util.function.Predicate<T> distinctByKey(
			java.util.function.Function<? super T, ?> keyExtractor) {
		Map<Object, Boolean> seen = new ConcurrentHashMap<>();
		return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	public synchronized String getListItem(String insuranceId, String branchCode, String itemType, String itemCode) {
		String itemDesc = "";
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query = cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);

			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"), ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"), ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3, a4);

			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n12 = cb.equal(c.get("status"),"R");
			Predicate n13 = cb.or(n1,n12);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n4, n5);
			Predicate n9 = cb.or(n6, n7);
			Predicate n10 = cb.equal(c.get("itemType"), itemType);
			Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
			query.where(n13, n2, n3, n8, n9, n10, n11).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();

			itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return itemDesc;
	}
	

	/*
	 * @Override public boolean delete(long id) { try { repository.deleteById(id);
	 * return true;
	 * 
	 * } catch (Exception ex) { log.error(ex); return false; } }
	 * 
	 */

}
