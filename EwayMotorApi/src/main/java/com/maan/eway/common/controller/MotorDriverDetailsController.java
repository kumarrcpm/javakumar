/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-23 ( Date ISO 2022-09-23 - Time 15:08:00 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.req.DriverDetailsGetReq;
import com.maan.eway.common.req.DriverDetailsRes;
import com.maan.eway.common.req.DriverListDetails;
import com.maan.eway.common.req.DriverSaveRes;
import com.maan.eway.common.req.EserviceMotorDetailsGetReq;
import com.maan.eway.common.req.EserviceMotorDetailsGetallReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveReq;

import com.maan.eway.common.req.EserviceMotorDetailsSaveRes;
import com.maan.eway.common.req.EserviceMotorDetailsUpdateReq;

import com.maan.eway.common.req.EserviceMotorUwReq;
import com.maan.eway.common.req.ExistingMotorDetailsReq;
import com.maan.eway.common.req.MotorDriverSaveReq;
import com.maan.eway.common.req.UpdateLapsedQuoteReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.res.EserviceCustomerDetailsRes;
import com.maan.eway.common.res.EserviceMotorDetailsRes;
import com.maan.eway.common.res.GetAllMotorDetailsRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.res.UwQuestionsRes;
import com.maan.eway.common.service.EserviceMotorDetailsService;
import com.maan.eway.error.Error;
import com.maan.eway.res.calc.Cover;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;


/**
* <h2>EserviceCustomerDetailsController</h2>
*/
@RestController
@RequestMapping("/api")
@Api(tags = "MOTOR DRIVER DETAILS", description = "API's")
public class MotorDriverDetailsController {

	@Autowired
	private  EserviceMotorDetailsService entityService;
	
	
	@Autowired
	private PrintReqService reqPrinter;

/*
	private static final String ENTITY_TITLE = "EserviceCustomerDetails";


 	public EserviceCustomerDetailsController (EserviceCustomerDetailsService entityService) {
		this.entityService = entityService;
	}
*/

	
	
	@PostMapping("/savemotordrivers")
	public ResponseEntity<CommonRes> saveDriverDetails(@RequestBody  List<MotorDriverSaveReq> req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<Error> validation = entityService.validateDriverDetails(req);
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			DriverSaveRes res = entityService.saveDriverDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
		
    }
	
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getmotordrivers")
	public ResponseEntity<CommonRes> getDriverDetails(@RequestBody  DriverDetailsGetReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<DriverDetailsRes> res = entityService.getDriverDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
   
}
