/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-11-30 ( Date ISO 2022-11-30 - Time 17:06:34 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.bean.EserviceTravelDetails;
import com.maan.eway.common.req.EserviceMotorDetailsGetReq;
import com.maan.eway.common.req.EserviceMotorDetailsGetallReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveReq;
import com.maan.eway.common.req.EserviceMotorDetailsSaveRes;
import com.maan.eway.common.req.EserviceSaveRes;
import com.maan.eway.common.req.EserviceTravelDeleteReq;
import com.maan.eway.common.req.EserviceTravelGetAllReq;
import com.maan.eway.common.req.EserviceTravelGetReq;
import com.maan.eway.common.req.EserviceTravelSaveReq;
import com.maan.eway.common.res.CommonRes;
import com.maan.eway.common.res.EserviceMotorDetailsRes;
import com.maan.eway.common.res.EserviceTravelGetRes;
import com.maan.eway.common.res.GetAllMotorDetailsRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.service.EserviceTravelDetailsService;
import com.maan.eway.error.Error;
import com.maan.eway.service.PrintReqService;


/**
* <h2>EserviceTravelDetailsController</h2>
*/
@RestController
@RequestMapping("/api")
public class EserviceTravelDetailsController {

	@Autowired
	private  EserviceTravelDetailsService entityService;
	
	@Autowired
	private PrintReqService reqPrinter;
 
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
    @PostMapping("/savetraveldetails")
	public ResponseEntity<CommonRes> saveMotorDetails(@RequestBody  EserviceTravelSaveReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<Error> validation = entityService.validateTravelDetails(req);
		//// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			/////// save
			EserviceSaveRes res = entityService.saveTravelDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
    }
    
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
    @PostMapping("/gettraveldetails")
	public ResponseEntity<CommonRes> getMotorDetails(@RequestBody  EserviceTravelGetReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		EserviceTravelGetRes res = entityService.getTravelDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
    
	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/deletetraveldetails")
	public ResponseEntity<CommonRes> deleteMotorDetails(@RequestBody  EserviceTravelDeleteReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		SuccessRes res = entityService.deleteTravelDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	@PreAuthorize("hasAnyRole('ROLE_APPROVER','ROLE_USER')")
	@PostMapping("/getalltraveldetails")
	public ResponseEntity<CommonRes> getallMotorDetails(@RequestBody  EserviceTravelGetAllReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<EserviceTravelGetRes> res = entityService.getallTravelDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

}
