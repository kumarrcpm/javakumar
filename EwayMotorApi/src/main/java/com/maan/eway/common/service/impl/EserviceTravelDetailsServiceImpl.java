/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-11-30 ( Date ISO 2022-11-30 - Time 17:06:34 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.common.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.BrokerCommissionDetails;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CountryMaster;
import com.maan.eway.bean.EserviceSectionDetails;
import com.maan.eway.bean.EserviceTravelDetails;
import com.maan.eway.bean.EserviceTravelGroupDetails;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.LoginBranchMaster;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.bean.ProductGroupMaster;
import com.maan.eway.bean.ProductMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.bean.SectionMaster;
import com.maan.eway.common.req.EserviceSaveRes;
import com.maan.eway.common.req.EserviceTravelDeleteReq;
import com.maan.eway.common.req.EserviceTravelGetAllReq;
import com.maan.eway.common.req.EserviceTravelGetReq;
import com.maan.eway.common.req.EserviceTravelSaveReq;
import com.maan.eway.common.req.TrackingDetailsSaveReq;
import com.maan.eway.common.req.TravelGroupGetRes;
import com.maan.eway.common.req.TravelGroupInsertReq;
import com.maan.eway.common.res.EserviceTravelGetRes;
import com.maan.eway.common.res.SuccessRes;
import com.maan.eway.common.service.EserviceTravelDetailsService;
import com.maan.eway.error.Error;
import com.maan.eway.repository.EServiceSectionDetailsRepository;
import com.maan.eway.repository.EserviceTravelDetailsRepository;
import com.maan.eway.repository.EserviceTravelGroupDetailsRepository;
import com.maan.eway.repository.InsuranceCompanyMasterRepository;
import com.maan.eway.repository.LoginBranchMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.repository.ProductMasterRepository;
import com.maan.eway.repository.SectionMasterRepository;
import com.maan.eway.req.OneTimeTableReq;
import com.maan.eway.res.OneTimeTableRes;
import com.maan.eway.service.OneTimeService;
/**
* <h2>EserviceTravelDetailsServiceimpl</h2>
*/
@Service
@Transactional
public class EserviceTravelDetailsServiceImpl implements EserviceTravelDetailsService {

@Autowired
private EserviceTravelDetailsRepository repository;

@Autowired
private EserviceTravelGroupDetailsRepository groupRepo;

@Autowired
private LoginMasterRepository loginRepo ;

@Autowired
private LoginBranchMasterRepository lbranchRepo; 

@Autowired
private ProductMasterRepository productRepo;

@Autowired
private SectionMasterRepository sectionRepo;

@Autowired
private InsuranceCompanyMasterRepository companyRepo;

@Autowired
private EServiceSectionDetailsRepository eserSecRepo ; 

@Autowired
private GenerateSeqNoServiceImpl genSeqNoService ; 

@Autowired
private EserviceMotorDetailsServiceImpl motorService ; 

@PersistenceContext
private EntityManager em;

@Autowired
private OneTimeService otService;

@Autowired
private TrackingDetailsServiceImpl  trackService ;

private Logger log=LogManager.getLogger(EserviceTravelDetailsServiceImpl.class);

Gson json = new Gson();
/*
public EserviceTravelDetailsServiceImpl(EserviceTravelDetailsRepository repo) {
this.repository = repo;
}

  */
 @Override
    public EserviceTravelDetails create(EserviceTravelDetails d) {

       EserviceTravelDetails entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public EserviceTravelDetails update(EserviceTravelDetails d) {
        EserviceTravelDetails c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public EserviceTravelDetails getOne(long id) {
        EserviceTravelDetails t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }

*/
    @Override
    public List<EserviceTravelDetails> getAll() {
        List<EserviceTravelDetails> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }


	@Override
	public List<Error> validateTravelDetails(EserviceTravelSaveReq req) {
		List<Error> error = new ArrayList<Error>();

		try {

			if (StringUtils.isBlank(req.getBranchCode())) {
				error.add(new Error("01", "BranchCode", "Please Enter BranchCode "));
			} else if (req.getBranchCode().length() > 20) {
				error.add(new Error("01", "Branch Code", "Please Enter Branch Code within 20 Characters"));
			}
//			if (StringUtils.isBlank(req.getAgencyCode())) {
//				error.add(new Error("02", "Agency Code", "Please Enter AgencyCode "));
//			} else if (req.getAgencyCode().length() > 20) {
//				error.add(new Error("02", "Agency Code", "Please Enter Agency Code within 20 Characters"));
//			}
			if (StringUtils.isBlank(req.getProductId())) {
				error.add(new Error("03", "Product Id", "Please Enter ProductId "));
			} else if (req.getProductId().length() > 20) {
				error.add(new Error("03", "Product Id", "Please Enter Product Id within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getSectionId())) {
				error.add(new Error("04", "SectionId", "Please Enter SectionId"));
			} else if (req.getSectionId().length() > 20) {
				error.add(new Error("04", "SectionId", "Please Enter SectionId within 20 Characters"));
			}
			if (StringUtils.isBlank(req.getCompanyId())) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId "));
			} else if (req.getCompanyId().length() > 20) {
				error.add(new Error("05", "CompanyId", "Please Enter CompanyId within 20 Characters"));
			}
			
			if (StringUtils.isBlank(req.getCurrency())) {
				error.add(new Error("10", "Currency", "Please Select Currency"));
			}
			
			// Active / Deactive
			if (StringUtils.isBlank(req.getCovidCoverYn())) {
				error.add(new Error("10", "CovidCover", "Please Select CovidCover Yes/No"));
			} else if ( !(req.getCovidCoverYn().equalsIgnoreCase("Y") || req.getCovidCoverYn().equalsIgnoreCase("N") )) {
				error.add(new Error("10", "CovidCover", "Please Select Valid CovidCover Yes/No"));
			}
			if (StringUtils.isBlank(req.getSportsCoverYn())) {
				error.add(new Error("10", "SportsCover", "Please Select SportsCover Yes/No"));
			} else if ( !(req.getSportsCoverYn().equalsIgnoreCase("Y") || req.getSportsCoverYn().equalsIgnoreCase("N") )) {
				error.add(new Error("10", "SportsCover", "Please Select SportsCover Yes/No"));
			}
			if (StringUtils.isBlank(req.getTerrorismCoverYn())) {
				error.add(new Error("10", "TerrorismCover", "Please Select TerrorismCover Yes/No"));
			} else if ( !(req.getTerrorismCoverYn().equalsIgnoreCase("Y") || req.getTerrorismCoverYn().equalsIgnoreCase("N") )) {
				error.add(new Error("10", "TerrorismCover", "Please Select TerrorismCover Yes/No"));
			}
			if (StringUtils.isBlank(req.getHavepromocode())) {
				error.add(new Error("10", "Havepromocode", "Please Select Havepromocode Yes/No"));
			} else if ( !(req.getHavepromocode().equalsIgnoreCase("Y") || req.getHavepromocode().equalsIgnoreCase("N") )) {
				error.add(new Error("10", "Havepromocode", "Please Select Havepromocode Yes/No"));
			}else if (req.getHavepromocode().equalsIgnoreCase("Y") ) {
				if (StringUtils.isBlank(req.getPromocode())) {
					error.add(new Error("10", "Promocode", "Please Enter Promocode"));
				}else if (req.getPromocode().length() > 20 ) {
					error.add(new Error("10", "Promocode", "Promocode Must Be Under 20 Charecter Only Allowed"));
				}
			}
			
			if (StringUtils.isBlank(req.getDestinationCountry())) {
				error.add(new Error("10", "DestinationCountry", "Please Select DestinationCountry"));
			}
			if (StringUtils.isBlank(req.getPlanTypeId())) {
				error.add(new Error("10", "PlanType", "Please Select PlanType"));
			}
			if (StringUtils.isBlank(req.getSourceCountry())) {
				error.add(new Error("10", "SourceCountry", "Please Select SourceCountry"));
			}
			if (StringUtils.isBlank(req.getTravelCoverDuration())) {
				error.add(new Error("10", "TravelCoverDuration", "Please Select TravelCoverDuration"));
			}
			if (StringUtils.isBlank(req.getTravelCoverId())) {
				error.add(new Error("10", "TravelCoverId", "Please Select TravelCoverId"));
			}
			if (StringUtils.isBlank(req.getTravelId())) {
				error.add(new Error("10", "TravelId", "Please Select TravelId"));
			}
			
			// Age Band Validation
			
			if (StringUtils.isBlank(req.getTotalPassengers())) {
				error.add(new Error("10", "TotalPassengers", "Please Enter TotalPassengers"));
			} else 	if (! req.getTotalPassengers().matches("[0-9]+") ) {
				error.add(new Error("10", "TotalPassengers", "Please Enter Valid Number In TotalPassengers"));
			}
			
			if (StringUtils.isBlank(req.getTravelCoverDuration())) {
				error.add(new Error("10", "TravelCoverDuration", "Please Enter TravelCoverDuration"));
			} else 	if (! req.getTotalPassengers().matches("[0-9]+") ) {
				error.add(new Error("10", "TravelCoverDuration", "Please Enter Valid Number In TravelCoverDuration"));
			} 
			
			// Source Validation
			if( req.getUserType().equalsIgnoreCase("Issuer") && ( req.getSubUserType().equalsIgnoreCase("low") || req.getSubUserType().equalsIgnoreCase("high")
					|| req.getSubUserType().equalsIgnoreCase("both") ) )  {
				if (StringUtils.isBlank(req.getSourceType())) {
					error.add(new Error("10", "SourceType", "Please Select SourceType"));
				} 
				if (StringUtils.isBlank(req.getCustomerCode())) {
					error.add(new Error("10", "CustomerCode", "Please Select CustomerCode"));
				}
				if (StringUtils.isBlank(req.getBrokerCode())) {
					error.add(new Error("10", "SourceCode", "Please Select SourceCode"));
				}
		
			}
			
			if(StringUtils.isNotBlank(req.getSourceType()) && (! req.getSourceType().equalsIgnoreCase("Direct") ) ) {
				if (StringUtils.isBlank(req.getBrokerBranchCode())) {
					error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
				}
			} else if(req.getUserType().equalsIgnoreCase("User") || req.getUserType().equalsIgnoreCase("Broker") ) {
				if (StringUtils.isBlank(req.getBrokerBranchCode())) {
					error.add(new Error("10", "BrokerBranchCode", "Please Enter BrokerBranchCode"));
				}
				
				if (StringUtils.isBlank(req.getBrokerCode())) {
					error.add(new Error("10", "SourceCode", "Please Select BrokerCode"));
				}
			}
//			if (StringUtils.isBlank(req.getBdmCode())) {
//				error.add(new Error("10", "BdmCode", "Please Select BdmCode"));
//			}
//			if (StringUtils.isBlank(req.getSourceType())) {
//				error.add(new Error("10", "SourceType", "Please Select SourceType"));
//			}
//			if (StringUtils.isBlank(req.getCustomerCode())) {
//				error.add(new Error("10", "CustomerCode", "Please Select CustomerCode"));
//			}
//			if (StringUtils.isBlank(req.getExchangeRate())) {
//				error.add(new Error("11", "ExchangeRate", "Please Enter ExchangeRate"));
//			}
			
			
			if (req.getTravelStartDate()==null) {
				error.add(new Error("13", "TravelStartDate", "Please Enter TravelStartDate"));
			} else {
				long MILLS_IN_A_DAY = 1000*60*60*24;
				long days90 = MILLS_IN_A_DAY * 90 ;
				Date today = new Date() ;
				
				Date oneDaybefore = new Date(today.getTime() - MILLS_IN_A_DAY) ;
				Date resticDate = new Date(today.getTime() + days90);
				if( req.getTravelStartDate().before(oneDaybefore) ) {
					error.add(new Error("14", "TravelStartDate", "TravelStartDate  Pass Date Not Allowed"));
				} else if( req.getTravelStartDate().after(resticDate) ) {
					error.add(new Error("14", "TravelStartDate", "TravelStartDate  even after 90 days Not Allowed"));
				}
			}
			if (req.getTravelEndDate()==null) {
				error.add(new Error("14", "TravelEndDate", "Please Enter PolicyEndDate"));
			}else if (req.getTravelStartDate()!=null && req.getTravelEndDate()!=null) {
				if( req.getTravelStartDate().after(req.getTravelEndDate())) {
					error.add(new Error("14", "TravelEndDate", "TravelStartDate After TravelEndDate Not Allwoed"));	
				}
				
			}
			if (StringUtils.isBlank(req.getUserType())) {
				error.add(new Error("25", "UserType", "Please Enter UserType"));
			}
			
			if( StringUtils.isBlank(req.getCreatedBy()) ) {
				
				if(StringUtils.isBlank(req.getApplicationId() ) ){
					error.add(new Error("01", "ApplicationId", "Please Enter ApplicationId"));
				}
				
				if(StringUtils.isBlank(req.getLoginId()) ) {
					error.add(new Error("01", "Login Id", "Please Enter LoginId"));
				} else {
					LoginMaster loginData =  	loginRepo.findByLoginId(req.getCreatedBy());
					if( loginData.getSubUserType().equalsIgnoreCase("bank")  ) {
						if( StringUtils.isBlank(req.getAcExecutiveId())) {
							error.add(new Error("01", "AcExecutiveId", "Please Select AcExecutiveId"));
						}
						if( StringUtils.isBlank(req.getCommissionType())) {
							error.add(new Error("01", "CommissionType", "Please Select CommissionType"));
						}
						
					}
				}
			}
			 
			if(req.getGroupDetails() ==null || req.getGroupDetails().size()<=0 ) {
				error.add(new Error("01", "TravelGroupDetails", "Please Enter Alteast 1 TravelGroupDetails"));
			} else {
				for (TravelGroupInsertReq data :  req.getGroupDetails() ) {
					if (StringUtils.isBlank(data.getGroupId())) {
						error.add(new Error("10", "GroupId", "Please Enter GroupId"));
					} else 	if (! data.getGroupId().matches("[0-9]+") ) {
						error.add(new Error("10", "GroupId", "Please Enter Valid Number In GroupId"));
					} else 	if ( data.getGroupId().equalsIgnoreCase("0") ) {
						error.add(new Error("10", "GroupId", "Please Enter Valid Number In GroupId"));
					}
					
					if (StringUtils.isBlank(data.getGroupMembers())) {
						error.add(new Error("10", "GroupMembers", "Please Enter GroupMembers"));
					} else 	if (! data.getGroupMembers().matches("[0-9]+") ) {
						error.add(new Error("10", "GroupMembers", "Please Enter Valid Number In Members"));
					} else 	if ( data.getGroupMembers().equalsIgnoreCase("0") ) {
						error.add(new Error("10", "GroupMembers", "Please Enter Valid Number In Members"));
					}
					
					
					// Family Validation
					if(StringUtils.isNotBlank(req.getPlanTypeId())  && req.getPlanTypeId().equalsIgnoreCase("3")) {
						
						if (StringUtils.isNotBlank(data.getGroupId()) &&  data.getGroupId().equalsIgnoreCase("1") ) {
							if (StringUtils.isNotBlank(data.getGroupMembers()) &&  data.getGroupMembers().matches("[0-9]+") && Integer.valueOf(data.getGroupMembers()) >3  ) {
								error.add(new Error("10", "GroupMembers", "More Then 3 Kids Not Allowed "));
							}
						}
						if (StringUtils.isNotBlank(data.getGroupId()) &&  data.getGroupId().equalsIgnoreCase("2") ) {
							if (StringUtils.isNotBlank(data.getGroupMembers()) &&  data.getGroupMembers().matches("[0-9]+") && Integer.valueOf(data.getGroupMembers()) >2  ) {
								error.add(new Error("10", "GroupMembers", "More Then 2 Adults Not Allowed "));
							}
						}
						
						if (StringUtils.isNotBlank(data.getGroupId()) && !( data.getGroupId().equalsIgnoreCase("1") || data.getGroupId().equalsIgnoreCase("2")) ) {
							if (StringUtils.isNotBlank(data.getGroupMembers()) ) {
								error.add(new Error("10", "GroupMembers", "Senior , Super Senior , Grand Senior Not Allowed On Family Plan"));
							}
						}
					}
				}
			}
			

			List<EserviceTravelDetails> list = new ArrayList<EserviceTravelDetails>();
			
			if ((StringUtils.isBlank(req.getRequestReferenceNo()))
					&& (StringUtils.isNotBlank(req.getBranchCode())) && (StringUtils.isNotBlank(req.getCompanyId()))
					&&(StringUtils.isNotBlank(req.getCreatedBy())) && (StringUtils.isNotBlank(req.getCovidCoverYn()))
					&& (StringUtils.isNotBlank(req.getCurrency())) && (StringUtils.isNotBlank(req.getCustomerReferenceNo()))
					&& (StringUtils.isNotBlank(req.getDestinationCountry())) && (StringUtils.isNotBlank(req.getExchangeRate()))
					&& (StringUtils.isNotBlank(req.getHavepromocode())) && (StringUtils.isNotBlank(req.getPlanTypeId()))
					&& (StringUtils.isNotBlank(req.getProductId())) && (StringUtils.isNotBlank(req.getPromocode()))
					//&&(StringUtils.isNotBlank(req.getCustomerReferenceNo())) 
					&& (StringUtils.isNotBlank(req.getSectionId()))
					&& (StringUtils.isNotBlank(req.getSourceCountry())) && (StringUtils.isNotBlank(req.getSportsCoverYn()))
					&& (StringUtils.isNotBlank(req.getTerrorismCoverYn())) && (StringUtils.isNotBlank(req.getTotalPassengers()))
					&& (StringUtils.isNotBlank(req.getTravelCoverDuration())) && (StringUtils.isNotBlank(req.getTravelCoverId()))
					&& (StringUtils.isNotBlank(req.getTravelId())) 
					&&( req.getTravelEndDate() !=null ) && (req.getTravelStartDate()!=null )
					) {
				
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<EserviceTravelDetails> query = cb.createQuery(EserviceTravelDetails.class);
				// Find all
				Root<EserviceTravelDetails> b = query.from(EserviceTravelDetails.class);
				// Select
				query.select(b);
				// Where

				Predicate n5 = cb.equal(b.get("branchCode"), req.getBranchCode());
				Predicate n6 = cb.equal(b.get("companyId"), req.getCompanyId());
				Predicate n7 = cb.equal(cb.lower(b.get("createdBy")), req.getCreatedBy().toString().toLowerCase());
				Predicate n8 = cb.equal(cb.lower(b.get("covidCoverYn")), req.getCovidCoverYn().toString().toLowerCase());
				Predicate n9 = cb.equal(cb.lower(b.get("currency")), req.getCurrency().toString().toLowerCase());
				Predicate n10 = cb.equal(cb.lower(b.get("customerReferenceNo")), req.getCustomerReferenceNo().toString().toLowerCase());
				Predicate n11 = cb.equal(cb.lower(b.get("destinationCountry")), req.getDestinationCountry().toString().toLowerCase());
				Predicate n12 = cb.equal(b.get("exchangeRate"), req.getExchangeRate());
				Predicate n13 = cb.equal(cb.lower(b.get("havepromocode")), req.getHavepromocode().toString().toLowerCase());
				Predicate n14 = cb.equal(b.get("planTypeId"), req.getPlanTypeId());
				Predicate n15 = cb.equal(b.get("productId"), req.getProductId());
				Predicate n16 = cb.equal(cb.lower(b.get("promocode")), req.getPromocode().toString().toLowerCase());
				Predicate n17 = cb.equal(b.get("sectionId"), req.getSectionId());
				Predicate n18 = cb.equal(cb.lower(b.get("sourceCountry")), req.getSourceCountry().toString().toLowerCase());
				Predicate n19 = cb.equal(cb.lower(b.get("sportsCoverYn")), req.getSportsCoverYn().toString().toLowerCase());
				Predicate n20 = cb.equal(cb.lower(b.get("terrorismCoverYn")), req.getTerrorismCoverYn().toString().toLowerCase());
				Predicate n21 = cb.equal(b.get("totalPassengers"), req.getTotalPassengers());
				Predicate n22 = cb.equal(b.get("travelCoverDuration"), req.getTravelCoverDuration());
				Predicate n23 = cb.equal(b.get("travelCoverId"), req.getTravelCoverId());
				Predicate n24 = cb.equal(b.get("riskId"), req.getTravelId());
				
				Predicate n25 = cb.equal(b.get("travelEndDate"), req.getTravelEndDate());
				Predicate n26 = cb.equal(b.get("travelStartDate"), req.getTravelStartDate());
				
				query.where(n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,
						n17,n18,n19,n20,n21,n22,n23,n23,n24,n25,n26) ;				
				// Get Result
				TypedQuery<EserviceTravelDetails> result = em.createQuery(query);
				list = result.getResultList();
				
				if (list.size() > 0) {
					error.add(new Error("42", "Already have data for RequestReferenceNo", list.get(0).getRequestReferenceNo()));
				}
			} 
			
			/*
			if( (StringUtils.isNotBlank(req.getLoginId())) && (StringUtils.isNotBlank(req.getCompanyId()))	
					&& (StringUtils.isNotBlank(req.getProductId())) && (StringUtils.isNotBlank(req.getSectionId()))&& (StringUtils.isNotBlank(req.getBrokerCode()))){	
				String policy  =	policyRestriction( req.getLoginId(),req.getBrokerCode(),req.getCompanyId(),req.getProductId(),req.getSectionId());		
				if(!policy.equalsIgnoreCase("Success")) {
					error.add(new Error("43", "Policy Type", "This loginid is not eligible for this type of policy"));

				}
			
			}
*/
			
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			error.add(new Error("42", "Common Error", e.getMessage()));
		}
		return error;
	}

	private String policyRestriction(String loginId, String bdmCode, String companyId,
			String productId, String policyType) {
		// TODO Auto-generated method stub
		String a ="";
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<BrokerCommissionDetails> list = new ArrayList<BrokerCommissionDetails>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BrokerCommissionDetails> query = cb.createQuery(BrokerCommissionDetails.class);

			// Find All
			Root<BrokerCommissionDetails> b = query.from(BrokerCommissionDetails.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<BrokerCommissionDetails> ocpm1 = amendId.from(BrokerCommissionDetails.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			//Predicate a1 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("oaCode"), b.get("oaCode"));
			Predicate a5 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
			Predicate a6 = cb.equal(ocpm1.get("policyType"), b.get("policyType"));
			//Predicate a7 = cb.equal(ocpm1.get("id"), b.get("id"));
			Predicate a8 = cb.equal(ocpm1.get("status"), b.get("status"));

			amendId.where( a2,a3,a4,a5,a6,a8);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("policyType")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("productId"),productId);
			Predicate n4 = cb.equal(b.get("oaCode"),bdmCode);
			Predicate n5 = cb.equal(b.get("loginId"),loginId);
			Predicate n6 = cb.equal(b.get("policyType"),policyType);
			Predicate n7 = cb.equal(b.get("status"),"Y");
			//Predicate n8 = cb.equal(b.get("agencyCode"),agencyCode);
			Predicate n9 = cb.equal(b.get("status"),"R");
			Predicate n10 = cb.or(n7,n9);

			query.where(n1,n2,n3,n4,n5,n6,n10).orderBy(orderList);
			
			// Get Result
			TypedQuery<BrokerCommissionDetails> result = em.createQuery(query);

			list = result.getResultList();
			List<BrokerCommissionDetails> policy = list
					  .stream()
					  .filter(c -> c.getPolicyTypeDesc().equalsIgnoreCase("ALL"))
					  .collect(Collectors.toList());
			if(policy.size()>0 || list.size()>0) {
				a = "Success";
				}
			} catch (Exception e) {

			log.error(e);
			e.printStackTrace();
		}
		return a;
	}

	@Override
	public EserviceSaveRes saveTravelDetails(EserviceTravelSaveReq req) {
		EserviceSaveRes res = new EserviceSaveRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
	//	SimpleDateFormat idf = new SimpleDateFormat("yyMMddmmssSSS");
		EserviceTravelDetails savedata = new EserviceTravelDetails();
		EserviceTravelDetails findData = null;
		String oaCode = "" ;
		try {
			
			String productName =   getCompanyProductMasterDropdown(req.getCompanyId() , req.getProductId()); //productRepo.findByProductIdOrderByAmendIdDesc(Integer.valueOf(req.getProductId()));
			String sectionName =  getProductSectionDropdown(req.getCompanyId() , req.getProductId(), req.getSectionId());// sectionRepo.findBySectionIdOrderByAmendIdDesc(Integer.valueOf(req.getSectionId())); 
			String companyName =  getInscompanyMasterDropdown(req.getCompanyId()) ; // companyRepo.findByCompanyIdOrderByAmendIdDesc(req.getCompanyId());
			
			Integer traId = 0 ;
			String refNo = "" ;
			Date entryDate = null ;
			String createdBy = "" ;
			
			if(StringUtils.isBlank(req.getRequestReferenceNo())) {
				// Save
				entryDate = new Date();
				createdBy = req.getCreatedBy();
			//	Random rand = new Random();
	        //  int random=rand.nextInt(90)+10; 
	             String refShortCode = getListItem (req.getCompanyId() , req.getBranchCode() ,"PRODUCT_SHORT_CODE",req.getProductId() );  //listRepo.findByItemTypeAndItemCodeOrderByItemCodeAsc("MOTOR_CATEGORY",req.getMotorCategory());
	     		
	             refNo = refShortCode +"-"  + genSeqNoService.generateRefNo() ; // idf.format(new Date()) + random ; 
	             res.setResponse("Saved Successfully");
	 			 res.setRequestReferenceNo(refNo);
	 			 res.setCustomerReferenceNo(req.getCustomerReferenceNo());
	 			 res.setTravelId(req.getTravelId()) ;			 
			} 
			else {
				// Update
				refNo = req.getRequestReferenceNo() ;
				findData = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo(),Integer.valueOf(req.getTravelId()));	
				
				if(findData !=null ) {
				entryDate = findData.getEntryDate() ;
				createdBy = findData.getCreatedBy() ;
				res.setResponse("Updated Successfully");
				res.setRequestReferenceNo(refNo);
				res.setCustomerReferenceNo(req.getCustomerReferenceNo());
				res.setTravelId(req.getTravelId()) ;
				
				} else {
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					res.setResponse("Updated Successfully");
					res.setRequestReferenceNo(refNo);
					res.setCustomerReferenceNo(req.getCustomerReferenceNo());
					res.setTravelId(req.getTravelId()) ;
				}
			}
			
			savedata=mapper.map(req,EserviceTravelDetails.class);
			traId = Integer.valueOf(req.getTravelId()) ;
			savedata.setRiskId(traId);			
			savedata.setCreatedBy(createdBy);
			savedata.setEntryDate(entryDate);
			savedata.setRequestReferenceNo(refNo);
			savedata.setBranchCode(  req.getBranchCode()) ;
			savedata.setAcExecutiveId(StringUtils.isBlank(req.getAcExecutiveId())?null :Integer.valueOf(req.getAcExecutiveId()));
			savedata.setApplicationId(req.getApplicationId());
			savedata.setUpdatedBy(req.getCreatedBy());
			savedata.setUpdatedDate(new Date());
			
			//Direct Broker Details
			if( StringUtils.isNotBlank(req.getSourceType()) && req.getSourceType().equalsIgnoreCase("Direct") ) {
				BranchMaster branchData = getCompanyBranch(req.getCompanyId() , req.getBranchCode() ) ;
				savedata.setLoginId(branchData.getDirectBrokerId())		;
				savedata.setBrokerCode(req.getBrokerCode());
				savedata.setBdmCode(req.getBrokerCode());
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(branchData.getBrokerAgencyCode()), "None", req.getCompanyId());
				if( brokerBranchName!=null) {
					savedata.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
					savedata.setBrokerBranchCode(brokerBranchName.getBrokerBranchCode());
			
					oaCode = brokerBranchName.getOaCode() ;
				}
			// OTher Broker Details	
			} else {
				savedata.setLoginId(req.getLoginId())		;
				savedata.setBrokerCode(req.getBrokerCode());
				savedata.setBdmCode(req.getBrokerCode());
				savedata.setBrokerBranchCode(req.getBrokerBranchCode());
				LoginBranchMaster brokerBranchName=lbranchRepo.findByAgencyCodeAndBrokerBranchCodeAndCompanyId(Integer.valueOf(req.getBrokerCode()), req.getBrokerBranchCode(), req.getCompanyId());
				if( brokerBranchName!=null) {
					savedata.setBrokerBranchName(brokerBranchName.getBrokerBranchName());
					savedata.setCustomerCode( brokerBranchName.getCustomerCode() );
					oaCode = brokerBranchName.getOaCode() ;
					
				}
				
			}
			if(req.getSubUserType().equalsIgnoreCase("b2b") || req.getSubUserType().equalsIgnoreCase("b2c")  ) {
				savedata.setSourceType("Broker");
						
			} else if(req.getSubUserType().equalsIgnoreCase("bank")) {
				savedata.setSourceType("Agent" );
			}   else {
				savedata.setSourceType(req.getSourceType() );
				savedata.setCustomerCode(req.getCustomerCode() );
			}
			
			savedata.setSourceType(req.getSourceType() );
			savedata.setCustomerCode(req.getCustomerCode() );
			
			
			// Admin Details
			if( findData !=null ) {
				
				savedata.setAdminLoginId(findData.getAdminLoginId());
				savedata.setAdminRemarks(findData.getAdminRemarks());
				savedata.setReferalRemarks(findData.getReferalRemarks());
				savedata.setRejectReason(findData.getRejectReason());
				savedata.setQuoteNo(findData.getQuoteNo());
				savedata.setCustomerId(findData.getCustomerId());
				savedata.setOldReqRefNo(findData.getOldReqRefNo());
				savedata.setCreatedBy(findData.getCreatedBy());
				savedata.setEntryDate(findData.getEntryDate());
				savedata.setManualReferalYn(findData.getManualReferalYn());
				
			}
			if( StringUtils.isNotBlank(req.getCommissionType())) {
				String commistionDesc =getListItem (req.getCompanyId() , req.getBranchCode() ,"COMMISSION_TYPE",req.getCommissionType());
				savedata.setCommissionTypeDesc(commistionDesc);
			}
			
			String planType = getListItem (req.getCompanyId() , req.getBranchCode() ,"PLAN_TYPE",req.getPlanTypeId() );  //listRepo.findByItemTypeAndItemCodeOrderByItemCodeAsc("MOTOR_CATEGORY",req.getMotorCategory());
			String coverDesc =  getCoverName(req.getCompanyId() , req.getProductId() , req.getSectionId()) ;
			
			savedata.setPlanTypeDesc(planType);
			savedata.setTravelCoverDesc(coverDesc);
			savedata.setProductName(productName);
			savedata.setSectionName(sectionName);
			savedata.setCompanyName(companyName);
			savedata.setExchangeRate(new BigDecimal(req.getExchangeRate()));
			savedata.setCurrency(req.getCurrency());
			String sourceCountry =  getCountryName(req.getSourceCountry());
			String DestinationCountry =  getCountryName(req.getDestinationCountry());
			savedata.setSourceCountryDesc(sourceCountry);
			savedata.setDestinationCountryDesc(DestinationCountry);
			savedata.setPromocode(req.getHavepromocode().equalsIgnoreCase("N")?"0": req.getPromocode());
			// Admin Details
			
			// Endoresment Chagnes
			if(!(req.getEndorsementType()==null || req.getEndorsementType()==0))
				
			 {
			  
				 savedata.setOriginalPolicyNo(req.getOriginalPolicyNo());
				 savedata.setEndorsementDate(req.getEndorsementDate());
				 savedata.setEndorsementRemarks(req.getEndorsementRemarks());
				 savedata.setEndorsementEffdate(req.getEndorsementEffdate());
				 savedata.setEndtPrevPolicyNo(req.getEndtPrevPolicyNo());
				 savedata.setEndtPrevQuoteNo(req.getEndtPrevQuoteNo());
				 savedata.setEndtCount(req.getEndtCount());
				 savedata.setEndtStatus(req.getEndtStatus());
				 savedata.setIsFinaceYn(req.getIsFinaceYn());
				 savedata.setEndtCategDesc(req.getEndtCategDesc());
				 savedata.setEndorsementType(req.getEndorsementType());
				 savedata.setEndorsementTypeDesc(req.getEndorsementTypeDesc());  
			}
			// status
			savedata.setStatus(StringUtils.isBlank(req.getStatus()) ? "Y" : req.getStatus()) ;
			if(savedata.getStatus().equalsIgnoreCase("D") ) {
				//	BigDecimal.ZERO
					
			}
			// Date Differents
			Date periodStart =  req.getTravelStartDate();
			Date periodEnd = req.getTravelEndDate() ;
			String diff = "0";
			
			if(periodStart!=null && periodEnd!=null ) {
				Long diffInMillies = Math.abs(periodEnd.getTime() - periodStart.getTime());
				Long daysBetween =  TimeUnit.DAYS.convert(diffInMillies, TimeUnit.MILLISECONDS) ;
				
				// Check Leap Year
				SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM-dd"); 
				boolean leapYear = LocalDate.parse(sdf2.format(periodEnd) ).isLeapYear();
				diff = String.valueOf(daysBetween==364 &&  leapYear==false ? daysBetween+1 : 
					  daysBetween==364 &&  leapYear==true ? daysBetween+2 : 
					  daysBetween==365 &&  leapYear==true ? daysBetween+1 : daysBetween );
				
			}
			savedata.setTravelCoverDuration(Integer.valueOf(diff));
			repository.saveAndFlush(savedata);
			log.info( "Saved Details Is ---> " + json.toJson(savedata));
			
			// Section Insert
			EserviceSectionDetails secData = new EserviceSectionDetails(); 
			List<EserviceSectionDetails> sectionList =  eserSecRepo.findByRequestReferenceNoAndRiskIdAndProductIdOrderBySectionIdAsc(refNo, savedata.getRiskId(), savedata.getProductId() );
			if (sectionList!=null && sectionList.size()>0 ) {
				eserSecRepo.deleteAll(sectionList);
			}
			mapper.map(savedata, secData);
			secData.setExchageRate(savedata.getExchangeRate());
			secData.setCurrencyId(savedata.getCurrency());
			secData.setSectionDesc(sectionName);
			secData.setRiskId(savedata.getRiskId());
			secData.setUserOpt("N");
			eserSecRepo.saveAndFlush(secData);
			// Delete Tavel Group Details
			long groupCount =  groupRepo.countByRequestReferenceNo(savedata.getRequestReferenceNo());
			if(groupCount > 0 ) {
				groupRepo.deleteByRequestReferenceNo(savedata.getRequestReferenceNo());
			}
			
			List<ProductGroupMaster> groupMaster = getProductGroupMasterDropdown(savedata.getProductId() , savedata.getCompanyId() , savedata.getBranchCode());
			
			// Insert Tavel Group Details
			List<TravelGroupGetRes> travelGroupList = new ArrayList<TravelGroupGetRes>();
			for (TravelGroupInsertReq data : req.getGroupDetails()) {
				EserviceTravelGroupDetails saveGroup = new EserviceTravelGroupDetails();
				
				// Save
				mapper.map(req, saveGroup);
				saveGroup.setTravelId(Integer.valueOf(data.getGroupId()));
				saveGroup.setRequestReferenceNo(savedata.getRequestReferenceNo());	
				saveGroup.setEntryDate(new Date());
				saveGroup.setStatus("Y");
				saveGroup.setStart(groupMaster.size() > 0 ? groupMaster.stream().filter( o -> o.getGroupId().equals(Integer.valueOf(data.getGroupId())) ).collect(Collectors.toList()).get(0).getGroupFrom() : null ) ;
				saveGroup.setEnd(groupMaster.size() > 0 ? groupMaster.stream().filter( o -> o.getGroupId().equals(Integer.valueOf(data.getGroupId())) ).collect(Collectors.toList()).get(0).getGroupTo() : null);
				saveGroup.setGroupId(Integer.valueOf(data.getGroupId()));
				saveGroup.setGrouppMembers(Integer.valueOf(data.getGroupMembers()));
				saveGroup.setGroupDesc(groupMaster.size() > 0 ? groupMaster.stream().filter( o -> o.getGroupId().equals(Integer.valueOf(data.getGroupId())) ).collect(Collectors.toList()).get(0).getGroupDesc() : "" );
				groupRepo.saveAndFlush(saveGroup);
				
				// Group Res
				TravelGroupGetRes groupRes = new TravelGroupGetRes(); 
				groupRes.setGroupId(saveGroup.getGroupId().toString());
				groupRes.setGroupMembers(saveGroup.getGrouppMembers().toString());
				groupRes.setTravelId(saveGroup.getTravelId().toString());
				travelGroupList.add(groupRes);
				
			}
			
			res.setGroupDetails(travelGroupList);
			res.setSourceCountryDesc(sourceCountry);
			res.setDesctinationCountryDesc(DestinationCountry);
			// Insert Tracking
			{
				TrackingDetailsSaveReq trackingReq=new TrackingDetailsSaveReq();
				trackingReq.setProductId(req.getProductId());
				trackingReq.setStatus(req.getStatus());
				trackingReq.setBranchCode(req.getBranchCode());
				if( findData !=null ) {
					trackingReq.setQuoteNo(findData.getQuoteNo());
					}else {
						trackingReq.setQuoteNo("");
					}
				trackingReq.setRiskId(traId.toString());
				trackingReq.setCompanyId(req.getCompanyId());
				trackingReq.setPolicyNo(req.getPolicyNo());
				trackingReq.setOriginalPolicyNo(req.getOriginalPolicyNo());
				trackingReq.setCreatedby(req.getCreatedBy());
				trackingReq.setRequestReferenceNo(refNo);
				trackingReq.setRemarks(req.getEndorsementRemarks());
				trackService.insertTrackingDetails(trackingReq);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		OneTimeTableRes otRes=null;
		try {
			// One Time Table Thread Call 
			OneTimeTableReq otReq = new OneTimeTableReq();
			EserviceTravelDetails traData = repository.findByRequestReferenceNoAndRiskId(savedata.getRequestReferenceNo() , savedata.getRiskId() );
			otReq.setRequestReferenceNo(savedata.getRequestReferenceNo());
			otReq.setId(traData.getRiskId());
			otReq.setAgencyCode(StringUtils.isBlank(oaCode) ? traData.getBrokerCode() : oaCode );
			otReq.setBranchCode(traData.getBranchCode());
			otReq.setInsuranceId(traData.getCompanyId());
			otReq.setProductId(Integer.parseInt(traData.getProductId()));
			otReq.setSectionId(Integer.parseInt(traData.getSectionId()));
			otReq.setGroupDetails(req.getGroupDetails());
			
			otRes = otService.call_OT_Insert(otReq).get(0);
			res.setVdRefNo(otRes.getVdRefNo());
			res.setCdRefNo(otRes.getCdRefNo());
			res.setMsrefno(otRes.getMsRefNo());
			res.setInsuranceId(traData.getCompanyId());
			res.setSectionId(traData.getSectionId());
			res.setProductId(traData.getProductId());
			res.setCreatedBy(traData.getCreatedBy());
			
			
		} catch (Exception e) {
			e.printStackTrace();
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}
	
	public BranchMaster getCompanyBranch( String insuranceId , String branchCode) {
		BranchMaster branchData = new BranchMaster();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat idf = new SimpleDateFormat("yyMMddhhssmmss");
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			// Login Data
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
			List<BranchMaster> branchlist = new ArrayList<BranchMaster>();
			
			// Find All
			Root<BranchMaster>    c = query.from(BranchMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("branchCode")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			effectiveDate.where(a1,a2,a3);
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode") );
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			effectiveDate2.where(a4,a5,a6);
			
			 // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 =cb.equal(c.get("companyId"), insuranceId );
			Predicate n6 =cb.equal(c.get("branchCode"), branchCode);
			query.where(n1,n2,n3,n5,n6).orderBy(orderList);	
			
			// Get Result
			TypedQuery<BranchMaster> result = em.createQuery(query);			
			branchlist =  result.getResultList();
			
			branchData = branchlist.get(0);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return branchData;
	}
	
	public String getInscompanyMasterDropdown(String companyId ) {
		String companyName = "" ;
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			javax.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			javax.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
		    // Where	
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			companyName  = list.size()> 0 ? list.get(0).getCompanyName() : "";	
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return companyName;
	}
	
	
	public String getCompanyProductMasterDropdown(String companyId , String productId) {
		String productName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query=  cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));
			
			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),companyId);
			Predicate n5 = cb.equal(c.get("productId"),productId);
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			productName  = list.size()> 0 ? list.get(0).getProductName() : "";	
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return productName;
		}
	
	
	public String getProductSectionDropdown(String companyId , String productId , String sectionId) {
		String sectionName = "";
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			
			// Find All
			Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));
			
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3,a4);
			
			// Effective Date End
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId") );
			
			javax.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6,a7,a8);

		    // Where	
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),companyId);
			javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
			Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
			query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			sectionName = list.size()> 0 ? list.get(0).getSectionName() : "";	
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return sectionName;
	}
	
	public List<ProductGroupMaster> getProductGroupMasterDropdown(String productId , String companyId , String branchCode ) {
		List<ProductGroupMaster> list = new ArrayList<ProductGroupMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductGroupMaster> query = cb.createQuery(ProductGroupMaster.class);
			
			// Find All
			Root<ProductGroupMaster> c = query.from(ProductGroupMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<ProductGroupMaster> ocpm1 = effectiveDate.from(ProductGroupMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("groupId"), ocpm1.get("groupId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a5 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			effectiveDate.where(a1, a2, a3, a4, a5);
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<ProductGroupMaster> ocpm2 = effectiveDate2.from(ProductGroupMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("groupId"), ocpm2.get("groupId"));
			Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a9 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a10 = cb.equal(c.get("productId"), ocpm2.get("productId"));

			effectiveDate2.where(a6, a7, a8, a9, a10);
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			Predicate n8 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n6 = cb.equal(c.get("branchCode"), "99999");
			Predicate n7 = cb.or(n5, n6);
			query.where(n1, n2, n3, n4, n7, n8).orderBy(orderList);
			// Get Result
			TypedQuery<ProductGroupMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getGroupId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ProductGroupMaster::getGroupDesc));
			
		}catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return list;
		}
	
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

public synchronized String getListItem(String insuranceId , String branchCode, String itemType, String itemCode) {
	String itemDesc = "" ;
	List<ListItemValue> list = new ArrayList<ListItemValue>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
		// Find All
		Root<ListItemValue> c = query.from(ListItemValue.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		
		// Effective Date Start Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2);
		// Effective Date End Max Filter
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a3,a4);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n12 = cb.equal(c.get("status"),"R");
		Predicate n13 = cb.or(n1,n12);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
		Predicate n5 = cb.equal(c.get("companyId"), "99999");
		Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		Predicate n8 = cb.or(n4,n5);
		Predicate n9 = cb.or(n6,n7);
		Predicate n10 = cb.equal(c.get("itemType"),itemType );
		Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
		query.where(n13,n2,n3,n8,n9,n10,n11).orderBy(orderList);
		// Get Result
		TypedQuery<ListItemValue> result = em.createQuery(query);
		list = result.getResultList();
		
		itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ; 
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return itemDesc ;
}

public String getCoverName(String companyId , String productId , String sectionId ) {
	String sectionName = "" ;
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
		today   = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
		List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
		
		// Find All
		Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
		
		// Select
		query.select(c );
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("sectionName")));
		
		// Effective Date Max Filter
		Subquery<Long> effectiveDate = query.subquery(Long.class);
		Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
		effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
		Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
		Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
		Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2,a3,a4);
		
		// Effective Date End
		Subquery<Long> effectiveDate2 = query.subquery(Long.class);
		Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
		effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
		javax.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
		Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
		Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId") );
		
		javax.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a5, a6,a7,a8);

	    // Where	
		javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
		javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		javax.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),companyId);
		javax.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), productId);
		javax.persistence.criteria.Predicate n6 = cb.equal(c.get("sectionId"), sectionId);
		query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		
		sectionName = list.size()> 0 ? list.get(0).getSectionName() : "" ; 
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return sectionName;
}
/*
    @Override
    public boolean delete(long id) {
        try {
            repository.deleteById(id);
            return true;

        } catch (Exception ex) {
			log.error(ex);
            return false;
        }
    }

 */


	@Override
	public EserviceTravelGetRes getTravelDetails(EserviceTravelGetReq req) {
		EserviceTravelGetRes res = new EserviceTravelGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			EserviceTravelDetails data = repository.findByRequestReferenceNoAndRiskId( req.getRequestReferenceNo(), Integer.valueOf(req.getTravelId()));
			res = mapper.map(data, EserviceTravelGetRes.class);
			res.setQuoteNo(data.getQuoteNo()!=null?data.getQuoteNo() :"" );
			res.setCustomerId(data.getCustomerId()!=null ? data.getCustomerId() : "" );
			res.setTravelId(data.getRiskId().toString());
			// Group Details
			List<TravelGroupGetRes> travelGroupList = new ArrayList<TravelGroupGetRes>();
			List<EserviceTravelGroupDetails> groupDatas = groupRepo.findByRequestReferenceNoOrderByGroupId(req.getRequestReferenceNo());
			for (EserviceTravelGroupDetails groupData :  groupDatas ) {
				TravelGroupGetRes  travelGroup = new TravelGroupGetRes();
				travelGroup.setGroupId(groupData.getGroupId().toString());
				travelGroup.setGroupMembers(groupData.getGrouppMembers().toString());
				travelGroup.setTravelId(groupData.getGroupId().toString());	
				travelGroupList.add(travelGroup);		
			}
			res.setGroupDetails(travelGroupList);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}
	
	
	@Override
	public SuccessRes deleteTravelDetails(EserviceTravelDeleteReq req) {
		SuccessRes res = new SuccessRes();
		try {
			EserviceTravelDetails findData = repository.findByRequestReferenceNoAndRiskId(req.getRequestReferenceNo() , Integer.valueOf(req.getTravelId()));
			if(findData !=null ) {
				repository.delete(findData);
				res.setResponse("Successfully Updated");
				res.setSuccessId(req.getRequestReferenceNo());
				
			} else {
				res.setResponse("Data Not Found");
				res.setSuccessId(req.getRequestReferenceNo());
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}
	
	
	@Override
	public List<EserviceTravelGetRes> getallTravelDetails(EserviceTravelGetAllReq req) {
		List<EserviceTravelGetRes> reslist = new ArrayList<EserviceTravelGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<EserviceTravelDetails> datas = repository.findByRequestReferenceNoOrderByRiskIdAsc(req.getRequestReferenceNo());
			for (EserviceTravelDetails data : datas) {
				EserviceTravelGetRes res = new EserviceTravelGetRes();
				res = mapper.map(data, EserviceTravelGetRes.class);
				res.setQuoteNo(data.getQuoteNo()!=null?data.getQuoteNo() :"" );
				res.setCustomerId(data.getCustomerId()!=null ? data.getCustomerId() : "" );
				res.setTravelId(data.getRiskId().toString());
				reslist.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return reslist;
	}

	
	public String getCountryName(String countryId) {
		String countryName = "";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CountryMaster> query = cb.createQuery(CountryMaster.class);
			List<CountryMaster> list = new ArrayList<CountryMaster>();

			// Find All
			Root<CountryMaster> c = query.from(CountryMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("countryName")));

			// Effective Date Start Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CountryMaster> ocpm1 = effectiveDate.from(CountryMaster.class);
			effectiveDate.select(cb.max(ocpm1.get("effectiveDateStart")));
			javax.persistence.criteria.Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			javax.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2);
			
			// Effective Date End Max Filter
			Subquery<Long> effectiveDate2 = query.subquery(Long.class);
			Root<CountryMaster> ocpm2 = effectiveDate2.from(CountryMaster.class);
			effectiveDate2.select(cb.max(ocpm2.get("effectiveDateEnd")));
			javax.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			javax.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);

			// Where
			javax.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			javax.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			javax.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			javax.persistence.criteria.Predicate n4 = cb.equal(c.get("countryId"), countryId);
			
			query.where(n1, n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<CountryMaster> result = em.createQuery(query);
			list = result.getResultList();

			countryName = list.get(0).getCountryName();
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return countryName;
	}
}
