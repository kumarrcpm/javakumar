/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-10-06 ( Date ISO 2022-10-06 - Time 15:40:39 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.service.impl;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;

import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.RestTemplate;
import org.apache.commons.lang3.StringUtils;


import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.MotorVehicleInfo;
import com.maan.eway.bean.MotorVehicleInfoArch;
import com.maan.eway.error.Error;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.MotorVehicleInfoArchRepository;
import com.maan.eway.repository.MotorVehicleInfoRepository;
import com.maan.eway.req.MotorTiraMsgReq;
import com.maan.eway.req.MotorVehicleInfoGetAllReq;
import com.maan.eway.req.MotorVehicleInfoGetReq;
import com.maan.eway.req.MotorVehicleInfoSaveReq;
import com.maan.eway.req.MotorVerificationReq;
import com.maan.eway.req.TiraMsg;
import com.maan.eway.req.VerificationDetailsReq;
import com.maan.eway.res.MotorSaveRes;
import com.maan.eway.res.MotorTiraMsgRes;
import com.maan.eway.res.MotorVehicleInfoRes;
import com.maan.eway.res.MotorVerificationRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.ExternalApiCallService;
import com.maan.eway.service.RegulatoryInfoService;

/**
* <h2>MotorVehicleInfoServiceimpl</h2>
*/
@Service
@Transactional
public class RegulatoryInfoServiceImpl implements RegulatoryInfoService {

@Autowired
private MotorVehicleInfoRepository repository;

@Autowired
private MotorVehicleInfoArchRepository motorArchRepo;
@Autowired
private ListItemValueRepository constDet;
@Lazy
@Autowired
private ExternalApiCallService externalApiCallService;

private Logger log=LogManager.getLogger(RegulatoryInfoServiceImpl.class);

Gson json = new Gson();

	@Override
	public SuccessRes saveMotorInfo(TiraMsg req, MotorTiraMsgRes motorRes) {
		SuccessRes res = new SuccessRes();
		SimpleDateFormat arf = new SimpleDateFormat("yyMMddhhmmsss")  ;
		DozerBeanMapper dz = new DozerBeanMapper(); 
		 try {
			 	String regNo = req.getMotorVerificationReq().getVerificationDtl().getMotorRegistrationNumber() ;
			 	String chassisNo = req.getMotorVerificationReq().getVerificationDtl().getMotorChassisNumber() ;
			 	
			 	MotorVehicleInfo findData = repository.findByResRegNumberAndResChassisNumber(regNo , chassisNo) ;
				if(findData!=null  ) {
					repository.delete(findData);
					MotorVehicleInfoArch archData   = new MotorVehicleInfoArch();  
					archData   = dz.map(findData, MotorVehicleInfoArch.class);
					archData.setArchId(arf.format(new Date()) );
					motorArchRepo.save(archData);
				}
				
				MotorVehicleInfo saveInfo = new MotorVehicleInfo();
			 	
			 	// Request
			 	MotorVerificationReq motorVerReq = req.getMotorVerificationReq() ;
			 	
			 	//saveInfo.setCreatedBy(motorVerReq.getVerificationHdr().getCreatedBy() );
			 	saveInfo.setEntryDate(new Date());
			 	saveInfo.setStatus("Y");
			 	saveInfo.setReqChassisNumber(motorVerReq.getVerificationDtl().getMotorChassisNumber()=="" ? null : motorVerReq.getVerificationDtl().getMotorChassisNumber() );	
			 	saveInfo.setReqCompanyCode(motorVerReq.getVerificationHdr().getCompanyCode() );
			 	saveInfo.setReqMotorCategory(motorVerReq.getVerificationDtl().getMotorCategory()==null ? null : Integer.valueOf(motorVerReq.getVerificationDtl().getMotorCategory()) );
			 	saveInfo.setReqMsgSignature(req.getMsgSignature());
			 	saveInfo.setReqRegNumber(motorVerReq.getVerificationDtl().getMotorRegistrationNumber()=="" ? null : motorVerReq.getVerificationDtl().getMotorRegistrationNumber());
			 	saveInfo.setReqMsgSignature(req.getMsgSignature());
			 	saveInfo.setReqRequestId(motorVerReq.getVerificationHdr().getRequestId());
			 	saveInfo.setReqSystemCode(motorVerReq.getVerificationHdr().getSystemCode());
			 	
			 	// Response
			 	MotorVerificationRes motorVerRes = motorRes.getMotorVerificationRes() ;
				
			 	saveInfo.setResAxleDistance(motorVerRes.getVerificationDtl().getAxleDistance()==null?null : Double.valueOf(motorVerRes.getVerificationDtl().getAxleDistance()) );
			 	saveInfo.setResBodyType(motorVerRes.getVerificationDtl().getBodyType());
			 	saveInfo.setResChassisNumber((motorVerRes.getVerificationDtl().getChassisNumber()));
			 	saveInfo.setResColor((motorVerRes.getVerificationDtl().getColor()));
			 	saveInfo.setResEngineCapacity(motorVerRes.getVerificationDtl().getEngineCapacity());
			 	saveInfo.setResEngineNumber(motorVerRes.getVerificationDtl().getEngineNumber());
			 	saveInfo.setResFuelUsed(motorVerRes.getVerificationDtl().getFuelUsed());
			 	saveInfo.setResGrossWeight(motorVerRes.getVerificationDtl().getGrossWeight()==null?null : Double.valueOf(motorVerRes.getVerificationDtl().getGrossWeight()) );
			 	saveInfo.setResMake(motorVerRes.getVerificationDtl().getMake());
			 	saveInfo.setResModel(motorVerRes.getVerificationDtl().getModel());
			 	saveInfo.setResMotorCategory(motorVerRes.getVerificationDtl().getMotorCategory()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getMotorCategory()) );
			 	saveInfo.setResMsgSignature(motorRes.getMsgSignature());
			 	saveInfo.setResNumberOfAxles(motorVerRes.getVerificationDtl().getNumberOfAxles()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getNumberOfAxles()) );
			 	saveInfo.setResOwnerCategory(motorVerRes.getVerificationDtl().getOwnerCategory());
			 	saveInfo.setResOwnerName(motorVerRes.getVerificationDtl().getOwnerName());
			 	saveInfo.setResRegNumber(motorVerRes.getVerificationDtl().getRegistrationNumber());
			 	saveInfo.setResRequestId(motorVerRes.getVerificationHdr().getRequestId());
			 	saveInfo.setResResponseId(motorVerRes.getVerificationHdr().getResponseId());
			 	saveInfo.setResSittingCapacity(motorVerRes.getVerificationDtl().getSittingCapacity()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getSittingCapacity())  );
			 	saveInfo.setResStatusCode(motorVerRes.getVerificationHdr().getResponseStatusCode());
			 	saveInfo.setResStatusDesc(motorVerRes.getVerificationHdr().getResponseStatusDesc());
			 	saveInfo.setResTareWeight(motorVerRes.getVerificationDtl().getTareWeight()==null?null : Double.valueOf(motorVerRes.getVerificationDtl().getTareWeight()) );
			 	saveInfo.setResYearOfManufacture(motorVerRes.getVerificationDtl().getYearOfManufacture()==null?null : Integer.valueOf(motorVerRes.getVerificationDtl().getYearOfManufacture()) );
			 	
			 	repository.save(saveInfo);
			 	
			 	log.info(" Saved Details is ---> " + json.toJson(saveInfo) );
			 	
		 } catch (Exception e) {
			 e.printStackTrace();
			 log.info("Exception is ---> " + e.getMessage());
			 return null ;
		 }
			return res;
		}


	@Override
	public MotorVehicleInfoRes getVehicleInfo(MotorVehicleInfoGetReq req) {

		MotorVehicleInfoRes res = new MotorVehicleInfoRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		MotorVehicleInfo data=new MotorVehicleInfo();
		ListItemValue itemValue=new ListItemValue();
		TiraMsg tiraReq = new TiraMsg();
		try {
			itemValue=constDet.findByItemTypeAndStatus("NO_OF_DAYS","Y");
			Date entryDate = null;
			Date today = new Date();
	
			if (StringUtils.isBlank(req.getReqChassisNumber())) {
			// Fetch Data By Register No
				data = repository.findByResRegNumber(req.getReqRegNumber());
				if (data != null) {
	
					entryDate = data.getEntryDate();
					long dateBeforeInMs = entryDate.getTime();
					long dateAfterInMs = today.getTime();

					long timeDiff = Math.abs(dateAfterInMs - dateBeforeInMs);

					long daysDiff = TimeUnit.DAYS.convert(timeDiff, TimeUnit.MILLISECONDS);
				
					if (daysDiff >= Integer.valueOf(itemValue.getItemValue()) && data.getPolicyYn().equalsIgnoreCase("N")) {
						VerificationDetailsReq verReq1 = new VerificationDetailsReq();
						verReq1.setMotorRegistrationNumber(req.getReqRegNumber());

						MotorVerificationReq verReq2 = new MotorVerificationReq();
						verReq2.setVerificationDtl(verReq1);

						tiraReq.setMotorVerificationReq(verReq2);

						externalApiCallService.getSampleData(tiraReq);

						data = repository.findByResRegNumber(req.getReqRegNumber());
					}else {
						data = repository.findByResRegNumber(req.getReqRegNumber());
					}

				} else if (data == null) {
					VerificationDetailsReq verReq1 = new VerificationDetailsReq();
					verReq1.setMotorChassisNumber(req.getReqChassisNumber());

					MotorVerificationReq verReq2 = new MotorVerificationReq();
					verReq2.setVerificationDtl(verReq1);

					tiraReq.setMotorVerificationReq(verReq2);
					externalApiCallService.getSampleData(tiraReq);
					data = repository.findByResRegNumber(req.getReqRegNumber());
				} 
				
			// Fetch Data By Chassis No
			} else {
				
				data = repository.findByResChassisNumber(req.getReqChassisNumber());
			
				if (data != null) {
					entryDate = data.getEntryDate();
					long dateBeforeInMs = entryDate.getTime();
					long dateAfterInMs = today.getTime();

					long timeDiff = Math.abs(dateAfterInMs - dateBeforeInMs);

					long daysDiff = TimeUnit.DAYS.convert(timeDiff, TimeUnit.MILLISECONDS);
					if (daysDiff >= Integer.valueOf(itemValue.getItemValue()) && data.getPolicyYn().equalsIgnoreCase("N")) {
						VerificationDetailsReq verReq1 = new VerificationDetailsReq();
						verReq1.setMotorChassisNumber(req.getReqChassisNumber());

						MotorVerificationReq verReq2 = new MotorVerificationReq();
						verReq2.setVerificationDtl(verReq1);

						tiraReq.setMotorVerificationReq(verReq2);

						externalApiCallService.getSampleData(tiraReq);

						data = repository.findByResChassisNumber(req.getReqChassisNumber());
					}else {
						data = repository.findByResChassisNumber(req.getReqChassisNumber());
					}

				} else {
					VerificationDetailsReq verReq1 = new VerificationDetailsReq();
					verReq1.setMotorChassisNumber(req.getReqChassisNumber());

					MotorVerificationReq verReq2 = new MotorVerificationReq();
					verReq2.setVerificationDtl(verReq1);

					tiraReq.setMotorVerificationReq(verReq2);
					externalApiCallService.getSampleData(tiraReq);
					data = repository.findByResRegNumber(req.getReqChassisNumber());
				}
			}
			res = mapper.map(data, MotorVehicleInfoRes.class);
			res.setReqRegNumber(data.getResRegNumber());
			res.setReqChassisNumber(data.getResChassisNumber());
			

		} catch (Exception e) {
			 e.printStackTrace();
			 log.info("Exception is ---> " + e.getMessage());
			 return null ;

		}
		return res;
	}


	@Override
	public List<MotorVehicleInfoRes> getallVehicleInfo(MotorVehicleInfoGetAllReq req) {
		List<MotorVehicleInfoRes> resList = new ArrayList<MotorVehicleInfoRes>();

		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Calendar cal = new GregorianCalendar();

			Date today = new Date();
			
			cal.setTime(req.getEffectiveDateStart());  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			
			Date endDate = req.getEffectiveDateEnd();
			
			cal.setTime(req.getEffectiveDateEnd());  cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 59) ;
			endDate = cal.getTime() ;
			
			// Limit , Offset
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());
			Pageable paging = PageRequest.of(limit, offset, Sort.by("entryDate").descending());

			// Find
			Page<MotorVehicleInfo> VehicleDetails = repository.findByEntryDateBetween(paging ,effDate,endDate);

			// Map
			for (MotorVehicleInfo data : VehicleDetails.getContent()) {
				MotorVehicleInfoRes res = new MotorVehicleInfoRes();

				res = mapper.map(data, MotorVehicleInfoRes.class);

				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}


	@Override
	public SuccessRes saveMotorInfo(MotorTiraMsgReq req, MotorTiraMsgRes res) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public MotorSaveRes saveVehicleInfo(MotorVehicleInfoSaveReq req) {
		MotorSaveRes res = new MotorSaveRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		SimpleDateFormat arf = new SimpleDateFormat("yyMMddmmssSSS"); 
		try {
			String regNo = req.getResRegNumber() ;
		 	String chassisNo = req.getResChassisNumber();
		 	MotorVehicleInfo saveInfo = new MotorVehicleInfo();
		 	
		 	MotorVehicleInfo findData = repository.findByResRegNumberAndResChassisNumber(regNo , chassisNo) ;
		 	
		 	String policyYn = "N" ;
		 	
			if(findData!=null  && findData.getPolicyYn().equalsIgnoreCase("N") ) {
				saveInfo = findData ;
				
				policyYn  = "N";
				repository.delete(findData);
				MotorVehicleInfoArch archData   = new MotorVehicleInfoArch();  
				archData   = mapper.map(findData, MotorVehicleInfoArch.class);
				archData.setArchId("AI-" + arf.format(new Date()) );
				motorArchRepo.save(archData);
			} else if( findData!=null){
				saveInfo = findData ;
				policyYn = findData.getPolicyYn(); 
			}
			
			if  (policyYn.equalsIgnoreCase("N") ) {
				
				saveInfo = mapper.map(req, MotorVehicleInfo.class);
				saveInfo.setEntryDate(new Date());
				saveInfo.setReqChassisNumber(req.getResChassisNumber());
				saveInfo.setReqRegNumber(req.getResRegNumber());
				saveInfo.setPolicyYn("N");
				saveInfo.setSavedFrom("Customer");
				saveInfo.setStatus("Y");
				saveInfo.setReqMotorCategory(Integer.valueOf(req.getResMotorCategory()));
				saveInfo.setResMotorCategory(Integer.valueOf(req.getResMotorCategory()));
				
			 	repository.save(saveInfo);
			 	
			 	log.info(" Saved Details is ---> " + json.toJson(saveInfo) );

			}
			
			 MotorVehicleInfoRes showVehicleInfo = new  MotorVehicleInfoRes();
			 mapper.map(saveInfo, showVehicleInfo);
			res.setResponse("Saved Successfully");
			res.setShowVehicleInfo(showVehicleInfo );;
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}


	@Override
	public List<Error> validateVehicleInfo(MotorVehicleInfoSaveReq req) {
		 List<Error> errors = new ArrayList<Error>();
		 try {
			 if (StringUtils.isBlank(req.getCreatedBy())) {
				 errors.add(new Error("01", "CreatedBy" , "Please Add CreatedBy"));
			 }
			 if (StringUtils.isBlank(req.getResAxleDistance())) {
				 errors.add(new Error("02", "ResAxleDistance" , "Please Enter ResAxleDistance"));
			 }else if (Integer.valueOf(req.getResAxleDistance())<0) {
				 errors.add(new Error("02", "ResAxleDistance" , "Please Enter Non-Negative Value "));
			 }
			 if (StringUtils.isBlank(req.getResBodyType())) {
				 errors.add(new Error("03", "BodyType" , "Please Select BodyType"));
			 }
			 if (StringUtils.isBlank(req.getResChassisNumber())) {
				 errors.add(new Error("04", "ChassisNo" , "Please Enter ChassisNo"));
			 }
			 
			 else if (StringUtils.isNotBlank(req.getResChassisNumber())&& (!req.getResChassisNumber().matches("[a-zA-Z0-9]+"))) {
				 errors.add(new Error("04", "ChassisNo" , "Please Enter ChassisNo in Correct Format"));
			 } else  {
				 
				 MotorVehicleInfo findData = repository.findByResChassisNumber(req.getResChassisNumber()) ;
				 if( findData!=null ) {
					 errors.add(new Error("04", "ChassisNo" , "ChassisNo Already Exist"));
				 }
				 
				 
			 }
			 
			 
			 if (StringUtils.isBlank(req.getResColor())) {
				 errors.add(new Error("05", "Color" , "Please Select Color"));
			 }
			 if (StringUtils.isBlank(req.getResEngineCapacity())) {
				 errors.add(new Error("06", "Engine Capacity" , "Please Enter Engine Capacity"));
			 } else if (! req.getResEngineCapacity().matches("[0-9.]+") ) {
				 errors.add(new Error("06", "Engine Capacity" , "Please Enter Valid Number in Engine Capacity"));
			 }
			 else if (StringUtils.isNotBlank(req.getResEngineCapacity())&& req.getResEngineCapacity().equalsIgnoreCase("0")){
				 errors.add(new Error("06", "Engine Capacity" , "Please Enter Valid Capacity as Engine Capacity"));				 
			 }
			 
			 if (StringUtils.isBlank(req.getResEngineNumber())) {
				 errors.add(new Error("07", "EngineNumber" , "Please Enter EngineNumber"));
			 }

			 else if (StringUtils.isNotBlank(req.getResEngineNumber())&& (!req.getResEngineNumber().matches("[a-zA-Z0-9]+"))) {
				 errors.add(new Error("07", "EngineNumber" , "Please Enter EngineNumber in Correct Format"));
			 }
			 
			 if (StringUtils.isNotBlank(req.getResChassisNumber()) && StringUtils.isNotBlank(req.getResEngineNumber())
						&& req.getResChassisNumber().equalsIgnoreCase(req.getResEngineNumber())) {
					errors.add(new Error("07", "EngineNumber", "EngineNumber Is Not Same as Chassis Number"));
				}
			 
			 
			 
			 if (StringUtils.isBlank(req.getResFuelUsed())) {
				 errors.add(new Error("08", "FuelUsed" , "Please Select FuelUsed"));
			 }
			 if (StringUtils.isBlank(req.getResGrossWeight())) {
				 errors.add(new Error("09", "GrossWeight" , "Please Enter GrossWeight"));
			 } else if (! req.getResGrossWeight().matches("[0-9.]+") ) {
				 errors.add(new Error("09", "GrossWeight" , "Please Enter Valid Number in GrossWeight"));
			 }
			 
			 if (StringUtils.isBlank(req.getResMake())) {
				 errors.add(new Error("10", "Make" , "Please Select Make"));
			 }
			 if (StringUtils.isBlank(req.getResModel())) {
				 errors.add(new Error("11", "Model" , "Please Select Model"));
			 }
			 if (StringUtils.isBlank(req.getResMotorCategory())) {
				 errors.add(new Error("12", "MotorCategory" , "Please Select MotorCategory"));
			 }
			 if (StringUtils.isBlank(req.getResMotorUsage())) {
				 errors.add(new Error("13", "MotorUsage" , "Please Select MotorUsage"));
			 }
			 if (StringUtils.isBlank(req.getResNumberOfAxles())) {
				 errors.add(new Error("14", "NumberOfAxles" , "Please Enter NumberOfAxles"));
			 } else if (! req.getResNumberOfAxles().matches("[1-9]+") ) {
				 errors.add(new Error("14", "ResNumberOfAxles" , "Please Enter Valid Number in ResNumberOfAxles"));
			 }else if (Integer.valueOf(req.getResNumberOfAxles())>5)  {
				 errors.add(new Error("14", "ResNumberOfAxles" , "Please Enter No Of Axle's Less Than or Equal to 5"));
			 }

			 if (StringUtils.isBlank(req.getResOwnerCategory())) {
				 errors.add(new Error("15", "OwnerCategory" , "Please Select OwnerCategory"));
			 }
			 
			 if (StringUtils.isBlank(req.getResOwnerName())) {
				 errors.add(new Error("16", "OwnerName" , "Please Enter OwnerName"));
			 }
			 else if (StringUtils.isNotBlank(req.getResOwnerName())&& (!req.getResOwnerName().matches("[a-zA-Z ]+"))) {
				 errors.add(new Error("17", "OwnerName" , "Please Enter OwnerName in Correct Format"));
			 }
			 if (StringUtils.isBlank(req.getResRegNumber())) {
				 errors.add(new Error("17", "RegNumber" , "Please Enter RegNumber"));
			 }
			 else if (StringUtils.isNotBlank(req.getResRegNumber())&& (!req.getResRegNumber().matches("[a-zA-Z0-9]+"))) {
				 errors.add(new Error("17", "RegNumber" , "Please Enter RegNumber in Correct Format"));
			 }else  {
				 
				 MotorVehicleInfo findData = repository.findByResRegNumber(req.getResRegNumber()) ;
				 if( findData!=null ) {
					 errors.add(new Error("04", "RegNumber" , "RegNumber Already Exist"));
				 }
				 
				 
			 }

			 
			 if (StringUtils.isBlank(req.getResSittingCapacity())) {
				 errors.add(new Error("18", "SeatingCapacity" , "Please Enter Seating Capacity"));
			 } else if (! req.getResSittingCapacity().matches("[1-9]+") ) {
				 errors.add(new Error("14", "SeatingCapacity" , "Please Enter Valid Number in SeatingC apacity"));
			 }
			 
			 if (StringUtils.isBlank(req.getResTareWeight())) {
				 errors.add(new Error("18", "TareWeight" , "Please Enter TareWeight"));
			 } else if (! req.getResTareWeight().matches("[0-9.]+") ) {
				 errors.add(new Error("09", "GrossWeight" , "Please Enter Valid Number in TareWeight"));
			 }
			 
			 if (StringUtils.isBlank(req.getResYearOfManufacture())) {
				 errors.add(new Error("18", "Manufacture Year" , "Please Select Manufacture Year"));
			 } else if((StringUtils.isNotBlank(req.getResYearOfManufacture())&&  ! req.getResYearOfManufacture().matches("[0-9]+")) || req.getResYearOfManufacture().length()>4 ) {
					errors.add(new Error("33", "Manufacture Year", "Please Enter Manufacture Year Format in YYYY"));
				}
				else if((StringUtils.isNotBlank(req.getResYearOfManufacture())&&! req.getResYearOfManufacture().matches("[0-9]+")) || req.getResYearOfManufacture().length()<4 ) {
					errors.add(new Error("33", "Manufacture Year", "Please Enter Manufacture Year Format in YYYY"));
				}
			 
		 } catch (Exception e) {
				e.printStackTrace();
				log.info(e.getMessage());
				
				return null;

			}
		 return errors;
	}



}
