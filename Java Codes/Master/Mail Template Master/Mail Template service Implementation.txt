/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-04-11 ( Date ISO 2022-04-11 - Time 16:00:13 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.motor.master.serviceImpl;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.motor.bean.BrokerBranchMaster;
import com.maan.motor.bean.MailTemplateMaster;
import com.maan.motor.bean.MotorQuarterpremDiscounts;
import com.maan.motor.error.Error;
import com.maan.motor.master.request.MailTemplateMasterSaveReq;
import com.maan.motor.master.response.BrokerBranchMasterGetRes;
import com.maan.motor.master.response.MailTemplateMasterGetRes;
import com.maan.motor.master.response.MotorQuarterpremDiscountsGetRes;
import com.maan.motor.master.service.MailTemplateMasterService;
import com.maan.motor.repository.MailTemplateMasterRepository;
import com.maan.motor.response.SuccessRes;
/**
* <h2>MailTemplateMasterServiceimpl</h2>
*/
@Service
@Transactional
public class MailTemplateMasterServiceImpl implements MailTemplateMasterService {

@Autowired
private MailTemplateMasterRepository repository;


private Logger log=LogManager.getLogger(MailTemplateMasterServiceImpl.class);
Gson json = new Gson();

/*
public MailTemplateMasterServiceImpl(MailTemplateMasterRepository repo) {
this.repository = repo;
}

  */

@Override
public List<Error> validateMailTemplateMaster(MailTemplateMasterSaveReq req) {
	// TODO Auto-generated method stub
	List<Error> errors = new ArrayList<Error>();
	try {
	if(StringUtils.isBlank(req.getSmsRequired()))
		{
			errors.add(new Error("01","Sms Required", "Please Select SMS Required"));
		} 
		if(StringUtils.isBlank(req.getMailRequired()))
		{
			errors.add(new Error("02","Mail Required", "Please Select Your Mail Required"));
		}
		if(StringUtils.isBlank(req.getSmsSubject())) {
			
			  errors.add(new Error("03","SMS Subject", "Please Select SMS Subject")); 
		}
		if(StringUtils.isBlank(req.getSmsBody())) {
			errors.add(new Error("04","SMS Body", "Please Enter SMS Body"));
		}
		if(StringUtils.isBlank(req.getSmsRegards()))
		{
			errors.add(new Error("05","SMS Regards","Please Enter SMS Regards"));
		}
		if(StringUtils.isBlank(req.getMailSubject()))
		{
			errors.add(new Error("06", "Mail Subject", "Please Enter Mail Subject"));
		}
		if(StringUtils.isBlank(req.getMailBody()))
		{
			errors.add(new Error("07", "Mail Body", "Please Enter Mail Body"));
		}
		if(StringUtils.isBlank(req.getMailRegards()))
		{
			errors.add(new Error("08", "Mail Regards", "Please Enter Your Mail Regards"));
		}
		if(StringUtils.isBlank(req.getEmailTo()))
		{
			errors.add(new Error("09", "Email To", "Please Enter Your Mail to option"));
		} 
				if(StringUtils.isBlank(req.getEmailCc()))
		{
			errors.add(new Error("10", "Email Cc", "Please Enter Your Mail cc "));
		}
		if(StringUtils.isBlank(req.getSmsTo()))	
		{
			errors.add(new Error("11", "Get Sms To", "Please Enter Your SMS to option"));
		}	
		if(StringUtils.isBlank(req.getStatus()))	
		{
			errors.add(new Error("12", "Status", "Please Select your Status"));
		}
		}
	catch(Exception e)
	{
		e.printStackTrace();
		log.info("Exception is -->"+e.getMessage());
	}
				
return errors;
}


@Override
@Transactional
public SuccessRes saveMailTemplateMaster(MailTemplateMasterSaveReq req) {
	// TODO Auto-generated method stub
	SuccessRes res = new SuccessRes();
	try {
		MailTemplateMaster entity = new MailTemplateMaster();
		BigDecimal  sno = BigDecimal.ZERO;
		if (req.getSno()==null || StringUtils.isBlank(req.getSno().toString())) {
			// Save
			MailTemplateMaster data = repository.findTop1ByOrderBySnoDesc();
			sno = data == null ? BigDecimal.ONE : data.getSno().add(BigDecimal.ONE);
			
			res.setResponse("Saved Succesfully ");
			
		}
		else 
		{
			sno = 	req.getSno();
			res.setResponse("Updated Succesfully ");
		}
		//Id
		entity.setSno(sno);
		//Fields
		entity.setEmailCc(req.getEmailCc());
		entity.setEmailTo(req.getEmailTo());
		entity.setEntryDate(req.getEntryDate());
		entity.setMailBody(req.getMailBody());
		entity.setMailRegards(req.getMailRegards());	
		entity.setMailRequired(req.getMailRequired());	
		entity.setMailSubject(req.getMailSubject());
		entity.setRemarks(req.getRemarks());
		entity.setSmsBody(req.getSmsBody());
		entity.setSmsRegards(req.getSmsRegards());
		entity.setSmsRequired(req.getSmsRequired());
		entity.setSmsSubject(req.getSmsSubject());
		entity.setSmsTo(req.getSmsTo());
		entity.setStatus(req.getStatus());
		entity.setUserType(req.getUserType());
		
		
		repository.save(entity);
		log.info( "Saved Details is ---> " + json.toJson(entity) );
	
	}
		catch (Exception ex) {
		log.error(ex);
		return null;
	}
	return res;

}

 @Override
    public MailTemplateMaster create(MailTemplateMaster d) {

       MailTemplateMaster entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public MailTemplateMaster update(MailTemplateMaster d) {
        MailTemplateMaster c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public MailTemplateMaster getOne(long id) {
        MailTemplateMaster t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }

*/
    @Override
    public List<MailTemplateMaster> getAll() {
        List<MailTemplateMaster> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }


	@Override
	public List<MailTemplateMasterGetRes> getAllMailTemplateDetails() {
		// TODO Auto-generated method stub
		List<MailTemplateMasterGetRes> resList = new ArrayList<MailTemplateMasterGetRes>();
		ModelMapper mapper = new ModelMapper(); 
		try {
			List<MailTemplateMaster> findList = repository.OrderBySnoAsc();
			
		//	List<MailTemplateMaster> filterBySno = findList.stream().filter(distinctByKey(o -> o.getSno() )  ).collect(Collectors.toList()) ;
		//	filterBySno.sort( Comparator.comparing(MailTemplateMaster :: getSno ) );
			
		/*	for( MailTemplateMaster data : findList ) {
				MailTemplateMasterGetRes res = new MailTemplateMasterGetRes();
				
				res = mapper.map(data, MailTemplateMasterGetRes.class );
				resList.add(res);
			} */
			//Map List	
			Type listType = new TypeToken<List<MailTemplateMasterGetRes>>(){}.getType();
			resList = mapper.map(findList,listType);
			
			
		} catch(Exception e) {
			e.printStackTrace();
			log.info( "Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	
	}
	//Fiter Details By Key
		private static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {
		    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
		    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
		}


	

	@Override
	public MailTemplateMasterGetRes getMailTemplateMasterGetRes(String sno) {
		// TODO Auto-generated method stub
		MailTemplateMasterGetRes res = new MailTemplateMasterGetRes();
		ModelMapper mapper = new ModelMapper();
		try {
			//Map
			MailTemplateMaster maildata = repository.findTop1BySnoOrderByEntryDateDesc(new BigDecimal(sno));
			res = mapper.map(maildata,MailTemplateMasterGetRes.class );
			
		} catch(Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage()  );
			return null;
		}
		return res;
		
	}


	
	

/*
    @Override
    public boolean delete(long id) {
        try {
            repository.deleteById(id);
            return true;

        } catch (Exception ex) {
			log.error(ex);
            return false;
        }
    }

 */

}
