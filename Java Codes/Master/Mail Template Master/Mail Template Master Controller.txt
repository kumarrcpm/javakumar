/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-04-11 ( Date ISO 2022-04-11 - Time 16:00:13 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.motor.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.motor.bean.MailTemplateMaster;
import com.maan.motor.bean.MotorAreacoverageMaster;
import com.maan.motor.error.Error;
import com.maan.motor.master.request.MailTemplateMasterSaveReq;
import com.maan.motor.master.request.MotorAreacoverageMasterSaveReq;
import com.maan.motor.master.response.CommonMasterRes;
import com.maan.motor.master.response.MailTemplateMasterGetRes;
import com.maan.motor.master.response.MotorQuarterpremDiscountsGetRes;
import com.maan.motor.master.service.MailTemplateMasterService;
import com.maan.motor.response.SuccessRes;
import com.maan.motor.service.PrintReqService;


/**
* <h2>MailTemplateMasterController</h2>
*/
@RestController
@RequestMapping("/api")
public class MailTemplateMasterController {

	@Autowired
	private  MailTemplateMasterService entityService;
	@Autowired
	private  PrintReqService reqPrinter;
/*
	private static final String ENTITY_TITLE = "MailTemplateMaster";


 	public MailTemplateMasterController (MailTemplateMasterService entityService) {
		this.entityService = entityService;
	}
*/
	@PostMapping(value = "/savemailtemplatemaster")
	public ResponseEntity<CommonMasterRes> saveMailTemplateMaster(@RequestBody  MailTemplateMasterSaveReq req) {
		//PrintReqService reqPrinter = null;
		reqPrinter.reqPrint(req);
		CommonMasterRes data = new CommonMasterRes(); 
		List<Error> validation   = entityService.validateMailTemplateMaster(req);
		if(validation!=null && validation.size()!=0) {
			
			data.setCommonResponse(null );
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");

			return new ResponseEntity<CommonMasterRes>(data, HttpStatus.OK);

			}else {
			// Save
			SuccessRes res = entityService.saveMailTemplateMaster(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
			return new ResponseEntity<CommonMasterRes>(data, HttpStatus.CREATED);
			} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
			}
		    }

    @GetMapping(value = "/mailtemplatemaster")
    public ResponseEntity<List<MailTemplateMaster>> getAllMailTemplateMaster() {
        List<MailTemplateMaster> lst = entityService.getAll();

        return new ResponseEntity<>(lst,HttpStatus.OK);
    }
    
    @GetMapping("/getallmailtemplatedetails")
    public ResponseEntity<CommonMasterRes> getAllMailTemplateDetails( ) {
    	CommonMasterRes data = new CommonMasterRes()  ; 
    	
    	// Get All
    	List<MailTemplateMasterGetRes> res = entityService.getAllMailTemplateDetails();
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
		return new ResponseEntity<CommonMasterRes>(data, HttpStatus.CREATED);
		} else {
		return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
    }

    @GetMapping("/getmailtemplatedetails/{sno}")
    public ResponseEntity<CommonMasterRes> getMailTemplateDetails(@PathVariable ("sno") String sno ) {
    	CommonMasterRes data = new CommonMasterRes()  ; 
    	
    	// Get 
    	MailTemplateMasterGetRes res = entityService.getMailTemplateMasterGetRes( sno);
		data .setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
		return new ResponseEntity<CommonMasterRes>(data, HttpStatus.CREATED);
		} else {
		return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
    }

	
	
/*
 * @PostMapping(value = "/mailtemplatemaster") public
 * ResponseEntity<MailTemplateMaster> createMailTemplateMaster(@RequestBody
 * MailTemplateMaster model) {
 * 
 * MailTemplateMaster data = entityService.create(model); if (data != null) {
 * return new ResponseEntity<>(data,HttpStatus.CREATED); } else { return new
 * ResponseEntity<>(null,HttpStatus.BAD_REQUEST); } }
 * 
 * @GetMapping(value = "/mailtemplatemaster") public
 * ResponseEntity<List<MailTemplateMaster>> getAllMailTemplateMaster() {
 * List<MailTemplateMaster> lst = entityService.getAll();
 * 
 * return new ResponseEntity<>(lst,HttpStatus.OK); }
 *//*
        @GetMapping(value = "/mailtemplatemaster/{id}")
    public ResponseEntity<MailTemplateMaster> getOneMailTemplateMaster(@PathVariable("id") long id) {

            MailTemplateMaster e = entityService.getOne(id);
            if (e == null) {
            	return new ResponseEntity<>(null,HttpStatus.NOT_FOUND);
            }
            return new ResponseEntity<>(e, HttpStatus.OK);
    }

*/

}
