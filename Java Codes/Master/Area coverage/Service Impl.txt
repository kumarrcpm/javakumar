/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-04-09 ( Date ISO 2022-04-09 - Time 11:46:40 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.motor.master.serviceImpl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maan.motor.bean.MobileNotificationMaster;
import com.maan.motor.bean.MotorAreacoverageMaster;
import com.maan.motor.error.Error;
import com.maan.motor.master.request.MotorAreacoverageMasterSaveReq;
import com.maan.motor.master.service.MotorAreacoverageMasterService;
import com.maan.motor.repository.MotorAreacoverageMasterRepository;
import com.maan.motor.response.SuccessRes;
/**
* <h2>MotorAreacoverageMasterServiceimpl</h2>
*/
@Service
@Transactional
public class MotorAreacoverageMasterServiceImpl implements MotorAreacoverageMasterService {

@Autowired
private MotorAreacoverageMasterRepository repository;


private Logger log=LogManager.getLogger(MotorAreacoverageMasterServiceImpl.class);
/*
public MotorAreacoverageMasterServiceImpl(MotorAreacoverageMasterRepository repo) {
this.repository = repo;
}

  */
 @Override
    public MotorAreacoverageMaster create(MotorAreacoverageMaster d) {

       MotorAreacoverageMaster entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public MotorAreacoverageMaster update(MotorAreacoverageMaster d) {
        MotorAreacoverageMaster c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public MotorAreacoverageMaster getOne(long id) {
        MotorAreacoverageMaster t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }

*/
    @Override
    public List<MotorAreacoverageMaster> getAll() {
        List<MotorAreacoverageMaster> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }


	@Override
	public List<Error> validateMotorAreaCoverageMaster(MotorAreacoverageMasterSaveReq req) {
		// TODO Auto-generated method stub
		List<Error> errors = new ArrayList<Error>();
		try {
		/*	if(StringUtils.isBlank(req.getAreacoverId()))
			{
				errors.add(new Error("01","Area Cover Id", "Please Enter Your Area Cover Id"));
			} */
			Date today = new Date();
			if(req.getEffectiveDate() ==null || StringUtils.isBlank(req.getEffectiveDate().toString()))
			{
				errors.add(new Error("02","Effective Date", "Please Enter Your Effective Date"));
			}
			else if (req.getEffectiveDate().before(today));
			{
				errors.add(new Error("02","Effective Date", "Please Enter Correct Effective Date"));

			}
			if(StringUtils.isBlank(req.getBranchCode()))
			{
				errors.add(new Error("03","Branch Code","Please select your branch Code"));
			}
			if(StringUtils.isBlank(req.getAreacoverCode()))
			{
				errors.add(new Error("04", "Area Cover Code", "Please Enter Your Area Cover Code"));
			}
			if(StringUtils.isBlank(req.getAreacoverDescEnglish()))
			{
				errors.add(new Error("05", "Area Cover Description", "Please Enter Your Area Cover Description"));
			}
			if(StringUtils.isBlank(req.getStatus()))
			{
				errors.add(new Error("06", "Status", "Please Enter Your Status"));
			}
			if(StringUtils.isBlank(req.getRemarks()))
			{
				errors.add(new Error("07", "Remarks", "Please Enter Your Remarks"));
			} 
				
			}
		catch(Exception e)
		{
			e.printStackTrace();
			log.info("Exception is -->"+e.getMessage());
		}
					
	return errors;
	}


	@Override
	@Transactional
	public SuccessRes saveMotorAreaCoverageMaster(MotorAreacoverageMasterSaveReq req) {
		// TODO Auto-generated method stub
		SuccessRes res = new SuccessRes();
		try {
			MotorAreacoverageMaster entity = new MotorAreacoverageMaster();
			BigDecimal  areaCoverId = BigDecimal.ZERO;
			BigDecimal  amendId = BigDecimal.ZERO;

			Date entryDate = new Date();

			if (StringUtils.isBlank(req.getAreacoverId())) {
				// Save
				MotorAreacoverageMaster data = repository.findTop1ByOrderByAreacoverIdDesc();
				areaCoverId = data == null ? BigDecimal.ONE : data.getAreacoverId().add(BigDecimal.ONE);
				amendId = BigDecimal.ZERO;
				res.setResponse("Saved Succesfully ");
				
			} else {
				// Update
				areaCoverId = new BigDecimal(req.getAreacoverId());
				List<MotorAreacoverageMaster> data = repository.findByAreacoverIdAndEffectiveDateOrderByEffectiveDateDesc(areaCoverId,req.getEffectiveDate());
				if(data==null || data.size()==0 ) {
					amendId=BigDecimal.ZERO;

				} else {
					amendId=data.get(0).getAmendId().add(BigDecimal.ONE);
				}
				//entryDate = data == null ? new Date() : ((MobileNotificationMaster) data).getEntryDate();
			
				res.setResponse("Updated Succesfully ");
			}
			
			entity.setAmendId(amendId);
			entity.setAreacoverId(areaCoverId);
			entity.setAreacoverDescEnglish(req.getAreacoverDescEnglish());
			entity.setAreacoverCode(req.getAreacoverCode());
			entity.setEntryDate(entryDate);
			entity.setEffectiveDate(req.getEffectiveDate());
			entity.setStatus(req.getStatus());
			entity.setRemarks(req.getRemarks());

			repository.save(entity);

		} catch (Exception ex) {
			log.error(ex);
			return null;
		}
		return res;

	}


	private BigDecimal BigDecimal(String areacoverCode) {
		// TODO Auto-generated method stub
		return null;
	}

/*
    @Override
    public boolean delete(long id) {
        try {
            repository.deleteById(id);
            return true;

        } catch (Exception ex) {
			log.error(ex);
            return false;
        }
    }

 */

}
