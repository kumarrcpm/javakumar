
public class ServiceImplementation {
	/*
	*  Copyright (c) 2019. All right reserved
	* Created on 2022-04-19 ( Date ISO 2022-04-19 - Time 19:43:27 )
	* Generated by Telosys Tools Generator ( version 3.3.0 )
	*/
	package com.maan.motor.service.impl;

	import java.math.BigDecimal;
	import java.text.SimpleDateFormat;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.Collections;
	import java.util.Date;
	import java.util.List;
	import java.util.stream.Collectors;

	import org.apache.commons.lang3.StringUtils;
	import org.apache.logging.log4j.LogManager;
	import org.apache.logging.log4j.Logger;
	import org.modelmapper.ModelMapper;
	import org.springframework.beans.factory.annotation.Autowired;
	import org.springframework.stereotype.Service;
	import org.springframework.transaction.annotation.Transactional;

	import com.google.gson.Gson;
	import com.maan.motor.auth.dto.resp.SuccessRes;
	import com.maan.motor.bean.ActInfo;
	import com.maan.motor.bean.BranchMaster;
	import com.maan.motor.bean.BrokerCompanyMaster;
	import com.maan.motor.error.Error;
	import com.maan.motor.repository.ActInfoRepository;
	import com.maan.motor.req.ActInfoSaveReq;
	import com.maan.motor.res.ActInfoMasterGetRes;
	import com.maan.motor.service.ActInfoService;
	/**
	* <h2>ActInfoServiceimpl</h2>
	 * @param <ListItemValue>
	*/
	@Service
	@Transactional
	public class ActInfoServiceImpl<ListItemValue> implements ActInfoService {

	@Autowired
	private ActInfoRepository repository;


	private Logger log=LogManager.getLogger(ActInfoServiceImpl.class);
	Gson json = new Gson();
	/*
	public ActInfoServiceImpl(ActInfoRepository repo) {
	this.repository = repo;
	}

	  */
	 @Override
	    public ActInfo create(ActInfo d) {

	       ActInfo entity;

	        try {
	            entity = repository.save(d);

	        } catch (Exception ex) {
				log.error(ex);
	            return null;
	        }
	        return entity;
	    }

	    
	    @Override
	    public ActInfo update(ActInfo d) {
	        ActInfo c;

	        try {
	            c = repository.saveAndFlush(d);

	        } catch (Exception ex) {
				log.error(ex);
	            return null;
	        }
	        return c;
	    }

	/*
	    @Override
	    public ActInfo getOne(long id) {
	        ActInfo t;

	        try {
	            t = repository.findById(id).orElse(null);

	        } catch (Exception ex) {
				log.error(ex);
	            return null;
	        }
	        return t;
	    }

	*/
	    @Override
	    public List<ActInfo> getAll() {
	        List<ActInfo> lst;

	        try {
	            lst = repository.findAll();

	        } catch (Exception ex) {
				log.error(ex);
	            return Collections.emptyList();
	        }
	        return lst;
	    }


	    @Override
	    public long getTotal() {
	        long total;

	        try {
	            total = repository.count();
	        } catch (Exception ex) {
	            log.error(ex);
				return 0;
	        }
	        return total;
	    }


		
	//////// Validation

		@Override
		public List<Error> validateActInfo(ActInfoSaveReq req) {
			// TODO Auto-generated method stub
			List<Error> errors = new ArrayList<Error>();
			try {
				if(req.getActarabic()==null || StringUtils.isBlank(req.getActarabic()))
				{
					errors.add(new Error("01","Actarabic", "Please Enter Actarabic"));
				} 
				else if(req.getActarabic().length()>100)
				{
					errors.add(new Error("01","Actarabic", "Please Enter Actarabic within 100 Characaters"));
				}
				if(req.getActenglish()==null || StringUtils.isBlank(req.getActenglish()))
				{
					errors.add(new Error("02","Actenglish", "Please Enter Actenglish"));
				}
				else if(req.getActenglish().length()>100)
				{
					errors.add(new Error("02","Actenglish", "Please Enter Actenglish within 100 Characaters"));
				}
				if(req.getCasenumber()==null || StringUtils.isBlank(req.getCasenumber())) {
					
					  errors.add(new Error("03","Casenumber", "Please Enter Casenumber")); 
				}
				else if(req.getCasenumber().length()>50)
				{
					errors.add(new Error("03","Casenumber", "Please Enter Casenumber within 50 Characaters"));
				}
				if(req.getRemarks()==null || StringUtils.isBlank(req.getRemarks())) {
					errors.add(new Error("04","Remarks", "Please Enter Remarks"));
				}
				else if(req.getRemarks().length()>500)
				{
					errors.add(new Error("04","Remarks", "Please Enter Remarks within 500 Characaters"));
				}
				if(req.getVehicleid()==null||StringUtils.isBlank(req.getVehicleid())) {
					errors.add(new Error("05","Vehicleid", "Please Enter Vehicleid"));
				}
			
				}
			catch(Exception e)
			{
				e.printStackTrace();
				log.info("Exception is -->"+e.getMessage());
			}
						
		return errors;
		}

	//////////// Save
		@Override
		@Transactional
		public SuccessRes saveActInfo(ActInfoSaveReq req) {
			// TODO Auto-generated method stub
			SuccessRes res = new SuccessRes();
			ModelMapper mapper = new ModelMapper();
			try {
				ActInfo entity = new ActInfo();
				BigDecimal  sequencenumber = BigDecimal.ZERO;
				BigDecimal amendId = BigDecimal.ZERO;
				Date entryDate = null;
				if(StringUtils.isBlank(req.getSequencenumber())) {
					//Save
					Long id  = repository.count();
					sequencenumber =new BigDecimal( id + 1);  
					//amendId = BigDecimal.ZERO;
					entryDate = new Date();
					res.setResponse("Saved Successfully");
					
				} else {
					//Update
					sequencenumber =new BigDecimal(req.getSequencenumber());
					ActInfo data = repository.findBySequencenumber(sequencenumber);
					entryDate = data.getEntrydate();
					res.setResponse("Updated Successfully");
				}
				
				//Fields
				entity.setSequencenumber(sequencenumber);
				entity.setActarabic(req.getActarabic());
				entity.setActenglish(req.getActenglish());
				entity.setAmendid(BigDecimal.ZERO);
				entity.setCasenumber(req.getCasenumber());
				entity.setEntrydate(entryDate);
				entity.setRemarks(req.getRemarks());
				entity.setStatus("Y");
				entity.setVehicleid(new BigDecimal(req.getVehicleid()));
				
				repository.save(entity);
				log.info( "Saved Details is ---> " + json.toJson(entity) );
			
			}
				catch (Exception ex) {
				log.error(ex);
				return null;
			}
			return res;

		}


		@Override
		public List<ActInfoMasterGetRes> getAllActInfoMaster() {
			// TODO Auto-generated method stub
			List<ActInfoMasterGetRes>  resList = new ArrayList<ActInfoMasterGetRes>();
			ModelMapper mapper = new ModelMapper();
			try {
				SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
				//Find All
				List<ActInfo> actInfoDatas  = repository.OrderBySequencenumberDesc();
					for(ActInfo data :  actInfoDatas) {                    
						ActInfoMasterGetRes res = new ActInfoMasterGetRes();
						res.setActarabic(data.getActarabic());
						res.setActenglish(data.getActenglish());
						res.setAmendid(data.getAmendid()==null?"":  data.getAmendid().toString() );
						res.setCasenumber(data.getCasenumber());
						res.setEntrydate(sdf.format(data.getEntrydate()));
						res.setRemarks(data.getRemarks());
						res.setSequencenumber(data.getSequencenumber().toString());
						res.setStatus(data.getStatus());
						res.setVehicleid(data.getVehicleid().toString());
						
						resList.add(res);
					
				}
			}
			 catch(Exception e) {
					e.printStackTrace();
					log.info("Exception is ---> " + e.getMessage()  );
					return null;
				}
			return resList;
		}
			

			
			

	/*
	    @Override
	    public boolean delete(long id) {
	        try {
	            repository.deleteById(id);
	            return true;

	        } catch (Exception ex) {
				log.error(ex);
	            return false;
	        }
	    }

	 */

	}
}
